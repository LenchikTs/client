# -*- coding: utf-8 -*-
#############################################################################
##
## Copyright (C) 2006-2012 Chuk&Gek and Vista Software. All rights reserved.
## Copyright (C) 2012-2020 SAMSON Group. All rights reserved.
##
#############################################################################
##
## Это программа является свободным программным обеспечением.
## Вы можете использовать, распространять и/или модифицировать её согласно
## условиям GNU GPL версии 3 или любой более поздней версии.
##
#############################################################################

from PyQt4 import QtGui
from PyQt4.QtCore import Qt, QDate, QDateTime, QString, QTime

from library.MapCode          import createMapCodeToRowIdx
from library.Utils            import calcAgeTuple, forceBool, forceDate, forceInt, forceRef, forceString

from Orgs.Utils               import getOrgStructureFullName
from Events.ActionServiceType import CActionServiceType
from Events.Utils             import getActionTypeIdListByFlatCode, getDeathDate

from Reports.Report           import CReport, normalizeMKB
from Reports.ReportBase       import CReportBase, createTable
from Reports.ReportView       import CPageFormat
from Reports.StationaryF007   import getStringProperty

from Reports.Utils            import ( dateRangeAsStr,
                                       getDataOrgStructure,
                                       getDataOrgStructure_HBDS,
                                       getOrgStructureProperty,
                                       getStringPropertyForTableName,
                                       getStringPropertyValue,
                                     )

from Reports.Ui_StationaryF14Setup import Ui_StationaryF14SetupDialog


MainRows = [
          ( u'Всего', u'1.0', u'A00-T98, U07.1, U07.2'),
          ( u'в том числе:\nНекоторые инфекционные и паразитарные болезни', u'2.0', u'A00-B99'),
          ( u'из них:\nкишечные инфекции', u'2.1', u'A00-A09'),
          ( u'туберкулез органов дыхания', u'2.2', u'A15-A16'),
          ( u'менингококковая инфекция', u'2.3', u'A39'),
          ( u'сепсис', u'2.4', u'A40-A41'),
          ( u'инфекции, передающиеся приемущественно половым путем', u'2.5', u'A50-A64'),
          ( u'острый полиомиелит', u'2.6', u'A80'),
          ( u'вирусный гепатит', u'2.7', u'B15-B19'),
          ( u'болезнь, вызванная ВИЧ', u'2.8', u'B20-B24'),
          ( u'Новообразования', u'3.0', u'C00-D48'),
          ( u'в том числе:\nзлокачес твенные новообр азовани я', u'3.1', u'C00-C97'),
          ( u'из них:\nзлокачественные новообразования лимфоидной, кроветворной и родственных им тканей', u'3.1.1', u'C81-C96'),
          ( u'из них:\nфолликулярная лимфома', u'3.1.1.1', u'C82'),
          ( u'мелкоклеточная(диффузная) нефолликулярная лимфома', u'3.1.1.2', u'C83.0'),
          ( u'мелкоклеточная с расщепленными ядрами(диффузная) нефолликулярная лимфома', u'3.1.1.3', u'C83.1'),
          ( u'крупноклеточная(диффузная) нефолликулярная лимфома', u'3.1.1.4', u'C83.3'),
          ( u'другие типы диффузных нефолликулярных лимфом', u'3.1.1.5', u'C83.8'),
          ( u'диффузная нефолликулярная лимфома неуточненная', u'3.1.1.6', u'C83.9'),
          ( u'зрелые Т/NK-клеточные лимфомы', u'3.1.1.7', u'C84'),
          ( u'из них: другие зрелые Т/NK-клеточные лимфомы', u'3.1.1.7.1', u'C84.5'),
          ( u'другие и неуточненные типы неходжкинской лимфомы', u'3.1.1.8', u'C85'),
          ( u'макроглобулинэмия Вальденстрема', u'3.1.1.9', u'C88.0'),
          ( u'хронический лимфоцитарный лейкоз', u'3.1.1.10', u'C91.1'),
          ( u'хронический миелоидный лейкоз', u'3.1.1.11', u'C92.1'),
          ( u'злокачественные новообразования сетчатки', u'3.2', u'C69.2'),
          ( u'доброкачественные новообразования', u'3.3', u'D10-D36'),
          ( u'из них: лейомиома матки', u'3.3.1', u'D25'),
          ( u'доброкачественные новообразования яичника', u'3.3.2', u'D27'),
          ( u'Болезни крови, кроветворных органов и отдельные нарушения, вовлекающие иммунный механизм', u'4.0', u'D50-D89'),
          ( u'из них:\nанемия', u'4.1', u'D50-D64'),
          ( u'из них:\nапластические анемии', u'4.1.1', u'D60-D61'),
          ( u'нарушения свертываемости крови, пурпура и другие геморрагические состояния', u'4.2', u'D65-D69'),
          ( u'гемофилия', u'4.2.1', u'D66-D68'),
          ( u'отдельные нарушения, вовлекающие иммунный механизм', u'4.3', u'D80-D89'),
          ( u'Болезни эндокринной системы, расстройства питания и нарушения обмена веществ', u'5.0', u'E00-E89'),
          ( u'из них:\nболезни щитовидной железы, связанные с йодной недостаточностью, и сходные состояния', u'5.1', u'E01-E03'),
          ( u'тиреотоксикоз (гипертиреоз)', u'5.2', u'E05'),
          ( u'тиреоидит', u'5.3', u'E06'),
          ( u'сахарный диабет', u'5.4', u'E10-E14'),
          ( u'из него:\nсахарный диабет I типа', u'5.4.1', u'E10'),
          ( u'сахарный диабет II типа', u'5.4.2', u'E11'),
          ( u'с поражением почек', u'5.4.3', u'E10.2, E11.2, E12.2, E13.2, E14.2'),
          ( u'с поражением глаз', u'5.4.4', u'E10.3, E11.3, E12.3, E13.3, E14.3'),
          ( u'гиперфункция гипофиза', u'5.5', u'E22'),
          ( u'гипопитуитаризм', u'5.6', u'E23.0'),
          ( u'Несахарный диабет', u'5.7', u'E23.2'),
          ( u'адреногенитальные расстройства', u'5.8', u'E25'),
          ( u'дисфункция яичников', u'5.9', u'E28'),
          ( u'дисфункция яичек', u'5.10', u'E29'),
          ( u'ожирение', u'5.11', u'E66'),
          ( u'фенилкетонурия', u'5.12', u'E70.0-1'),
          ( u'нарушения обмена галактозы(галактоземия)', u'5.13', u'E74.2'),
          ( u'болезнь Гоше', u'5.14', u'E75.2'),
          ( u'нарушения обмена гликозамино-гликанов(мукополисахаридоз)', u'5.15', u'E76.0-3'),
          ( u'муковисцидоз', u'5.16', u'E84'),
          ( u'Психические расстройства и расстройства поведения', u'6.0', u'F01-F99'),
          ( u'из них:\nпсихические расстройства и расстройства поведения, связанные с употреблением психоактивных веществ', u'6.1', u'F10-F19'),
          ( u'Болезни нервной системы', u'7.0', u'G00-G98'),
          ( u'из них:\nвоспалительные болезни центральной нервной системы', u'7.1', u'G00-G09'),
          ( u'из них:\nбактериальный менингит', u'7.1.1', u'G00'),
          ( u'энцефалит, миелит и энцефаломиелит', u'7.1.2', u'G04'),
          ( u'системные атрофии, поражающие преимущественно центральную нервную систему', u'7.2', u'G10-G12'),
          ( u'экстрапирамидные и другие двигательные нарушения', u'7.3', u'G20, G21, G23-G25'),
          ( u'из них:\nболезнь Паркинсона', u'7.3.1', u'G20'),
          ( u'другие экстрапирамидные и двигательные нарушения', u'7.3.2', u'G25'),
          ( u'другие дегенеративные болезни нервной системы', u'7.4', u'G30-G31'),
          ( u'из них:\nболезнь Альцгеймера', u'7.4.1', u'G30'),
          ( u'демиелинизирующие болезни центральной нервной системы', u'7.5', u'G35-G37'),
          ( u'из них:\nрассеянный склероз', u'7.5.1', u'G35'),
          ( u'эпизодические и пароксизмальные расстройства', u'7.6', u'G40-G47'),
          ( u'из них:\nэпилепсия, эпилептический статус', u'7.6.1', u'G40-G41'),
          ( u'преходящие транзиторные церебральные  ишемические приступы [атаки] и родственные   синдромы', u'7.6.2', u'G45'),
          ( u'поражения отдельных нервов, нервных корешков и сплетений, полиневропатии и другие поражения периферической нервной  системы', u'7.7', u'G50-G64'),
          ( u'из них:\nсиндром Гийена-Барре', u'7.7.1', u'G61.0'),
          ( u'болезни нервно-мышечного синапса и мышц', u'7.8', u'G70-G73'),
          ( u'из них:\nмиастения', u'7.8.1', u'G70.0, 2'),
          ( u'мышечная дистрофия Дюшенна', u'7.8.2', u'G71.0'),
          ( u'церебральный паралич и другие паралитические синдромы', u'7.9', u'G80-G83'),
          ( u'из них:\nцеребральный паралич', u'7.9.1', u'G80'),
          ( u'расстройства вегетативной (автономной) нервной системы', u'7.10', u'G90'),
          ( u'сосудистые миелопатии', u'7.11', u'G95.1'),
          ( u'Болезни глаза и его придаточного аппарата', u'8.0', u'H00-H59'),
          ( u' из них:\nязва роговицы', u'8.1', u'H16'),
          ( u' из них:\nкатаракта', u'8.2', u'H25-H26'),
          ( u'хориоретинальное воспаление', u'8.3', u'H30'),
          ( u'отслойка сетчатки с разрывом сетчатки', u'8.4', u'H33.0'),
          ( u'дегенерация макулы и заднего полюса', u'8.5', u'H35.3'),
          ( u'глаукома', u'8.6', u'H40'),
          ( u'дегенеративная миопия', u'8.7', u'H44.2'),
          ( u'болезни зрительного нерва и зрительных путей', u'8.8', u'H46-H48'),
          ( u'атрофия зрительного нерва', u'8.8.1', u'H47.2'),
          ( u'слепота и пониженное зрение', u'8.9', u'H54'),
          ( u'из них: слепота обоих глаз', u'8.9.1', u'H54.0'),
          ( u'Болезни уха и сосцевидного отростка', u'9.0', u'H60-H95'),
          ( u'из них: болезни среднего уха и сосцевидного отростка', u'9.1', u'H65-H66, H68-H74'),
          ( u'из них: острый отит', u'9.1.1', u'H65.0, H65.1, H66.0'),
          ( u'хронический отит', u'9.1.2', u'H65.2-4, H66.1-3'),
          ( u'болезни слуховой (евстахиевой) трубы', u'9.1.3', u'H68-H69'),
          ( u'перфорация барабанной перепонки', u'9.1.4', u'H72'),
          ( u'другие болезни среднего уха и сосцевидного отростка', u'9.1.5', u'H74'),
          ( u'болезни внутреннего уха', u'9.2', u'H80, H81, H83'),
          ( u'из них: отосклероз', u'9.2.1', u'H80'),
          ( u'болезнь Меньера', u'9.2.2', u'H81.0'),
          ( u'кондуктивная и нейросенсорная потеря слуха', u'9.3', u'H90'),
          ( u'из них: кондуктивная потеря слуха двусторонняя', u'9.3.1', u'H90.0'),
          ( u'нейросенсорная потеря слуха двусторонняя', u'9.3.2', u'H90.3'),
          ( u'Болезни системы кровообращения', u'10.0', u'I00-I99'),
          ( u'из них:\nострая ревматичесская лихорадка', u'10.1', u'I00-I02'),
          ( u'хронические ревматические болезни сердца', u'10.2', u'I05-I09'),
          ( u'из них: ревматические поражения клапанов', u'10.2.1', u'I05-I08'),
          ( u'болезни, характеризующиеся повышенным кровяным давлением', u'10.3', u'I10-I13'),
          ( u'из них:\nэссенциальная гипертензия', u'10.3.1', u'I10'),
          ( u'гипертензивная болезнь сердца (гипертоническая болезнь с преимущественным поражением сердца)', u'10.3.2', u'I11'),
          ( u'гипертензивная (гипертоническая) болезнь с преимущественным поражением  почек', u'10.3.3', u'I12'),
          ( u'гипертензивная (гипертоническая) болезнь с преимущественным поражением сердца и  почек', u'10.3.4', u'I13'),
          ( u'ишемические болезни сердца', u'10.4', u'I20-I25'),
          ( u'из них:\nстенокардия', u'10.4.1', u'I20'),
          ( u'из нее:\nнестабильная стенокардия', u'10.4.1.1', u'I20.0'),
          ( u'острый инфаркт миокарда', u'10.4.2', u'I21'),
          ( u'повторный инфаркт миокарда', u'10.4.3', u'I22'),
          ( u'другие формы острой ишемической болезни сердца', u'10.4.4', u'I24'),
          ( u'хроническая ишемическая болезнь сердца', u'10.4.5', u'I25'),
          ( u'из нее постинфарктный кардиосклероз', u'10.4.5.1', u'I25.8'),
          ( u'другие формы легочно-сердечной недостаточности', u'10.5', u'I27'),
          ( u'другие болезни сердца', u'10.6', u'I30- I51'),
          ( u'из них: острый перикардит', u'10.6.1', u'I30'),
          ( u'из них:\nострый и подострый эндокардит', u'10.6.2', u'I33'),
          ( u'неревматические поражения клапанов', u'10.6.3', u'I34-I37'),
          ( u'острый миокардит', u'10.6.4', u'I40'),
          ( u'кардиомиопатия', u'10.6.5', u'I42'),
          ( u'предсердно-желудочковая [атриовентрикулярная] блокада', u'10.6.6', u'I44.0-I44.3'),
          ( u'желудочковая тахикардия', u'10.6.7', u'I47.2'),
          ( u'фибрилляция и трепетание предсердий', u'10.6.8', u'I48'),
          ( u'синдром слабости синусового узла', u'10.6.9', u'I49.5'),
          ( u'цереброваскулярные болезни', u'10.7', u'I60-I69'),
          ( u'из них:\nсубарахноидальное кровоизлияние', u'10.7.1', u'I60'),
          ( u'внутримозговые и другие внутричерепные кровоизлияния', u'10.7.2', u'I61, I62'),
          ( u'инфаркт мозга', u'10.7.3', u'I63'),
          ( u'инсульт неуточненный, как кровоизлияние или инфаркт', u'10.7.4', u'I64'),
          ( u'закупорка и стеноз прецеребральных, церебральных артерий, не приводящие к инфаркту мозга', u'10.7.5', u'I65- I66'),
          ( u'другие цереброваскулярные болезни', u'10.7.6', u'I67'),
          ( u'из них: церебральный атеросклероз', u'10.7.6.1', u'I67.2'),
          ( u'атеросклероз артерий конечностей, тромбангиит облитерирующий ', u'10.8', u'I70.2, I73.1'),
          ( u'болезни вен, лимфатических сосудов и лимфатических узлов', u'10.9', u'I80-I89'),
          ( u'из них:\nфлебит и тромбофлебит', u'10.9.1', u'I80'),
          ( u'тромбоз портальной вены', u'10.9.2', u'I81'),
          ( u'варикозное расширение вен нижних конечностей', u'10.9.3', u'I83'),
          ( u'Болезни органов дыхания', u'11.0', u'J00-J98'),
          ( u' из них:\nострые респираторные инфекции верхних дыхательных путей', u'11.1', u'J00-J06'),
          ( u'из них:\nострый ларингит и трахеит', u'11.1.1', u'J04'),
          ( u'острый обструктивный ларингит [круп] и эпиглоттит', u'11.1.2', u'J05'),
          ( u'грипп', u'11.2', u'J09-J11'),
          ( u'пневмония', u'11.3', u'J12-J18'),
          ( u'острые респираторные инфекции нижних дыхательных путей ', u'11.4', u'J20-J22'),
          ( u'аллергический ринит (поллиноз)', u'11.5', u'J30.1'),
          ( u'хронические болезни миндалин и аденоидов, перитонзиллярный абсцесс', u'11.6', u'J35- J36'),
          ( u'бронхит хронический и неуточненный, эмфизема', u'11.7', u'J40-J43'),
          ( u'другая хроническая обструктивная легочная болезнь ', u'11.8', u'J44'),
          ( u'бронхоэктатическая болезнь', u'11.9', u'J47'),
          ( u'астма; астматический статус', u'11.10', u'J45, J46'),
          ( u'другие интерстициальные легочные болезни, гнойные и некротические состояния нижних дыхательных путей, другие болезни плевры', u'11.11', u'J84-J94'),
          ( u'Болезни органов пищеварения', u'12.0', u'K00-K92'),
          ( u' из них:\nязва желудка и двенадцатиперстной кишки', u'12.1', u'K25-K26'),
          ( u'гастрит и дуоденит', u'12.2', u'K29'),
          ( u'грыжи', u'12.3', u'K40-K46'),
          ( u'неинфекционный энтерит и колит', u'12.4', u'K50-K52'),
          ( u'из них:\nболезнь Крона', u'12.4.1', u'K50'),
          ( u'язвенный колит', u'12.4.2', u'K51'),
          ( u'другие болезни кишечника', u'12.5', u'K55-K63'),
          ( u'из них:\nпаралитический илеус и непроходимость кишечника без грыжи', u'12.5.1', u'K56'),
          ( u'дивертикулярная болезнь кишечника', u'12.5.2', u'K57'),
          ( u'синдром раздраженного кишечника', u'12.5.3', u'K58'),
          ( u'трещина и свищ области заднего прохода и прямой кишки', u'12.5.4', u'K60'),
          ( u'абсцесс области заднего прохода и прямой кишки', u'12.5.5', u'K61'),
          ( u'геморрой', u'12.6', u'K64'),
          ( u'перитонит', u'12.7', u'K65'),
          ( u'болезни печени', u'12.8', u'K70-K76'),
          ( u'из них:\nфиброз и цирроз печени', u'12.8.1', u'K74'),
          ( u'болезни желчного пузыря, желчевыводящих путей', u'12.9', u'K80-K83'),
          ( u'болезни поджелудочной железы', u'12.10', u'K85-K86'),
          ( u'из них:\nострый панкреатит', u'12.10.1', u'K85'),
          ( u'Болезни кожи и подкожной клетчатки', u'13.0', u'L00-L98'),
          ( u'из них: пузырчатка', u'13.1', u'L10'),
          ( u'буллезный пемфигоид', u'13.2', u'L12'),
          ( u'дерматит герпетиформный Дюринга', u'13.3', u'L13.0'),
          ( u'из них:\nпсориаз, всего', u'13.4', u'L40'),
          ( u'из них:\nпсориаз артропатический', u'13.4.1', u'L40.5'),
          ( u'дискоидная красная волчанка', u'13.5', u'L93.0'),
          ( u'локализованная склеродермия', u'13.6', u'L94.0'),
          ( u'Болезни костно-мышечной системы и соединительной ткани', u'14.0', u'M00-M99'),
          ( u'из них:\nартропатии', u'14.1', u'M00-M25'),
          ( u'из них:\nреактивные артропатии', u'14.1.1', u'M02'),
          ( u'серопозитивный и другие ревматоидные артриты', u'14.1.2', u'M05-M06'),
          ( u'юношеский (ювенильный) артрит', u'14.1.3', u'M08'),
          ( u'артрозы', u'14.1.4', u'M15-M19'),
          ( u'системные поражения соединительной ткани', u'14.2', u'M30-M35'),
          ( u'из них: системная красная волчанка', u'14.2.1', u'M32'),
          ( u'деформирующие дорсопатии', u'14.3', u'M40-M43'),
          ( u'спондилопатии', u'14.4', u'M45-M49'),
          ( u'из них: анкилозирующий спондилит', u'14.4.1', u'M45'),
          ( u'другие дорсопатии', u'14.5', u'M50-M54'),
          ( u'поражения синовиальных оболочек и сухожилий', u'14.6', u'M65-M67'),
          ( u'остеопатии и хондропатии', u'14.7', u'M80-M94'),
          ( u'из них:\nостеопорозы', u'14.7.1', u'M80-M81'),
          ( u'Болезни мочеполовой системы', u'15.0', u'N00-N99'),
          ( u' из них:\nгломерулярные, тубулоинтерстициальные болезни почек, другие болезни почки и мочеточника', u'15.1', u'N00-N15, N25-N28'),
          ( u'почечная недостаточность', u'15.2', u'N17-N19'),
          ( u'мочекаменная болезнь', u'15.3', u'N20-N21, N23'),
          ( u'другие болезни мочевой системы', u'15.4', u'N30-N32, N34-N36, N39'),
          ( u'болезни предстательной железы', u'15.5', u'N40-N42'),
          ( u'доброкачественная дисплазия молочной железы', u'15.6', u'N60'),
          ( u'воспалительные болезни женских тазовых органов', u'15.7', u'N70-N73, N75-N76'),
          ( u'из них:\nсальпингит и оофорит', u'15.7.1', u'N70'),
          ( u'эндометриоз', u'15.8', u'N80'),
          ( u'эрозия и эктропион шейки матки', u'15.9', u'N86'),
          ( u'расстройства менструаций ', u'15.10', u'N91-N94'),
          ( u'женское бесплодие', u'15.11', u'N97'),
          ( u'Беременность, роды и послеродовой период', u'16.0', u'O00-O99'),
          ( u'Отдельные состояния, возникающие в перинатальном периоде', u'17.0', u'P00-P96'),
          ( u'Врожденные аномалии, пороки развития, деформации и хромосомные нарушения', u'18.0', u'Q00-Q99'),
          ( u'из них:\nврожденные аномалии [пороки развития] нервной системы', u'18.1', u'Q00-Q07'),
          ( u'врожденные аномалии глаза ', u'18.2', u'Q10-Q15'),
          ( u'врожденные аномалии системы кровообращения', u'18.3', u'Q20-Q28'),
          ( u'врожденные аномалии органов пищеварения', u'18.4', u'Q38-Q45'),
          ( u'из них: болезнь Гиршпрунга', u'18.4.1', u'Q43'),
          ( u'врожденные аномалии женских половых органов', u'18.5', u'Q50-Q52'),
          ( u'неопределенность пола и псевдогермафродитизм', u'18.6', u'Q56'),
          ( u'врожденный ихтиоз', u'18.7', u'Q80'),
          ( u'нейрофиброматоз (незлокачественный)', u'18.8', u'Q85.0'),
          ( u'синдром Дауна', u'18.9', u'Q90'),
          ( u'Симптомы, признаки и оклонения от нормы, выявленные при клинических и лабораторных исследованиях, не классифицированные в других рубриках', u'19.0', u'R00-R99'),
          ( u'Травмы, отравления и некоторые другие последствия воздействия внешних причин', u'20.0', u'S00-T98'),
          ( u'из них:\nпереломы черепа и лицевых костей', u'20.1.1', u'S02'),
          ( u'внутричерепные травмы', u'20.2', u'S06'),
          ( u'термические и химические ожоги', u'20.3', u'T20-T30'),
          ( u'отравления лекарственными средствами, медикаментами и биологическими веществами', u'20.4', u'T36-T50'),
          ( u'из них: отравление наркотиками', u'20.4.1', u'T40.0-T40.6'),
          ( u'токсическое действие веществ преимущественно немедицинского назначения', u'20.5', u'T51-T65'),
          ( u'из них: токсическое действие алкоголя', u'20.5.1', u'T51'),
          ( u'COVID-19', u'21', u'U07.1, U07.2'),
          ( u' Кроме того:\nфакторы, влияющие на состояние здоровья населения и обращения в учреждения здравоохранения', u'22.0', u'Z00-Z99'),
          ( u'из них:\nносительство возбудителя  инфекционных заболеваний', u'22.1', u'Z22'),
          ( u'наличие илеостомы, колостомы', u'22.2', u'Z93.2,Z93.3')
       ]


MainRowsChildren = [
          ( u'Всего', u'1.0', u'A00-T98'),
          ( u'в том числе:\nНекоторые инфекционные и паразитарные болезни', u'2.0', u'A00-B99'),
          ( u'из них:\nкишечные инфекции', u'2.1', u'A00-A09'),
          ( u'туберкулез органов дыхания', u'2.2', u'A15-A16'),
          ( u'менингококковая инфекция', u'2.3', u'A39'),
          ( u'сепсис', u'2.4', u'A40-A41'),
          ( u'инфекции, передающиеся приемущественно половым путем', u'2.5', u'A50-A64'),
          ( u'острый полиомиелит', u'2.6', u'A80'),
          ( u'вирусный гепатит', u'2.7', u'B15-B19'),
          ( u'болезнь, вызванная ВИЧ', u'2.8', u'B20-B24'),
          ( u'Новообразования', u'3.0', u'C00-D48'),
          ( u'в том числе:\nзлокачественные новообразования', u'3.1', u'C00-C97'),
          ( u'из них:\nзлокачественные новообразования лимфоидной, кроветворной и родственных им тканей', u'3.1.1', u'C81-C96'),
          ( u'из них:\nфолликулярная лимфома', u'3.1.1.1', u'C82'),
          ( u'мелкоклеточная(диффузная) нефолликулярная лимфома', u'3.1.1.2', u'C83.0'),
          ( u'мелкоклеточная с расщепленными ядрами(диффузная) нефолликулярная лимфома', u'3.1.1.3', u'C83.1'),
          ( u'крупноклеточная(диффузная) нефолликулярная лимфома', u'3.1.1.4', u'C83.3'),
          ( u'другие типы диффузных нефолликулярных лимфом', u'3.1.1.5', u'C83.8'),
          ( u'диффузная нефолликулярная лимфома неуточненная', u'3.1.1.6', u'C83.9'),
          ( u'зрелые Т/NK-клеточные лимфомы', u'3.1.1.7', u'C84'),
          ( u'из них: другие зрелые Т/NK-клеточные лимфомы', u'3.1.1.7.1', u'C84.5'),
          ( u'другие и неуточненные типы неходжкинской лимфомы', u'3.1.1.8', u'C85'),
          ( u'макроглобулинэмия Вальденстрема', u'3.1.1.9', u'C88.0'),
          ( u'хронический лимфоцитарный лейкоз', u'3.1.1.10', u'C91.1'),
          ( u'хронический миелоидный лейкоз', u'3.1.1.11', u'C92.1'),
          ( u'злокачественные новообразования сетчатки', u'3.2', u'C69.2'),
          ( u'доброкачественные новообразования', u'3.3', u'D10-D36'),
          ( u'из них: лейомиома матки', u'3.3.1', u'D25'),
          ( u'доброкачественные новообразования яичника', u'3.3.2', u'D27'),
          ( u'Болезни крови, кроветворных органов и отдельные нарушения, вовлекающие иммунный механизм', u'4.0', u'D50-D89'),
          ( u'из них:\nанемия', u'4.1', u'D50-D64'),
          ( u'из них:\nапластические анемии', u'4.1.1', u'D60-D61'),
          ( u'нарушения свертываемости крови, пурпура и другие геморрагические состояния', u'4.2', u'D65-D69'),
          ( u'гемофилия', u'4.2.1', u'D66-D68'),
          ( u'отдельные нарушения, вовлекающие иммунный механизм', u'4.3', u'D80-D89'),
          ( u'Болезни эндокринной системы, расстройства питания и нарушения обмена веществ', u'5.0', u'E00-E89'),
          ( u'из них:\nболезни щитовидной железы, связанные с йодной недостаточностью, и сходные состояния', u'5.1', u'E01-E03'),
          ( u'тиреотоксикоз (гипертиреоз)', u'5.2', u'E05'),
          ( u'тиреоидит', u'5.3', u'E06'),
          ( u'сахарный диабет', u'5.4', u'E10-E14'),
          ( u'из него:\nсахарный диабет I типа', u'5.4.1', u'E10'),
          ( u'сахарный диабет II типа', u'5.4.2', u'E11'),
          ( u'с поражением почек', u'5.4.3', u'E10.2, E11.2, E12.2, E13.2, E14.2'),
          ( u'с поражением глаз', u'5.4.4', u'E10.3, E11.3, E12.3, E13.3, E14.3'),
          ( u'гиперфункция гипофиза', u'5.5', u'E22'),
          ( u'гипопитуитаризм', u'5.6', u'E23.0'),
          ( u'Несахарный диабет', u'5.7', u'E23.2'),
          ( u'адреногенитальные расстройства', u'5.8', u'E25'),
          ( u'дисфункция яичников', u'5.9', u'E28'),
          ( u'дисфункция яичек', u'5.10', u'E29'),
          ( u'ожирение', u'5.11', u'E66'),
          ( u'фенилкетонурия', u'5.12', u'E70.0-1'),
          ( u'нарушения обмена галактозы(галактоземия)', u'5.13', u'E74.2'),
          ( u'болезнь Гоше', u'5.14', u'E75.2'),
          ( u'нарушения обмена гликозамино-гликанов(мукополисахаридоз)', u'5.15', u'E76.0-3'),
          ( u'муковисцидоз', u'5.16', u'E84'),
          ( u'Психические расстройства и расстройства поведения', u'6.0', u'F01-F99'),
          ( u'из них:\nпсихические расстройства и расстройства поведения, связанные с употреблением психоактивных веществ', u'6.1', u'F10-F19'),
          ( u'Болезни нервной системы', u'7.0', u'G00-G98'),
          ( u'из них:\nвоспалительные болезни центральной нервной системы', u'7.1', u'G00-G09'),
          ( u'из них:\nбактериальный менингит', u'7.1.1', u'G00'),
          ( u'энцефалит, миелит и энцефаломиелит', u'7.1.2', u'G04'),
          ( u'системные атрофии, поражающие преимущественно центральную нервную систему', u'7.2', u'G10-G12'),
          ( u'экстрапирамидные и другие двигательные нарушения', u'7.3', u'G20, G21, G23-G25'),
          ( u'из них:\nболезнь Паркинсона', u'7.3.1', u'G20'),
          ( u'другие экстрапирамидные и двигательные нарушения', u'7.3.2', u'G25'),
          ( u'другие дегенеративные болезни нервной системы', u'7.4', u'G30-G31'),
          ( u'из них: болезнь Альцгеймера', u'7.4.1', u'G30'),
          ( u'демиелинизирующие болезни центральной нервной системы', u'7.5', u'G35-G37'),
          ( u'из них:\nрассеянный склероз', u'7.5.1', u'G35'),
          ( u'эпизодические и пароксизмальные расстройства', u'7.6', u'G40-G47'),
          ( u'из них:\nэпилепсия, эпилептический статус', u'7.6.1', u'G40-G41'),
          ( u'преходящие транзиторные церебральные  ишемические приступы [атаки] и родственные   синдромы', u'7.6.2', u'G45'),
          ( u'поражения отдельных нервов, нервных корешков и сплетений, полиневропатии и другие поражения периферической нервной  системы', u'7.7', u'G50-G64'),
          ( u'из них:\nсиндром Гийена-Барре', u'7.7.1', u'G61.0'),
          ( u'болезни нервно-мышечного синапса и мышц', u'7.8', u'G70-G73'),
          ( u'из них:\nмиастения', u'7.8.1', u'G70.0, 2'),
          ( u'мышечная дистрофия Дюшенна', u'7.8.2', u'G71.0'),
          ( u'церебральный паралич и другие паралитические синдромы', u'7.9', u'G80-G83'),
          ( u'из них:\nцеребральный паралич', u'7.9.1', u'G80'),
          ( u'расстройства вегетативной (автономной) нервной системы', u'7.10', u'G90'),
          ( u'сосудистые миелопатии', u'7.11', u'G95.1'),
          ( u'Болезни глаза и его придаточного аппарата', u'8.0', u'H00-H59'),
          ( u' из них:\nязва роговицы', u'8.1', u'H16'),
          ( u' из них:\nкатаракта', u'8.2', u'H25-H26'),
          ( u'хориоретинальное воспаление', u'8.3', u'H30'),
          ( u'отслойка сетчатки с разрывом сетчатки', u'8.4', u'H33.0'),
          ( u'дегенерация макулы и заднего полюса', u'8.5', u'H35.3'),
          ( u'глаукома', u'8.6', u'H40'),
          ( u'дегенеративная миопия', u'8.7', u'H44.2'),
          ( u'болезни зрительного нерва и зрительных путей', u'8.8', u'H46-H48'),
          ( u'атрофия зрительного нерва', u'8.8.1', u'H47.2'),
          ( u'слепота и пониженное зрение', u'8.9', u'H54'),
          ( u'из них: слепота обоих глаз', u'8.9.1', u'H54.0'),
          ( u'Болезни уха и сосцевидного отростка', u'9.0', u'H60-H95'),
          ( u'из них:\nболезни среднего уха и сосцевидного отростка', u'9.1', u'H65-H66, H68-H74'),
          ( u'из них: острый отит', u'9.1.1', u'H65.0, H65.1, H66.0'),
          ( u'хронический отит', u'9.1.2', u'H65.2-4, H66.1-3'),
          ( u'болезни слуховой (евстахиевой) трубы', u'9.1.3', u'H68-H69'),
          ( u'перфорация барабанной перепонки', u'9.1.4', u'H72'),
          ( u'другие болезни среднего уха и сосцевидного отростка', u'9.1.5', u'H74'),
          ( u'болезни внутреннего уха', u'9.2', u'H80, H81, H83'),
          ( u'из них: отосклероз', u'9.2.1', u'H80'),
          ( u'болезнь Меньера', u'9.2.2', u'H81.0'),
          ( u'кондуктивная и нейросенсорная потеря слуха', u'9.3', u'H90'),
          ( u'из них: кондуктивная потеря слуха двусторонняя', u'9.3.1', u'H90.0'),
          ( u'нейросенсорная потеря слуха двусторонняя', u'9.3.2', u'H90.3'),
          ( u'Болезни системы кровообращения', u'10.0', u'I00-I99'),
          ( u'из них:\nострая ревматичесская лихорадка', u'10.1', u'I00-I02'),
          ( u'хронические ревматические болезни сердца', u'10.2', u'I05-I09'),
          ( u'из них: ревматические поражения клапанов', u'10.2.1', u'I05-I08'),
          ( u'болезни, характеризующиеся повышенным кровяным давлением', u'10.3', u'I10-I13'),
          ( u'из них:\nэссенциальная гипертензия', u'10.3.1', u'I10'),
          ( u'гипертензивная болезнь сердца (гипертоническая болезнь с преимущественным поражением сердца)', u'10.3.2', u'I11'),
          ( u'гипертензивная (гипертоническая) болезнь с преимущественным поражением  почек', u'10.3.3', u'I12'),
          ( u'гипертензивная (гипертоническая) болезнь с преимущественным поражением сердца и  почек', u'10.3.4', u'I13'),
          ( u'ишемические болезни сердца', u'10.4', u'I20-I25'),
          ( u'из них:\nстенокардия', u'10.4.1', u'I20'),
          ( u'из нее:\nнестабильная стенокардия', u'10.4.1.1', u'I20.0'),
          ( u'острый инфаркт миокарда', u'10.4.2', u'I21'),
          ( u'повторный инфаркт миокарда', u'10.4.3', u'I22'),
          ( u'другие формы острой ишемической болезни сердца', u'10.4.4', u'I24'),
          ( u'хроническая ишемическая болезнь сердца', u'10.4.5', u'I25'),
          ( u'из нее постинфарктный кардиосклероз', u'10.4.5.1', u'I25.8'),
          ( u'другие формы легочно-сердечной недостаточности', u'10.5', u' I27'),
          ( u'другие болезни сердца', u'10.6', u'I30-I51'),
          ( u'из них: острый перикардит', u'10.6.1', u'I30'),
          ( u'из них:\nострый и подострый эндокардит', u'10.6.2', u'I33'),
          ( u'неревматические поражения клапанов', u'10.6.3', u'I34-I37'),
          ( u'острый миокардит', u'10.6.4', u'I40'),
          ( u'кардиомиопатия', u'10.6.5', u'I42'),
          ( u'предсердно-желудочковая [атриовентрикулярная] блокада', u'10.6.6', u'I44.0-I44.3'),
          ( u'желудочковая тахикардия', u'10.6.7', u'I47.2'),
          ( u'фибрилляция и трепетание предсердий', u'10.6.8', u'I48'),
          ( u'синдром слабости синусового узла', u'10.6.9', u'I49.5'),
          ( u'цереброваскулярные болезни', u'10.7', u'I60-I69'),
          ( u'из них:\nсубарахноидальное кровоизлияние', u'10.7.1', u'I60'),
          ( u'внутримозговые и другие внутричерепные кровоизлияния', u'10.7.2', u'I61, I62'),
          ( u'инфаркт мозга', u'10.7.3', u'I63'),
          ( u'инсульт неуточненный, как кровоизлияние или инфаркт', u'10.7.4', u'I64'),
          ( u'закупорка и стеноз прецеребральных, церебральных артерий, не приводящие к инфаркту мозга', u'10.7.5', u'I65- I66'),
          ( u'другие цереброваскулярные болезни', u'10.7.6', u'I67'),
          ( u'из них: церебральный атеросклероз', u'10.7.6.1', u'I67.2'),
          ( u'атеросклероз артерий конечностей, тромбангиит облитерирующий ', u'10.8', u'I70.2, I73.1'),
          ( u'болезни вен, лимфатических сосудов и лимфатических узлов', u'10.9', u'I80-I89'),
          ( u'из них:\nфлебит и тромбофлебит', u'10.9.1', u'I80'),
          ( u'тромбоз портальной вены', u'10.9.2', u'I81'),
          ( u'варикозное расширение вен нижних конечностей', u'10.9.3', u'I83'),
          ( u'Болезни органов дыхания', u'11.0', u'J00-J98'),
          ( u' из них:\nострые респираторные инфекции верхних дыхательных путей', u'11.1', u'J00-J06'),
          ( u'из них:\nострый ларингит и трахеит', u'11.1.1', u'J04'),
          ( u'острый обструктивный ларингит [круп] и эпиглоттит', u'11.1.2', u'J05'),
          ( u'грипп', u'11.2', u'J09-J11'),
          ( u'пневмония', u'11.3', u'J12-J18'),
          ( u'острые респираторные инфекции нижних дыхательных путей ', u'11.4', u'J20-J22'),
          ( u'аллергический ринит (поллиноз)', u'11.5', u'J30.1'),
          ( u'хронические болезни миндалин и аденоидов, перитонзиллярный абсцесс', u'11.6', u'J35- J36'),
          ( u'бронхит хронический и неуточненный, эмфизема', u'11.7', u'J40-J43'),
          ( u'другая хроническая обструктивная легочная болезнь ', u'11.8', u'J44'),
          ( u'бронхоэктатическая болезнь', u'11.9', u'J47'),
          ( u'астма; астматический статус', u'11.10', u'J45, J46'),
          ( u'другие интерстициальные легочные болезни, гнойные и некротические состояния нижних дыхательных путей, другие болезни плевры', u'11.11', u'J84-J94'),
          ( u'Болезни органов пищеварения', u'12.0', u'K00-K92'),
          ( u' из них:\nязва желудка и двенадцатиперстной кишки', u'12.1', u'K25-K26'),
          ( u'гастрит и дуоденит', u'12.2', u'K29'),
          ( u'грыжи', u'12.3', u'K40-K46'),
          ( u'неинфекционный энтерит и колит', u'12.4', u'K50-K52'),
          ( u'из них:\nболезнь Крона', u'12.4.1', u'K50'),
          ( u'язвенный колит', u'12.4.2', u'K51'),
          ( u'другие болезни кишечника', u'12.5', u'K55-K63'),
          ( u'из них:\nпаралитический илеус и непроходимость кишечника без грыжи', u'12.5.1', u'K56'),
          ( u'дивертикулярная болезнь кишечника', u'12.5.2', u'K57'),
          ( u'синдром раздраженного кишечника', u'12.5.3', u'K58'),
          ( u'трещина и свищ области заднего прохода и прямой кишки', u'12.5.4', u'K60'),
          ( u'абсцесс области заднего прохода и прямой кишки', u'12.5.5', u'K61'),
          ( u'геморрой', u'12.6', u'K64'),
          ( u'болезни печени', u'12.8', u'K70-K76'),
          ( u'из них:\nфиброз и цирроз печени', u'12.8.1', u'K74'),
          ( u'болезни желчного пузыря, желчевыводящих путей', u'12.9', u'K80-K83'),
          ( u'болезни поджелудочной железы', u'12.10', u'K85-K86'),
          ( u'из них:\nострый панкреатит', u'12.10.1', u'K85'),
          ( u'Болезни кожи и подкожной клетчатки', u'13.0', u'L00-L98'),
          ( u'из них: пузырчатка', u'13.1', u'L10'),
          ( u'буллезный пемфигоид', u'13.2', u'L12'),
          ( u'дерматит герпетиформный Дюринга', u'13.3', u'L13.0'),
          ( u'из них:\nпсориаз, всего', u'13.4', u'L40'),
          ( u'из них:\nпсориаз артропатический', u'13.4.1', u'L40.5'),
          ( u'дискоидная красная волчанка', u'13.5', u'L93.0'),
          ( u'локализованная склеродермия', u'13.6', u'L94.0'),
          ( u'Болезни костно-мышечной системы и соединительной ткани', u'14.0', u'M00-M99'),
          ( u'из них:\nартропатии', u'14.1', u'M00-M25'),
          ( u'из них:\nреактивные артропатии', u'14.1.1', u'M02'),
          ( u'серопозитивный и другие ревматоидные артриты', u'14.1.2', u'M05-M06'),
          ( u'юношеский (ювенильный) артрит', u'14.1.3', u'M08'),
          ( u'артрозы', u'14.1.4', u'M15-M19'),
          ( u'системные поражения соединительной ткани', u'14.2', u'M30-M35'),
          ( u'из них: системная красная волчанка', u'14.2.1', u'M32'),
          ( u'деформирующие дорсопатии', u'14.3', u'M40-M43'),
          ( u'спондилопатии', u'14.4', u'M45-M49'),
          ( u'из них: анкилозирующий спондилит', u'14.4.1', u'M45'),
          ( u'другие дорсопатии', u'14.5', u'M50-M54'),
          ( u'поражения синовиальных оболочек и сухожилий', u'14.6', u'M65-M67'),
          ( u'остеопатии и хондропатии', u'14.7', u'M80-M94'),
          ( u'из них:\nостеопорозы', u'14.7.1', u'M80-M81'),
          ( u'Болезни мочеполовой системы', u'15.0', u'N00-N99'),
          ( u' из них:\nгломерулярные, тубулоинтерстициальные болезни почек, другие болезни почки и мочеточника', u'15.1', u'N00-N15, N25-N28'),
          ( u'почечная недостаточность', u'15.2', u'N17-N19'),
          ( u'мочекаменная болезнь', u'15.3', u'N20-N21, N23'),
          ( u'другие болезни мочевой системы', u'15.4', u'N30-N32, N34-N36, N39'),
          ( u'болезни предстательной железы', u'15.5', u'N40-N42'),
          ( u'доброкачественная дисплазия молочной железы', u'15.6', u'N60'),
          ( u'воспалительные болезни женских тазовых органов', u'15.7', u'N70-N73, N75-N76'),
          ( u'из них:\nсальпингит и оофорит', u'15.7.1', u'N70'),
          ( u'эндометриоз', u'15.8', u'N80'),
          ( u'эрозия и эктропион шейки матки', u'15.9', u'N86'),
          ( u'расстройства менструаций ', u'15.10', u'N91-N94'),
          ( u'женское бесплодие', u'15.11', u'N97'),
          ( u'Беременность, роды и послеродовой период', u'16.0', u'O00-O99'),
          ( u'Отдельные состояния, возникающие в перинатальном периоде', u'17.0', u'P00-P96'),
          ( u'Врожденные аномалии, пороки развития, деформации и хромосомные нарушения', u'18.0', u'Q00-Q99'),
          ( u'из них:\nврожденные аномалии [пороки развития] нервной системы', u'18.1', u'Q00-Q07'),
          ( u'врожденные аномалии глаза ', u'18.2', u'Q10-Q15'),
          ( u'врожденные аномалии системы кровообращения', u'18.3', u'Q20-Q28'),
          ( u'врожденные аномалии органов пищеварения', u'18.4', u'Q38-Q45'),
          ( u'из них: болезнь Гиршпрунга', u'18.4.1', u'Q43'),
          ( u'врожденные аномалии женских половых органов', u'18.5', u'Q50-Q52'),
          ( u'неопределенность пола и псевдогермафродитизм', u'18.6', u'Q56'),
          ( u'врожденный ихтиоз', u'18.7', u'Q80'),
          ( u'нейрофиброматоз (незлокачественный)', u'18.8', u'Q85.0'),
          ( u'синдром Дауна', u'18.9', u'Q90'),
          ( u'Симптомы, признаки и оклонения от нормы, выявленные при клинических и лабораторных исследованиях, не классифицированные в других рубриках', u'19.0', u'R00-R99'),
          ( u'Травмы, отравления и некоторые другие последствия воздействия внешних причин', u'20.0', u'S00-T98'),
          ( u'из них:\nпереломы', u'20.1', u'S02,S12,S22,S32,S42,S52,S62,S72,S82,S92,T02,T08,T10,T12,T14.2'),
          ( u'из них:\nпереломы черепа и лицевых костей', u'20.1.1', u'S02'),
          ( u'травма глаза и глазницы', u'20.2', u'S05'),
          ( u'внутричерепные травмы', u'20.3', u'S06'),
          ( u'термические и химические ожоги', u'20.4', u'T20-T30'),
          ( u'отравления лекарственными средствами, медикаментами и биологическими веществами', u'20.5', u'T36-T50'),
          ( u'из них: отравление наркотиками', u'20.5.1', u'T40.0-T40.6'),
          ( u'токсическое действие веществ преимущественно немедицинского назначения', u'20.6', u'T51-T65'),
          ( u'из них: токсическое действие алкоголя', u'20.6.1', u'T51'),
          ( u'COVID-19', u'21', u'U07.1, U07.2'),
          ( u' Кроме того:\nфакторы, влияющие на состояние здоровья населения и обращения в учреждения здравоохранения', u'22.0', u'Z00-Z99'),
          ( u'из них:\nносительство возбудителя  инфекционных заболеваний', u'22.1', u'Z22'),
          ( u'наличие илеостомы, колостомы', u'22.2', u'Z93.2,Z93.3')
       ]

MainRows4000 = [( u'Новообразования', u'3.0', u'C00-D09')]


RowsUsers4000_3 = [( u'Всего операций', u'1'),
                 ( u'в том числе: операции на нервной системе, из них:', u'2'),
                 ( u'удаление травматической внутричерепной гематомы, очага ушиба, вдавленного перелома черепа, устранение дефекта черепа и лицевого скелета', u'2.1'),
                 ( u'операции при сосудистых пороках мозг', u'2.2'),
                 ( u'из них: на аневризмах', u'2.2.1'),
                 ( u'из них: эндоваскулярное выключение', u'2.2.1.1'),
                 ( u'на мальформациях', u'2.2.2'),
                 ( u'из них: эндоваскулярное выключение', u'2.2.2.1'),
                 ( u'операции при церебральном инсульте', u'2.3'),
                 ( u'из них: при геморрагическом инсульте', u'2.3.1'),
                 ( u'из них:открытое удаление гематомы', u'2.3.1.1'),
                 ( u'при инфаркте мозга', u'2.3.2'),
                 ( u'из них:гемикраниэктомия', u'2.3.2.1'),
                 ( u'Эндоваскулярная тромбоэкстрация', u'2.3.2.2'),
                 ( u'операции при окклюзионностенотических поражениях сосудов мозга', u'2.4'),
                 ( u'из них: на экстрацеребральных отделах сонных и позвоночных артери', u'2.4.1'),
                 ( u'из них: эндартерэктомия, редрессация, реимплантация', u'2.4.1.1'),
                 ( u'стентирование', u'2.4.2.1'),
                 ( u'удаление опухолей головного, спинного мозга', u'2.5'),
                 ( u'операции при функциональных расстройствах', u'2.6'),
                 ( u'из них: при лицевой боли', u'2.6.1'),
                 ( u'из них: устранение нейроваскулярного конфликта', u'2.6.1.1'),
                 ( u'при эпилепсии, паркинсонизме, мышечно-тонических расстройствах', u'2.6.2'),
                 ( u'из них: резекционные и деструктивные операции', u'2.6.2.1'),
                 ( u'установка стимуляторов', u'2.6.2.2'),
                 ( u'декомпрессивные, стабилизирующие операции при позвоночно-спинальной травме', u'2.7'),
                 ( u'декомпрессивные, стабилизирующие операции при дегенеративных заболеваниях позвоночника', u'2.8'),
                 ( u'операции на периферических нервах', u'2.9'),
                 ( u'ликворошунтирующие операции', u'2.10'),
                 ( u'операции при врожденной патологии черепа, головного и спинного мозга', u'2.11'),
                 ( u'Операции на эндокринной системе', u'3'),
                 ( u'из них: тиреотомии', u'3.1'),
                 ( u'Операции на органе зрения', u'4'),
                 ( u'из них: кератопластика', u'4.1'),
                 ( u'задняя витреоэктомия', u'4.2'),
                 ( u'транпупиллярная термотерапия', u'4.3'),
                 ( u'брахитерапия', u'4.4'),
                 ( u'операции по поводу: глаукомы', u'4.5'),
                 ( u'из них: с применением шунтов и дренажей', u'4.5.1'),
                 ( u'энуклеации', u'4.6'),
                 ( u'катаракты', u'4.7'),
                 ( u'из них: методом факоэмульсификации', u'4.7.1'),
                 ( u'Операции на органах уха, горла, носа', u'5'),
                 ( u'из них: на ухе', u'5.1'),
                 ( u'на миндалинах и аденоидах', u'5.2'),
                 ( u'Операции на органах дыхания', u'6'),
                 ( u'из них: на трахее', u'6.1'),
                 ( u'пневмонэктомия', u'6.2'),
                 ( u'эксплоративная торакотомия', u'6.3'),
                 ( u'Операции на сердце', u'7'),
                 ( u'из них: на открытом сердце', u'7.0.1'),
                 ( u'в т.ч. с искусственным кровообращением', u'7.0.2'),
                 ( u'коррекция врожденных пороков сердца', u'7.1'),
                 ( u'коррекция приобретенных поражений клапанов сердца', u'7.2'),
                 ( u'при нарушении ритма – всего', u'7.3'),
                 ( u'в том числе:имплантация кардиостимулятора', u'7.3.1'),
                 ( u'коррекция тахиаритмий', u'7.4'),
                 ( u'из них: катетерных амблаций', u'7.4.1'),
                 ( u'по поводу ишемических болезней сердца', u'7.5'),
                 ( u'из них: аортокоронарное шунтирование', u'7.5.1'),
                 ( u'ангиопластика коронарных артерий', u'7.5.2'),
                 ( u'из них: со стентированием', u'7.5.2.1'),
                 ( u'Операции на сосудах', u'8'),
                 ( u'из них: операции на артериях', u'8.1'),
                 ( u'в том числе на: питающих головной мозг', u'8.1.1'),
                 ( u'из них: каротидные эндартерэктомии', u'8.1.1.1'),
                 ( u'экстраинтракраниальные анастомозы', u'8.1.1.2'),
                 ( u'рентгенэндоваскулярные дилятации', u'8.1.1.3'),
                 ( u'из них: со стентированием ', u'8.1.1.3.1'),
                 ( u'на почечных артериях ', u'8.1.2'),
                 ( u'на аорте', u'8.1.3'),
                 ( u'операции на венах', u'8.2'),
                 ( u'Операции на органах брюшной полости', u'9'),
                 ( u'из них: на желудке по поводу язвенной болезни', u'9.1'),
                 ( u'аппендэктомии при хроническом аппендиците', u'9.2'),
                 ( u'грыжесечение при неущемленной грыже', u'9.3'),
                 ( u'холецистэктомия при хроническом холецистите', u'9.4'),
                 ( u'лапаротомия диагностическая', u'9.5'),
                 ( u'на кишечнике', u'9.6'),
                 ( u'из них: на прямой кишке', u'9.6.1'),
                 ( u'по поводу геморроя ', u'9.7'),
                 ( u'Операции на почках и мочеточниках', u'10'),
                 ( u'Операции на мужских половых органах', u'11'),
                 ( u'из них: операции на предстательной железе', u'11.1'),
                 ( u'Операции по поводу стерилизации мужчин', u'12'),
                 ( u'Операции на женских половых органах', u'13'),
                 ( u'из них: экстирпация и надвлагалищная ампутация матки', u'13.1'),
                 ( u'на придатках матки по поводу бесплодия', u'13.2'),
                 ( u'на яичниках по поводу новообразований ', u'13.3'),
                 ( u'по поводу стерилизации женщин', u'13.4'),
                 ( u'выскабливание матки (кроме аборта)', u'13.5'),
                 ( u'Акушерские операции', u'14'),
                 ( u'из них: по поводу внематочной беременности', u'14.1'),
                 ( u'наложение щипцов', u'14.2'),
                 ( u'вакуум-экстракция', u'14.3'),
                 ( u'кесарево сечение в сроке 22 недель беременности и более', u'14.4'),
                 ( u'кесарево сечение в сроке менее 22 недель беременности', u'14.5'),
                 ( u'аборт', u'14.6'),
                 ( u'плодоразрушающие', u'14.7'),
                 ( u'экстирпация и надвлагалищная ампутация матки в сроке 22 недель беременности и более, в родах и после родов', u'14.8'),
                 ( u'экстирпация и надвлагалищная ампутация матки при прерывании беременности в сроке менее 22 недель беременности или после прерывания', u'14.9'),
                 ( u'Операции на костно-мышечной системе', u'15'),
                 ( u'из них: коррегирующие остеотомии', u'15.1'),
                 ( u'на челюстно-лицевой области', u'15.2'),
                 ( u'при травмах костей таза', u'15.3'),
                 ( u'при около- и внутрисуставных переломах', u'15.4'),
                 ( u'на позвоночнике', u'15.5'),
                 ( u'при врожденном вывихе бедра', u'15.6'),
                 ( u'ампутации и экзартикуляции', u'15.7'),
                 ( u'эндопротезирование-всего', u'15.8'),
                 ( u'из них: тазобедренного сустава', u'15.8.1'),
                 ( u'коленного сустава', u'15.8.2'),
                 ( u'на грудной стенке', u'15.9'),
                 ( u'из них:\n торакомиопластика', u'15.9.1'),
                 ( u'торакостомия', u'15.9.2'),
                 ( u'Операции на молочной железе', u'16'),
                 ( u'Операции на коже и подкожной клетчатке', u'17'),
                 ( u'из них: на челюстно-лицевой области', u'17.1'),
                 ( u'операции на средостении', u'18'),
                 ( u'из них операции на вилочковой железе', u'18.1'),
                 ( u'операции на пищеводе', u'19'),
                 ( u'Прочие операции', u'20')
                 ]


RowsUsers4000 = [( u'Всего операций', u'1'),
                 ( u'в том числе: операции на нервной системе', u'2'),
                 ( u'из них: на головном мозге', u'2.1'),
                 ( u'на переферической нервной системе', u'2.2'),
                 ( u'Операции на эндокринной системе', u'3'),
                 ( u'из них: тиреотомии', u'3.1'),
                 ( u'Операции на органе зрения', u'4'),
                 ( u'из них: кератопластика', u'4.1'),
                 ( u'задняя витреоэктомия', u'4.2'),
                 ( u'операции по поводу: глаукомы', u'4.3'),
                 ( u'из них: с применением шунтов и дренажей', u'4.3.1'),
                 ( u'энуклеации', u'4.4'),
                 ( u'катаракты', u'4.5'),
                 ( u'из них: методом факоэмульсификации', u'4.5.1'),
                 ( u'Операции на органах уха, горла, носа', u'5'),
                 ( u'из них: на ухе', u'5.1'),
                 ( u'на миндалинах и аденоидах', u'5.2'),
                 ( u'Операции на органах дыхания', u'6'),
                 ( u'из них: на трахее', u'6.1'),
                 ( u'пневмонэктомия', u'6.2'),
                 ( u'эксплоративная торакотомия', u'6.3'),
                 ( u'Операции на сердце', u'7'),
                 ( u'из них: на открытом сердце', u'7.0.1'),
                 ( u'в т.ч. с искусственным кровообращением', u'7.0.2'),
                 ( u'коррекция врожденных пороков сердца', u'7.1'),
                 ( u'коррекция приобретенных поражений клапанов сердца', u'7.2'),
                 ( u'при нарушении ритма – всего', u'7.3'),
                 ( u'в том числе:имплантация кардиостимулятора', u'7.3.1'),
                 ( u'коррекция тахиаритмий', u'7.4'),
                 ( u'из них: катетерных амблаций', u'7.4.1'),
                 ( u'по поводу ишемических болезней сердца', u'7.5'),
                 ( u'из них: аортокоронарное шунтирование', u'7.5.1'),
                 ( u'ангиопластика коронарных артерий', u'7.5.2'),
                 ( u'из них: со стентированием', u'7.5.2.1'),
                 ( u'Операции на сосудах', u'8'),
                 ( u'из них: операции на артериях', u'8.1'),
                 ( u'в том числе на: питающих головной мозг', u'8.1.1'),
                 ( u'из них: каротидные эндартерэктомии', u'8.1.1.1'),
                 ( u'экстраинтракраниальные анастомозы', u'8.1.1.2'),
                 ( u'рентгенэндоваскулярные дилятации', u'8.1.1.3'),
                 ( u'из них: со стентированием ', u'8.1.1.3.1'),
                 ( u'на почечных артериях ', u'8.1.2'),
                 ( u'на аорте', u'8.1.3'),
                 ( u'операции на венах', u'8.2'),
                 ( u'Операции на органах брюшной полости', u'9'),
                 ( u'из них: на желудке по поводу язвенной болезни', u'9.1'),
                 ( u'аппендэктомии при хроническом аппендиците', u'9.2'),
                 ( u'грыжесечение при неущемленной грыже', u'9.3'),
                 ( u'холецистэктомия при хроническом холецистите', u'9.4'),
                 ( u'лапаротомия диагностическая', u'9.5'),
                 ( u'на кишечнике', u'9.6'),
                 ( u'из них: на прямой кишке', u'9.6.1'),
                 ( u'по поводу геморроя ', u'9.7'),
                 ( u'Операции на почках и мочеточниках', u'10'),
                 ( u'Операции на мужских половых органах', u'11'),
                 ( u'из них: операции на предстательной железе', u'11.1'),
                 ( u'Операции по поводу стерилизации мужчин', u'12'),
                 ( u'Операции на женских половых органах', u'13'),
                 ( u'из них: экстирпация и надвлагалищная ампутация матки', u'13.1'),
                 ( u'на придатках матки по поводу бесплодия', u'13.2'),
                 ( u'на яичниках по поводу новообразований ', u'13.3'),
                 ( u'по поводу стерилизации женщин', u'13.4'),
                 ( u'выскабливание матки (кроме аборта)', u'13.5'),
                 ( u'Акушерские операции', u'14'),
                 ( u'из них: по поводу внематочной беременности', u'14.1'),
                 ( u'наложение щипцов', u'14.2'),
                 ( u'вакуум-экстракция', u'14.3'),
                 ( u'кесарево сечение в сроке 22 недель беременности и более', u'14.4'),
                 ( u'кесарево сечение в сроке менее 22 недель беременности', u'14.5'),
                 ( u'аборт', u'14.6'),
                 ( u'плодоразрушающие', u'14.7'),
                 ( u'экстирпация и надвлагалищная ампутация матки в сроке 22 недель беременности и более, в родах и после родов', u'14.8'),
                 ( u'экстирпация и надвлагалищная ампутация матки при прерывании беременности в сроке менее 22 недель беременности или после прерывания', u'14.9'),
                 ( u'Операции на костно-мышечной системе', u'15'),
                 ( u'из них: коррегирующие остеотомии', u'15.1'),
                 ( u'на челюстно-лицевой области', u'15.2'),
                 ( u'при травмах костей таза', u'15.3'),
                 ( u'при около- и внутрисуставных переломах', u'15.4'),
                 ( u'на позвоночнике', u'15.5'),
                 ( u'при врожденном вывихе бедра', u'15.6'),
                 ( u'ампутации и экзартикуляции', u'15.7'),
                 ( u'эндопротезирование-всего', u'15.8'),
                 ( u'из них: тазобедренного сустава', u'15.8.1'),
                 ( u'коленного сустава', u'15.8.2'),
                 ( u'на грудной стенке', u'15.9'),
                 ( u'из них:\n торакомиопластика', u'15.9.1'),
                 ( u'торакостомия', u'15.9.2'),
                 ( u'Операции на молочной железе', u'16'),
                 ( u'Операции на коже и подкожной клетчатке', u'17'),
                 ( u'из них: на челюстно-лицевой области', u'17.1'),
                 ( u'операции на средостении', u'18'),
                 ( u'из них операции на вилочковой железе', u'18.1'),
                 ( u'операции на пищеводе', u'19'),
                 ( u'Прочие операции', u'20')
                 ]


RowsChildren = [
                ( u' в том числе с заболеваниями:\nострые респираторные инфекции верхних дыхательных путей, грипп', u'2', u'J00-J06, J09-J11'),
                ( u'пневмонии', u'3', u'J12-J18'),
                ( u'инфекции кожи и подкожной клетчатки', u'4', u'L00-L08'),
                ( u'отдельные состояния, возникающие в перинатальном периоде', u'5', u'P05-P96'),
                ( u'из них:\nзамедленный рост и недостаточность питания', u'5.1', u'P05'),
                ( u'родовая травма-всего', u'5.2', u'P10-P15'),
                ( u'из них:\nразрыв внутричерепных тканей и кровоизлияние вследствие родовой травмы', u'5.2.1', u'P10'),
                ( u'дыхательные нарушения, характерные для перинатального периода-всего', u'5.3', u'P20-P28'),
                ( u'из них:\nвнутриутробная гипоксия, асфиксия при родах', u'5.3.1', u'P20, P21'),

                ( u'из них:\nдыхательное расстройство у новорожденных', u'5.3.2', u'P22'),
                ( u'врожденная пневмония', u'5.3.3', u'P23'),
                ( u'неонатальные аспирационные синдромы', u'5.3.4', u'P24'),
                ( u'инфекционные болезни, специфичные для перинатального периода - всего', u'5.4', u'P35-P39'),
                ( u'из них:\nбактериальный сепсис новорожденного', u'5.4.1', u'P36'),
                ( u'гемолитическая болезнь плода и новорожденного, водянка плода, обусловленная гемолитической болезнью; ядерная желтуха', u'5.5', u'P55-P57'),
                ( u'неонатальная желтуха, обусловленная чрезмерным гемолизом, другими и неуточненными причинами', u'5.6', u'P58-P59'),
                ( u'геморрагическая болезнь, диссеминированное внутрисосудистое свертывание у плода и новорожденного, другие перинатальные гематологические нарушения', u'5.7', u'P53, P60, P61'),
                ( u'врожденные аномалии(пороки развития), деформации и хромосомные нарушения', u'6', u'Q00-Q99'),
                (u'COVID-19', u'7', u'U07.1, U07.2'),
               ]

#всего: Q00-Q99
#системы кровообращения: Q20-Q28
#мочеполовая системы: Q60-Q64, Q50-Q56
#нервной: Q00-Q07
#органов зрения: Q10-Q18
#органов дыхания: Q30-Q34
#расщелина губы и неба: Q35-Q37
#ретинопатия недоношенных: H35.0, H35.1, H35.2, H36.0
RowsChildren4002 = [
                ( u'Операций при врожденных пороках развития(ВПР) – всего', u'1', u''),
                ( u'из них: ВПР системы кровообращения', u'1.1', u'Q20-Q28'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.1.1', u''),
                ( u'ВПР мочеполовой системы', u'1.2', u'Q50-Q64'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.2.1', u''),
                ( u'ВПР нервной системы', u'1.3', u'Q00-Q07'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.3.1', u''),
                ( u'ВПР органов зрения', u'1.4', u'Q10-Q15'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.4.1', u''),
                ( u'ВПР органов дыхания', u'1.5', u'Q30-Q34'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.5.1', u''),
                ( u'расщелина губы и неба', u'1.6', u'Q35-Q37'),
                ( u'из них у родившихся в сроки 22-37 недель беременности', u'1.6.1', u''),
                ( u'ретинопатия недоношенных(родившихся в сроки 22-37 недель беременности)', u'1.7', u'H35.1')
                ]

Rows4100 = [
            ( u'Оперировано больных – всего (чел.)', u'1'),
            ( u'из них по ВМТ (чел.)', u'2'),
            ( u'из них дети до 17 лет включительно (из гр.1) (чел.)', u'3'),
            ( u'из них по ВМТ (чел.)', u'4'),
            ( u'Из общего числа операций (стр.1, гр.3) проведено операций с использованием: лазерной  аппаратуры', u'5'),
            ( u'криогенной аппаратуры', u'6'),
            ( u'эндоскопической аппаратуры', u'7'),
            ( u'из них  стерилизации женщин', u'8'),
            ( u'Число общих анестезий оперированным', u'9'),
            ( u'Умерло в результате общей анестезии', u'10')
            ]

Rows4200 = [
            ( u'на органе зрения (из стр.4.0 табл. 4000): из них: микрохирургические', u'1'),
            ( u'реконструктивные на переднем отделе глаза', u'2'),
            ( u'реконструктивные на заднем отделе глаза', u'3'),
            ( u'по поводу отслойки сетчатки', u'4'),
            ( u'с использованием лазерной аппаратуры', u'5'),
            ( u'на ухе (стр.5.1 табл. 4000) - слухоулучшающие', u'6'),
            ( u'на желудке по поводу язвенной болезни (стр.9.1 табл. 4000) - органосохраняющие', u'7')
            ]

Rows4201 = [
            ( u'Трансплантации всего, в том числе:', u'1'),
            ( u'легкого', u'2'),
            ( u'сердца', u'3'),
            ( u'печени', u'4'),
            ( u'поджелудочной железы', u'5'),
            ( u'тонкой кишки', u'6'),
            ( u'почки', u'7'),
            ( u'костного мозга', u'8'),
            ( u'прочих органов', u'9'),
            ( u'трансплантации 2-х и более органов', u'10')
            ]

Rows4202 = [
            ( u'эндопротезирование - всего', u'1'),
            ( u'в том числе детям', u'2'),
            ( u'из них(гр.1) суставов нижних конечностей', u'3'),
            ( u'суставов верхних конечностей', u'4')
            ]

Rows4400 = [
            ( u'Из общего числа оперированных направлено на восстановительное лечение (долечивание)', u'1'),
            ( u'из них после операций по поводу язвенной болезни желудка и 12-перстной кишки', u'2'),
            ( u'удаления желчного пузыря', u'3'),
            ( u'операций на сердце и магистральных сосудах', u'4'),
            ( u'операций по поводу панкреатита (панкреонекроза)', u'5'),
            ( u'после операций ортопедических, травматологических при дефектах и пороках развития позвоночника, пластики суставов, эндопротезирования и реэндопротезирования, реплантаций конечностей', u'6')
            ]


class CStationaryF14SetupDialog(QtGui.QDialog, Ui_StationaryF14SetupDialog):
    def __init__(self, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.setupUi(self)
        self.cmbOrgStructure.setOrgId(QtGui.qApp.currentOrgId())
        self.cmbOrgStructure.setValue(QtGui.qApp.currentOrgStructureId())
        self.cmbFinance.setTable('rbFinance', addNone=True)
        self.cmbSocStatusClass.setTable('rbSocStatusClass', True)
        self.cmbSocStatusType.setTable('rbSocStatusType', True)
        self.lblSelectActionType.setVisible(True)
        self.cmbSelectActionType.setVisible(True)
        self.setSelectIsTypeOS(False)
        self.setMedicalAidTypeVisible(False)
        self.setTypeSurgeryVisible(True)
        self.setExistFlatCodeVisible(False)


    def setTitle(self, title):
        self.setWindowTitle(title)


    def setExistFlatCodeVisible(self, visible = False):
        self.isExistFlatCodeVisible = visible
        self.chkExistFlatCode.setVisible(visible)


    def setSelectActionTypeVisible(self, visible = False):
        self.lblSelectActionType.setVisible(visible)
        self.cmbSelectActionType.setVisible(visible)


    def setSelectIsTypeOS(self, visible = False):
        self.typeOSVisible = visible
        self.lblIsTypeOS.setVisible(visible)
        self.cmbIsTypeOS.setVisible(visible)


    def setItemsTypeSurgery(self, typeList):
        if self.typeSurgeryVisible:
            self.cmbTypeSurgery.insertItems(2, typeList)


    def setMedicalAidTypeVisible(self, visible = False):
        self.chkMedicalAidTypeVisible = visible
        self.chkMedicalAidType.setVisible(visible)


    def setTypeSurgeryVisible(self, visible = False):
        self.typeSurgeryVisible = visible
        self.lblTypeSurgery.setVisible(visible)
        self.cmbTypeSurgery.setVisible(visible)


    def setFinanceVisible(self, visible = False):
        self.lblFinance.setVisible(visible)
        self.cmbFinance.setVisible(visible)


    def setSpecialDeliverClientVisible(self, visible = False):
        self.lblSpecialDeliverClient.setVisible(visible)
        self.cmbSpecialDeliverClient.setVisible(visible)


    def setParams(self, params):
        self.edtBegDate.setDate(params.get('begDate', QDate.currentDate()))
        self.edtBegTime.setTime(params.get('begTime', QTime(9, 0, 0, 0)))
        self.edtEndDate.setDate(params.get('endDate', QDate.currentDate()))
        self.edtTimeEdit.setTime(params.get('endTime', QTime(9, 0, 0, 0)))
        self.cmbOrgStructure.setValue(params.get('orgStructureId', None))
        self.cmbSpecialDeliverClient.setCurrentIndex(params.get('eventOrder', 0))
        self.cmbFinance.setValue(params.get('financeId', None))
        if self.typeSurgeryVisible:
            self.cmbTypeSurgery.setCurrentIndex(params.get('typeSurgery', 0))
        self.cmbSelectActionType.setCurrentIndex(params.get('selectActionType', 0))
        self.cmbSocStatusClass.setValue(params.get('socStatusClassId', None))
        self.cmbSocStatusType.setValue(params.get('socStatusTypeId', None))
        if self.typeOSVisible:
            self.cmbIsTypeOS.setCurrentIndex(params.get('isTypeOS', 0))
        if self.chkMedicalAidTypeVisible:
            self.chkMedicalAidType.setChecked(params.get('isMedicalAidType', True))
        if self.isExistFlatCodeVisible:
            self.chkExistFlatCode.setChecked(params.get('existFlatCode', False))


    def params(self):
        def getPureHMTime(time):
            return QTime(time.hour(), time.minute())
        result = {}
        result['begDate'] = self.edtBegDate.date()
        result['begTime'] = getPureHMTime(self.edtBegTime.time())
        result['endDate'] = self.edtEndDate.date()
        result['endTime'] = getPureHMTime(self.edtTimeEdit.time())
        result['orgStructureId'] = self.cmbOrgStructure.value()
        result['eventOrder'] = self.cmbSpecialDeliverClient.currentIndex()
        result['financeId'] = self.cmbFinance.value()
        if self.typeSurgeryVisible:
            result['typeSurgery'] = self.cmbTypeSurgery.currentIndex()
        result['selectActionType'] = self.cmbSelectActionType.currentIndex()
        result['socStatusClassId'] = self.cmbSocStatusClass.value()
        result['socStatusTypeId'] = self.cmbSocStatusType.value()
        if self.typeOSVisible:
            result['isTypeOS'] = self.cmbIsTypeOS.currentIndex()
        if self.chkMedicalAidTypeVisible:
            result['isMedicalAidType'] = self.chkMedicalAidType.isChecked()
        if self.isExistFlatCodeVisible:
            result['existFlatCode'] = self.chkExistFlatCode.isChecked()
        return result


class CStationaryF014(CReport):
    def __init__(self, parent):
        CReport.__init__(self, parent)
        self.setTitle(u'Форма 014.')
        self.stationaryF14SetupDialog = None
        self.clientDeath = 8
        self.params = {}
        self.orientation = CPageFormat.Landscape


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        return result


    def dumpParams(self, cursor, params):
        description = []
        self.params = params
        
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
                description.append(u'Текущий день: ' + forceString(QDateTime(endDate, endTime)))
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
                if begDateTime.date() or endDateTime.date():
                    description.append(dateRangeAsStr(u'за период', begDateTime, endDateTime))
                    
        eventOrder = params.get('eventOrder', 0)

        orgStructureId = params.get('orgStructureId', None)
        if orgStructureId:
            description.append(u'подразделение: ' + getOrgStructureFullName(orgStructureId))
        else:
            description.append(u'подразделение: ЛПУ')
        if eventOrder == 2:
            description.append(u'учет экстренных пациентов '+ u'по атрибуту События "экстренно"')
        elif eventOrder == 1:
            description.append(u'учет экстренных пациентов '+ u'по свойству "Доставлен по экстренным показаниям"')
        financeId = params.get('financeId', None)
        description.append(u'тип финансирования: %s'%(forceString(QtGui.qApp.db.translate('rbFinance', 'id', financeId, 'name')) if financeId else u'не задано'))
        socStatusClassId = params.get('socStatusClassId', None)
        if socStatusClassId:
            description.append(u'класс соц.статуса: %s'%(forceString(QtGui.qApp.db.translate('rbSocStatusClass', 'id', socStatusClassId, 'name'))))
        socStatusTypeId  = params.get('socStatusTypeId', None)
        if socStatusTypeId:
            description.append(u'тип соц.статуса: %s'%(forceString(QtGui.qApp.db.translate('rbSocStatusType', 'id', socStatusTypeId, 'name'))))
        if self.stationaryF14SetupDialog.cmbTypeSurgery.isVisible():
            description.append(u'учет операций: %s'%([u'номенклатурный', u'пользовательский'][params.get('typeSurgery', 0)]))
        selectActionType = params.get('selectActionType', 0)
        description.append(u'отбор по %s'%([u'операциям', u'поступлению', u'движению', u'выписке', u'выписке+внешним Событиям'][selectActionType]))
        isTypeOs = params.get('isTypeOS', 0)
        if isTypeOs:
            description.append(u'стационар: %s'%([u'не задано', u'круглосуточный', u'дневной'][isTypeOs]))
        isMedicalAidType = params.get('isMedicalAidType', 0)
        if isMedicalAidType:
            description.append(u'учитывать только %s события'%([u'', u'стационарные'][isMedicalAidType]))
        existFlatCode = params.get('existFlatCode', 0)
        if existFlatCode:
            description.append(u'учитывать только заполненный "код для отчетов"')
        description.append(u'отчёт составлен: '+forceString(QDateTime.currentDateTime()))
        columns = [ ('100%', [], CReportBase.AlignLeft) ]
        table = createTable(cursor, columns, headerRowCount=len(description), border=0, cellPadding=2, cellSpacing=0)
        for i, row in enumerate(description):
            table.setText(i, 0, row)
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()


    def getOrgStructureIdList(self, treeIndex):
        treeItem = treeIndex.internalPointer() if treeIndex.isValid() else None
        return treeItem.getItemIdList() if treeItem else []


    def getOrgStructureId(self, treeIndex):
        treeItem = treeIndex.internalPointer() if treeIndex.isValid() else None
        return treeItem._id if treeItem else None


    def getOrgStructureName(self, treeIndex):
        treeItem = treeIndex.internalPointer() if treeIndex.isValid() else None
        return treeItem._name if treeItem else None


    def dataReceivedMKB(self, eventId):
        db = QtGui.qApp.db
        tableActionType = db.table('ActionType')
        tableAction = db.table('Action')
        tableEvent = db.table('Event')
        queryTable = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        queryTable = queryTable.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        eventList = set(db.getTheseAndParents(tableEvent, 'prevEvent_id', [eventId]))
        cond = [tableActionType['flatCode'].like('received%'),
                tableAction['deleted'].eq(0),
                tableEvent['deleted'].eq(0),
                tableEvent['id'].inlist(eventList),
                tableActionType['deleted'].eq(0),
                tableAction['actionType_id'].eq(tableActionType['id'])
               ]
        return db.getRecordEx(queryTable, [tableAction['begDate']], cond)


    def getOutcomeOfHospitalization(self, eventOrder, orgStructureId, begDateTime, endDateTime, financeId, age = None, children = False, isHospital = None, adult = False):
        db = QtGui.qApp.db
#        tableAPHB = db.table('ActionProperty_HospitalBed')
        tableActionType = db.table('ActionType')
        tableAction = db.table('Action')
        tableEvent = db.table('Event')
        tableClient = db.table('Client')
        tableContract = db.table('Contract')
        tableDiagnosis = db.table('Diagnosis')
        tableDiagnostic = db.table('Diagnostic')
        tableRBDiagnosisType = db.table('rbDiagnosisType')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        queryTable = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        queryTable = queryTable.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        queryTable = queryTable.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        queryTable = queryTable.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        queryTable = queryTable.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        queryTable = queryTable.innerJoin(tableDiagnostic, tableEvent['id'].eq(tableDiagnostic['event_id']))
        queryTable = queryTable.innerJoin(tableDiagnosis, tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']))
        queryTable = queryTable.innerJoin(tableRBDiagnosisType, tableDiagnostic['diagnosisType_id'].eq(tableRBDiagnosisType['id']))
        receivedIdList = getActionTypeIdListByFlatCode(u'received%')
        leavedIdList = getActionTypeIdListByFlatCode(u'leaved%')
        cond = [ tableActionType['id'].inlist(leavedIdList),
                 tableAction['deleted'].eq(0),
                 tableEvent['deleted'].eq(0),
                 tableActionType['deleted'].eq(0),
                 tableClient['deleted'].eq(0),
                 tableDiagnosis['deleted'].eq(0),
                 tableDiagnostic['deleted'].eq(0),
                 tableAction['endDate'].isNotNull(),
                 tableEventType['deleted'].eq(0)
               ]
        if orgStructureId:
            orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
            orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex)
            if orgStructureIdList:
                cond.append('''%s'''%(getOrgStructureProperty(u'Отделение', orgStructureIdList)))
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            queryTable = queryTable.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].ge(begDateTime)])
        joinOr2 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].le(endDateTime)])
        cond.append(db.joinAnd([joinOr1, joinOr2]))
        receivedIdList = getActionTypeIdListByFlatCode(u'received%')
        begDateReceivedEvent = u'''SELECT AR.begDate FROM Action AS AR
        WHERE AR.event_id = getFirstEventId(Action.event_id) AND AR.deleted = 0 AND AR.actionType_id IN (%s)
        ORDER BY AR.begDate ASC LIMIT 1'''%(u','.join(str(receivedId) for receivedId in receivedIdList if receivedId))
        if adult:
            cond.append(u'(Client.sex = 2 AND age(Client.birthDate, Action.begDate) >= 56) OR (Client.sex = 1 AND age(Client.birthDate, Action.begDate) >= 61)')
        elif age: # Возраст отсчитываем от begDate выписки
            if children:
                if children:
                    cond.append(u'''IF(age(Client.birthDate, Action.begDate)=18,
                         IF(age(Client.birthDate, (%s)) < 18,
                        1,
                        0),
                    age(Client.birthDate, Action.begDate) <= %s)''' % (begDateReceivedEvent, forceString(age)))
                else:
                    cond.append(u'''IF(age(Client.birthDate, Action.begDate)=18,
                         IF(age(Client.birthDate, (%s)) >= 18,
                        1,
                        0),
                    age(Client.birthDate, Action.begDate) >= %s)''' % (begDateReceivedEvent, forceString(age)))
        if financeId:
            cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
            queryTable = queryTable.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
        cond.append(getStringProperty(u'Исход госпитализации', u'(APS.value LIKE \'%%переведен%%\')'))
        cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2' AND Diagnostic.person_id = Event.execPerson_id AND (NOT EXISTS (SELECT DC.id FROM Diagnostic AS DC INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '1' AND DC.event_id = Event.id LIMIT 1)))''')
        cols = [tableEvent['id'].alias('eventId'),
                tableClient['birthGestationalAge']]
        cols.append(u'''(SELECT APS_S.value
                    FROM Action AS A_S
                    INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                    INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                    INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                    INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                    WHERE A_S.id = Action.id AND A_S.deleted = 0
                    AND AP_S.deleted=0
                    AND APT_S.deleted=0
                    AND AP_S.action_id = A_S.id
                    AND A_S.event_id = Event.id
                    AND APT_S.name = 'Причина отказа от пребывания'
                    AND APS_S.value) AS renunciationLeaved''')
        cols.append(u'''(SELECT APS.value
                        FROM Action AS A
                        INNER JOIN ActionType AS AT ON AT.id = A.actionType_id
                        INNER JOIN ActionPropertyType AS APT ON APT.actionType_id = AT.id
                        INNER JOIN ActionProperty AS AP ON AP.type_id = APT.id
                        INNER JOIN ActionProperty_String AS APS ON APS.id = AP.id
                        WHERE %s A.event_id = Event.id AND A.deleted=0
                        AND AP.deleted=0
                        AND APT.deleted=0
                        AND AP.action_id = A.id
                        AND APT.name = '%s') AS renunciationReceived'''%((u'''A.actionType_id IN (%s) AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'',
                        u'Причина отказа от госпитализации'))
        cols.append(u'''(SELECT APS.value
                        FROM Action AS A
                        INNER JOIN ActionType AS AT ON AT.id = A.actionType_id
                        INNER JOIN ActionPropertyType AS APT ON APT.actionType_id = AT.id
                        INNER JOIN ActionProperty AS AP ON AP.type_id = APT.id
                        INNER JOIN ActionProperty_String AS APS ON APS.id = AP.id
                        WHERE %s A.event_id = Event.id AND A.deleted=0
                        AND AP.deleted=0
                        AND APT.deleted=0
                        AND AP.action_id = A.id
                        AND APT.name = '%s') AS renunMeasuresReceived'''%((u'''A.actionType_id IN (%s) AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'',
                        u'Принятые меры при отказе в госпитализации'))
        if eventOrder == 2:
            cond.append(tableEvent['order'].eq(2))
        elif eventOrder == 1:
            cond.append((u''' EXISTS(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = Event.id
                        AND APT_S.name = 'Доставлен по'
                        AND APS_S.value LIKE \'%%экстренным показаниям%%\')''' %((u'''A_S.actionType_id IN (%s) AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'')))
        cols.append(u'''age(Client.birthDate, Action.begDate) AS clientAge''')
        cols.append(u'''age(Client.birthDate, (%s)) AS clientAgeReceived'''%(begDateReceivedEvent))
        cols.append(u'''(%s) AS outHospital'''%(getStringPropertyValue(u'Исход госпитализации%%')))
        cols.append(u'''EXISTS(SELECT rbDocumentType.id
        FROM rbDocumentType INNER JOIN ClientDocument ON rbDocumentType.id = ClientDocument.documentType_id
        WHERE rbDocumentType.code = 3 AND ClientDocument.client_id = Client.id AND ClientDocument.deleted = 0) AS svidORojd''')
        stmt = db.selectDistinctStmt(queryTable, cols, cond)
        return db.query(stmt)


    def dataLeavedMKB(self, eventOrder, mapMainRows, reportMainData, orgStructureId, begDateTime, endDateTime, financeId, age = None, children = False, isHospital = None, adult = False):
        db = QtGui.qApp.db
#        tableAPHB = db.table('ActionProperty_HospitalBed')
        tableActionType = db.table('ActionType')
        tableAction = db.table('Action')
        tableEvent = db.table('Event')
        tableClient = db.table('Client')
        tableContract = db.table('Contract')
        tableDiagnosis = db.table('Diagnosis')
        tableDiagnostic = db.table('Diagnostic')
        tableRBTraumaType = db.table('rbTraumaType')
        tableRBDiagnosisType = db.table('rbDiagnosisType')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        queryTable = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        queryTable = queryTable.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        queryTable = queryTable.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        queryTable = queryTable.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        queryTable = queryTable.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        queryTable = queryTable.innerJoin(tableDiagnostic, tableEvent['id'].eq(tableDiagnostic['event_id']))
        queryTable = queryTable.innerJoin(tableDiagnosis, tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']))
        queryTable = queryTable.innerJoin(tableRBDiagnosisType, tableDiagnostic['diagnosisType_id'].eq(tableRBDiagnosisType['id']))
        queryTable = queryTable.leftJoin(tableRBTraumaType, tableDiagnosis['traumaType_id'].eq(tableRBTraumaType['id']))
        leavedIdList = getActionTypeIdListByFlatCode(u'leaved%')
        cond = [ tableActionType['id'].inlist(leavedIdList),
                 tableAction['deleted'].eq(0),
                 tableEvent['deleted'].eq(0),
                 tableActionType['deleted'].eq(0),
                 tableClient['deleted'].eq(0),
                 tableDiagnosis['deleted'].eq(0),
                 tableDiagnostic['deleted'].eq(0),
                 tableAction['endDate'].isNotNull(),
                 tableEventType['deleted'].eq(0)
               ]
        if orgStructureId:
            orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
            orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex)
            if orgStructureIdList:
                cond.append('''%s'''%(getOrgStructureProperty(u'Отделение', orgStructureIdList)))
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            queryTable = queryTable.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].ge(begDateTime)])
        joinOr2 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].le(endDateTime)])
        cond.append(db.joinAnd([joinOr1, joinOr2]))
        receivedIdList = getActionTypeIdListByFlatCode(u'received%')
        begDateReceivedEvent = u'''SELECT MIN(AR.begDate) FROM Action AS AR
        WHERE AR.event_id = getFirstEventId(Action.event_id) AND AR.deleted = 0 AND AR.actionType_id IN (%s)
        '''%(u','.join(str(receivedId) for receivedId in receivedIdList if receivedId))
        if adult and age is None:
            cond.append(u'(Client.sex = 2 AND age(Client.birthDate, Action.begDate) >= 56) OR (Client.sex = 1 AND age(Client.birthDate, Action.begDate) >= 61)')
        elif age: # Возраст отсчитываем от begDate выписки
            if children:
                cond.append(u'''IF(age(Client.birthDate, Action.begDate)=18,
                     IF(age(Client.birthDate, (%s)) < 18,
                    1,
                    0),
                age(Client.birthDate, Action.begDate) <= %s)''' % (begDateReceivedEvent, forceString(age)))
            else:
                cond.append(u'''IF(age(Client.birthDate, Action.begDate)=18,
                     IF(age(Client.birthDate, (%s)) >= 18,
                    1,
                    0),
                age(Client.birthDate, Action.begDate) >= %s)''' % (begDateReceivedEvent, forceString(age)))
                if adult:
                    cond.append(u'(Client.sex = 2 AND age(Client.birthDate, Action.begDate) < 56) OR (Client.sex = 1 AND age(Client.birthDate, Action.begDate) < 61)')
        if financeId:
            cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
            queryTable = queryTable.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
        cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2' AND Diagnostic.person_id = Event.execPerson_id AND (NOT EXISTS (SELECT DC.id FROM Diagnostic AS DC INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '1' AND DC.event_id = Event.id LIMIT 1)))''')
        cond.append('NOT ' + getStringProperty(u'Исход госпитализации', u'(APS.value LIKE \'%%переведен в другой стационар%%\')'))
        cols = [tableEvent['id'].alias('eventId'),
                tableAction['id'].alias('actionId'),
                tableAction['endDate'],
                tableClient['id'].alias('clientId'),
                tableClient['birthDate'],
                tableDiagnosis['MKB'],
                tableClient['birthGestationalAge']
                ]
        cols.append(u'''IF(Event.relegateOrg_id IS NOT NULL, (SELECT Organisation.id
        FROM Organisation WHERE Organisation.deleted = 0 AND Organisation.id = Event.relegateOrg_id
        AND Organisation.isMedical = 1), NULL) AS relegateOrgIsPoliklinik''')
        receivedIdList = getActionTypeIdListByFlatCode(u'received%')
        movingIdList = getActionTypeIdListByFlatCode(u'moving%')
        cols.append(u'''(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = getFirstEventId(Event.id)
                        AND TRIM(APS_S.value) != ''
                        AND APT_S.name = 'Кем доставлен'
                        ORDER BY APS_S.id DESC
                        LIMIT 1) AS whatIsDeliver'''%((u'''A_S.actionType_id IN (%s)
                         AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u''))
        cols.append(u'''(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = getFirstEventId(Event.id)
                        AND TRIM(APS_S.value) != ''
                        AND APT_S.name = 'Доставлен'
                        ORDER BY APS_S.id DESC
                        LIMIT 1) AS deliverCall'''%((u'''A_S.actionType_id IN (%s)
                        AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u''))
        cols.append(u'''(SELECT APS.value
                        FROM Action AS A
                        INNER JOIN ActionType AS AT ON AT.id = A.actionType_id
                        INNER JOIN ActionPropertyType AS APT ON APT.actionType_id = AT.id
                        INNER JOIN ActionProperty AS AP ON AP.type_id = APT.id
                        INNER JOIN ActionProperty_String AS APS ON APS.id = AP.id
                        WHERE %s A.event_id = getFirstEventId(Event.id) AND A.deleted=0
                        AND AP.deleted=0
                        AND APT.deleted=0
                        AND AP.action_id = A.id
                        AND TRIM(APS.value) != ''
                        AND APT.name = '%s'
                        ORDER BY APS.id DESC
                        LIMIT 1) AS renunciationReceived'''%((u'''A.actionType_id IN (%s)
                        AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'',
                        u'Причина отказа от госпитализации'))
        cols.append(u'''(SELECT APS.value
                        FROM Action AS A
                        INNER JOIN ActionType AS AT ON AT.id = A.actionType_id
                        INNER JOIN ActionPropertyType AS APT ON APT.actionType_id = AT.id
                        INNER JOIN ActionProperty AS AP ON AP.type_id = APT.id
                        INNER JOIN ActionProperty_String AS APS ON APS.id = AP.id
                        WHERE %s A.event_id = getFirstEventId(Event.id) AND A.deleted=0
                        AND AP.deleted=0
                        AND APT.deleted=0
                        AND AP.action_id = A.id
                        AND TRIM(APS.value) != ''
                        AND APT.name = '%s'
                        ORDER BY APS.id DESC
                        LIMIT 1) AS renunMeasuresReceived'''%((u'''A.actionType_id IN (%s)
                        AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'',
                        u'Принятые меры при отказе в госпитализации'))
        cols.append(u'''Event.order AS orderEvent''')
        if eventOrder == 2:
            cols.append(u'''IF(Event.order = 2, 1, 0) AS urgentReading''')
            cond.append(tableEvent['order'].eq(2))
        elif eventOrder == 1:
            cond.append((u''' EXISTS(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = getFirstEventId(Event.id)
                        AND APT_S.name = 'Доставлен по'
                        AND TRIM(APS_S.value) != ''
                        AND APS_S.value LIKE \'%%экстренным показаниям%%\')''' %((u'''A_S.actionType_id IN (%s) AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u'')))
            cols.append(u''' EXISTS(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = getFirstEventId(Event.id)
                        AND APT_S.name = 'Доставлен по'
                        AND TRIM(APS_S.value) != ''
                        AND APS_S.value LIKE \'%%экстренным показаниям%%\') AS urgentReadingAction''' %((u'''A_S.actionType_id IN (%s)
                        AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u''))
        else:
            cols.append(u'''IF(Event.order = 2, 1, 0) AS urgentReading''')
            cols.append(u''' EXISTS(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE %sA_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = getFirstEventId(Event.id)
                        AND APT_S.name = 'Доставлен по'
                        AND TRIM(APS_S.value) != ''
                        AND APS_S.value LIKE \'%%экстренным показаниям%%\') AS urgentReadingAction''' %((u'''A_S.actionType_id IN (%s)
                        AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u''))
        cols.append(u'''age(Client.birthDate, Action.begDate) AS clientAge''')
        cols.append(u'''age(Client.birthDate, (%s)) AS clientAgeReceived'''%(begDateReceivedEvent))
        cols.append(u'''(SELECT APS_S.value
                    FROM Action AS A_S
                    INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                    INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                    INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                    INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                    WHERE A_S.id = Action.id AND A_S.deleted = 0
                    AND AP_S.deleted=0
                    AND APT_S.deleted=0
                    AND AP_S.action_id = A_S.id
                    AND A_S.event_id = getFirstEventId(Event.id)
                    AND APT_S.name = 'Причина отказа от пребывания'
                    AND TRIM(APS_S.value) != ''
                    AND APS_S.value
                    ORDER BY APS_S.id DESC
                    LIMIT 1) AS renunciationLeaved''')
        cols.append(u''' (SELECT A_S.begDate
                    FROM Action AS A_S
                    WHERE %sA_S.deleted=0
                    AND A_S.event_id = Event.id
                    ORDER BY A_S.begDate ASC
                    LIMIT 1) AS begDateReceived''' %((u'''A_S.actionType_id IN (%s) AND ''' % (','.join(str(receivedId) for receivedId in receivedIdList))) if receivedIdList else u''))
        cols.append(u'''(%s) AS outDeath'''%(getStringProperty(u'Исход госпитализации%%', u'(APS.value LIKE \'умер%%\' OR APS.value LIKE \'смерть%%\')')))
        stmt = db.selectStmt(queryTable, cols, cond)
        query = db.query(stmt)
        days = 0
        cols = [tableAction['begDate'],
                tableEvent['id'].alias('eventId'),
                tableEvent['isPrimary'],
                tableEvent['setDate'],
                tableEvent['execDate'],
                tableAction['id'].alias('actionId'),
                tableAction['endDate'],
                tableClient['id'].alias('clientId'),
                tableDiagnosis['MKB']
                ]
        cols.append(u'''IF(rbTraumaType.code = 03 OR rbTraumaType.code = 08, 1, 0) AS traumaType''')
        renunciationList = [0]*4
        deathList = [0]*10
        deathMKB = [u'I60', u'I61', u'I62', u'I63', u'I64']
        eventIdList = []
        eventAndMovingIdList = []
        mapTraumaTypeRows = createMapCodeToRowIdx( [u'S00-T98'] )
        mapCerebroRows = createMapCodeToRowIdx( [u'I60, I61, I62, I63, I64, I65- I66, I67, I67.2'] )
        mapEmbRows = createMapCodeToRowIdx( [u'O00-O99'] )
        mapEmbNot = createMapCodeToRowIdx( [u'A00-T99'] )
        reportSubLine = [0]*30
        reportSubLine[8] = u'-'
        reportSubLine[9] = u'-'
        reportSubLine[12] = u'-'
        reportSubLine[15] = u'-'
        reportSubLine[29] = u'-'
        clientDeathList = []
        while query.next():
            record = query.record()
            eventId = forceRef(record.value('eventId'))
            if eventId and eventId not in eventIdList:
                eventIdList.append(eventId)
                clientId = forceRef(record.value('clientId'))
                clientDeathDate = None
                relegateOrgIsPoliklinik = forceRef(record.value('relegateOrgIsPoliklinik'))
                whatIsDeliver = forceString(record.value('whatIsDeliver'))
                emergencyCall = 1 if u'СМП'.lower() in whatIsDeliver.lower() else 0
                poliklinikCall = 1 if ((u'Поликлиника'.lower() in whatIsDeliver.lower()) or relegateOrgIsPoliklinik) else 0
                independentlyCall = 1 if u'Самостоятельно'.lower() in whatIsDeliver.lower() else 0
                orderEvent = forceInt(record.value('orderEvent'))
                urgentReading = forceInt(record.value('urgentReading'))
                urgentReadingAction = forceInt(record.value('urgentReadingAction'))
                clientAge = forceInt(record.value('clientAge'))
                if clientAge == 18:
                    clientAge = forceInt(record.value('clientAgeReceived'))
                birthDate = forceDate(record.value('birthDate'))
                begDateReceived = forceDate(record.value('begDateReceived'))
                deliverCall = forceString(record.value('deliverCall'))
                reportSubLine[18] += poliklinikCall
                if clientAge < 18:
                    reportSubLine[19] += poliklinikCall
                if orderEvent == 4:
                    reportSubLine[20] += 1
                    if clientAge < 18:
                        reportSubLine[21] += 1
                renunciationLeaved = forceString(record.value('renunciationLeaved'))
                renunciationReceived = forceString(record.value('renunciationReceived'))
                renunMeasuresReceived = forceString(record.value('renunMeasuresReceived'))
                if renunciationLeaved:
                    if u'отказ пациента' in renunciationLeaved.lower() and (u'даны рекомендации' in renunMeasuresReceived.lower() or renunMeasuresReceived==''):
                        renunciationList[0] += 1
                    elif (u'нет показаний' in renunciationLeaved.lower() or u'несоответствие диагноза направления' in renunciationLeaved.lower()) and (u'даны рекомендации' in renunMeasuresReceived.lower() or renunMeasuresReceived==''):
                        renunciationList[1] += 1
                    elif u'амбулаторно' in renunciationLeaved.lower():
                        renunciationList[2] += 1
                    elif u'стационар' in renunciationLeaved.lower():
                        renunciationList[3] += 1
                elif renunciationReceived:
                    if u'отказ пациента' in renunciationReceived.lower() and (u'даны рекомендации' in renunMeasuresReceived.lower() or renunMeasuresReceived==''):
                        renunciationList[0] += 1
                    elif (u'нет показаний' in renunciationReceived.lower() or u'несоответствие диагноза направления' in renunciationReceived.lower()) and (u'даны рекомендации' in renunMeasuresReceived.lower() or renunMeasuresReceived==''):
                        renunciationList[1] += 1
                    elif u'амбулаторн' in renunciationReceived.lower():
                        renunciationList[2] += 1
                    elif u'стационар' in renunciationReceived.lower():
                        renunciationList[3] += 1
                if renunMeasuresReceived:
                    if u'амбулаторная помощь' in renunMeasuresReceived.lower() and u'амбулаторно' not in renunciationLeaved.lower() and u'амбулаторн' not in renunciationReceived.lower():
                        renunciationList[2] += 1
                    elif u'в другой стационар' in renunMeasuresReceived.lower() and u'стационар' not in renunciationLeaved.lower() and u'стационар' not in renunciationReceived.lower():
                        renunciationList[3] += 1
                outDeath = forceInt(record.value('outDeath'))
                birthGestationalAge = forceInt(record.value('birthGestationalAge'))
                if outDeath and clientId and clientId not in clientDeathList:
                    clientDeathList.append(clientId)
                    clientDeathDate = getDeathDate(clientId)
                    ageTuple = calcAgeTuple(birthDate, begDateReceived)
                    dayLev = 0
                    monthLev = 0
                    if ageTuple:
                        dayLev = ageTuple[0]
                        monthLev = ageTuple[2]
                    if clientDeathDate:
                        if clientAge < 1:
                            deathList[9] += 1
                        if begDateReceived == clientDeathDate:
                            if clientAge < 18:
                                deathList[0] += 1
                            elif clientAge >= 18 and clientAge <= 65:
                                deathList[1] += 1
                            if dayLev <= 1:
                                deathList[4] += 1
                            if dayLev <= 7:
                                deathList[3] += 1
                            if monthLev <= 12 and dayLev > 1:
                               deathList[5] += 1
                        else:
                            dayDeath = begDateReceived.daysTo(clientDeathDate)
                            if dayDeath >= 0 and dayDeath < 2:
                                if clientAge < 18:
                                    deathList[0] += 1
                                elif clientAge >= 18 and clientAge <= 65:
                                    deathList[1] += 1
                                if dayLev <= 1:
                                    deathList[4] += 1
                                if dayLev <= 7:
                                    deathList[3] += 1
                                if monthLev <= 12 and dayLev > 1:
                                   deathList[5] += 1
                        deathList[7] += 1
                        if 0 < birthGestationalAge < 36:
                            deathList[8] += 1
                cond = [tableAction['deleted'].eq(0),
                        tableAction['actionType_id'].inlist(movingIdList),
                        tableEvent['deleted'].eq(0),
                        tableEvent['id'].eq(eventId),
                        tableDiagnosis['deleted'].eq(0),
                        tableDiagnostic['deleted'].eq(0),
                        tableAction['endDate'].isNotNull()
                       ]
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    queryTable = queryTable.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2' AND Diagnostic.person_id = Event.execPerson_id AND (NOT EXISTS (SELECT DC.id FROM Diagnostic AS DC INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '1' AND DC.event_id = Event.id LIMIT 1)))''')
                order = u'Action.begDate DESC'
                firstRecord = db.getRecordEx(queryTable, cols, cond, order)
                if firstRecord:
                    eventAndMovingId = forceRef(firstRecord.value('eventId'))
                    if eventAndMovingId not in eventAndMovingIdList:
                        eventAndMovingIdList.append(eventAndMovingId)
                        isHospitalRecord = None
                        MKBRec = normalizeMKB(forceString(firstRecord.value('MKB')))
                        if isHospital is not None:
                            isHospitalRecord = forceInt(record.value('isMedical'))
                        if MKBRec and isHospital == isHospitalRecord:
                            traumaType = forceInt(firstRecord.value('traumaType'))
                            if traumaType:
                                isPrimary = forceInt(firstRecord.value('isPrimary'))
                                setDate = forceDate(firstRecord.value('setDate'))
                                execDate = forceDate(firstRecord.value('execDate'))
                                for rowTraumaType in mapTraumaTypeRows.get(MKBRec, []):
                                    reportSubLine[0] += 1
                                    if isPrimary and setDate.daysTo(execDate) <= 30:
                                        reportSubLine[1] += 1
                                    if isPrimary and setDate.daysTo(execDate) <= 7:
                                        reportSubLine[2] += 1
                            if outDeath==0 and renunciationReceived=='':
                                for rowEmbT in mapEmbNot.get(MKBRec, []):
                                    reportSubLine[22] += independentlyCall
                            if MKBRec in [u'I21', u'I22']:
                                if u'в первые 6часов' in deliverCall.lower() or u'в первые 12 часов' in deliverCall.lower() or u'в течении 7-24 часов' in deliverCall.lower():
                                    reportSubLine[7] += 1
                                    if  u'в первые 12 часов' in deliverCall.lower():
                                        reportSubLine[28] += 1
                                reportSubLine[8] = u'-'
                                reportSubLine[9] = u'-'
                                if outDeath and begDateReceived == clientDeathDate:
                                    reportSubLine[10] += 1
                                    if clientAge <= 65:
                                        reportSubLine[11] += 1
                                reportSubLine[12] = u'-'
                                reportSubLine[29] = u'-'
                            for rowCerebroType in mapCerebroRows.get(MKBRec, []):
                                reportSubLine[15] = u'-'
                                if u'в первые 6часов' in deliverCall.lower() or u'в течении 7-24 часов' in deliverCall.lower():
                                    reportSubLine[13] += 1
                                if u'в первые 6часов' in deliverCall.lower():
                                    reportSubLine[14] += 1
                            if outDeath:
                                if MKBRec in deathMKB:
                                   deathList[2] += 1
                                for pnewMKB in [u'J12', u'J18']:
                                    if pnewMKB in MKBRec:
                                        deathList[6] += 1
                                if MKBRec in [u'I21', u'I22']:
                                    reportSubLine[5] += 1
                                for rowEmbType in mapEmbRows.get(MKBRec, []):
                                    reportSubLine[16] += 1
                                    if not mapEmbRows.get(u'O30', []):
                                        reportSubLine[17] += 1
                            endDateRec = forceDate(record.value('endDate'))
                            divergenceDiagnosis = 0
                            countAutopsy = 0
                            divergenceDiagnosisFM = 0
                            countAutopsyFM = 0
                            countDeathChildren = 0
                            days = 0
                            recordReceived = self.dataReceivedMKB(eventId)
                            if recordReceived:
                                begDateRec = forceDate(recordReceived.value('begDate'))
                                if begDateRec and endDateRec:
                                    days += (begDateRec.daysTo(endDateRec)) if begDateRec != endDateRec else 1
                            constDeathMKB = MKBRec
                            if clientId and outDeath:
                                stmtDeath = u'''SELECT Event.id, IF(rbResult.code > 0, 1, 0) AS divergenceDiagnosis,
                                IF(Event.isPrimary = 1, 1, 0) AS autopsy,
                                IF(Event.isAutopsyType = 1, 1, 0) AS forensicMedicineAutopsy,
                                IF(age(Client.birthDate, Event.setDate) < 1, 1, 0) AS children,
                                (SELECT Diagnosis.MKB
                                FROM Diagnostic
                                INNER JOIN Diagnosis ON Diagnostic.`diagnosis_id`=Diagnosis.`id`
                                INNER JOIN rbDiagnosisType ON Diagnostic.`diagnosisType_id`=rbDiagnosisType.`id`
                                WHERE Event.id=Diagnostic.event_id AND (rbDiagnosisType.code = '4'
                                OR (rbDiagnosisType.code = '8' AND Diagnostic.person_id = Event.execPerson_id
                                AND (NOT EXISTS(SELECT DC.id FROM Diagnostic AS DC
                                                INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '4'
                                                AND DC.event_id = Event.id LIMIT 1)))) LIMIT 1) AS constDeathMKB
                                FROM Event
                                INNER JOIN EventType ON EventType.id = Event.eventType_id
                                INNER JOIN rbEventTypePurpose ON rbEventTypePurpose.id = EventType.purpose_id
                                INNER JOIN rbResult ON rbResult.id = Event.result_id
                                INNER JOIN Client ON Client.id = Event.client_id
                                WHERE Event.client_id = %d
                                AND Event.deleted = 0 AND EventType.deleted = 0 AND Client.deleted = 0
                                AND rbEventTypePurpose.code = 5 AND (EventType.code = 15 OR EventType.code = 23)'''%(clientId)
                                queryDeath = db.query(stmtDeath)
                                while queryDeath.next():
                                    recordDeath = queryDeath.record()
                                    constDeathMKB = normalizeMKB(forceString(recordDeath.value('constDeathMKB')))
                                    if forceBool(recordDeath.value('autopsy')):
                                        if forceBool(recordDeath.value('forensicMedicineAutopsy')):
                                            divergenceDiagnosisFM += forceInt(recordDeath.value('divergenceDiagnosis'))
                                            countAutopsyFM += forceInt(recordDeath.value('autopsy'))
                                        else:
                                            divergenceDiagnosis += forceInt(recordDeath.value('divergenceDiagnosis'))
                                            countAutopsy += forceInt(recordDeath.value('autopsy'))
                                    countDeathChildren += forceInt(recordDeath.value('children'))
                            for row in mapMainRows.get(MKBRec, []):
                                reportLine = reportMainData[row]
                                if children:
                                    if not outDeath:
                                        reportLine[0] += 1
                                        reportLine[1] += (urgentReading | urgentReadingAction)
                                        reportLine[2] += emergencyCall
                                        reportLine[4] += days
                                        if clientAge < 1:
                                            reportLine[3] += 1
                                            reportLine[5] += days
                                else:
                                    if not outDeath:
                                        reportLine[0] += 1
                                        reportLine[1] += (urgentReading | urgentReadingAction)
                                        reportLine[2] += emergencyCall  #Поступление: Кем доставлен - СМП
                                        reportLine[3] += days
                            for rowDeath in mapMainRows.get(constDeathMKB, []):
                                reportLineDeath = reportMainData[rowDeath]
                                if children:
                                    reportLineDeath = reportMainData[rowDeath]
                                    reportLineDeath[6] += outDeath if clientDeathDate else 0
                                    reportLineDeath[7] += countAutopsy
                                    reportLineDeath[8] += divergenceDiagnosis
                                    reportLineDeath[9] = countAutopsyFM
                                    reportLineDeath[10] = divergenceDiagnosisFM
                                    if outDeath and clientAge<1 and clientDeathDate:
                                        reportLineDeath[11] += outDeath
#                                    reportLineDeath[10] += divergenceDiagnosis #??????????
#                                    if clientAge < 1:
#                                        reportLineDeath[11] += countDeathChildren
                                else:
                                    reportLineDeath[4] += outDeath
                                    reportLineDeath[5] += countAutopsy
                                    reportLineDeath[6] += divergenceDiagnosis
                                    reportLineDeath[7] = countAutopsyFM
                                    reportLineDeath[8] = divergenceDiagnosisFM
        outHospitalRecords = self.getOutcomeOfHospitalization(eventOrder, orgStructureId, begDateTime, endDateTime, financeId, age, children, isHospital, adult)
        while outHospitalRecords.next():
            recordOH = outHospitalRecords.record()
            outHospital = forceString(recordOH.value('outHospital'))
            clientAge = forceInt(recordOH.value('clientAge'))
            birthGestationalAge = forceInt(recordOH.value('birthGestationalAge'))
            if clientAge == 18:
                clientAge = forceInt(recordOH.value('clientAgeReceived'))
            if outHospital:
                if u'переведен' in outHospital.lower():
                    svidORojd = forceBool(recordOH.value('svidORojd'))
                    reportSubLine[3] += 1
                    if clientAge < 1 and not svidORojd:
                        reportSubLine[4] += 1
                        if 0 < birthGestationalAge < 36:
                            reportSubLine[27] += 1
                    if u'санаторий' in outHospital.lower():
                        reportSubLine[6] += 1
                    elif u'восстановит' in outHospital.lower():
                        reportSubLine[5] += 1
                    renunciationLeaved = forceString(recordOH.value('renunciationLeaved'))
                    renunciationReceived = forceString(recordOH.value('renunciationReceived'))
                    renunMeasuresReceived = forceString(recordOH.value('renunMeasuresReceived'))
                    if renunciationLeaved:
                        if u'отказ пациента' in renunciationLeaved.lower():
                            renunciationList[0] += 1
                        elif u'нет показаний' in renunciationLeaved.lower():
                            renunciationList[1] += 1
                        elif u'амбулаторно' in renunciationLeaved.lower():
                            renunciationList[2] += 1
                    elif renunciationReceived:
                        if u'отказ пациента' in renunciationReceived.lower():
                            renunciationList[0] += 1
                        elif u'нет показаний' in renunciationReceived.lower():
                            renunciationList[1] += 1
                        elif u'амбулаторн' in renunciationReceived.lower():
                            renunciationList[2] += 1
                    if renunMeasuresReceived:
                        if u'амбулаторная помощь' in renunMeasuresReceived.lower() and u'амбулаторно' not in renunciationLeaved.lower() and u'амбулаторн' not in renunciationReceived.lower():
                            renunciationList[2] += 1
                    if (renunciationLeaved and renunciationLeaved != u'') or (renunciationReceived and renunciationReceived != u'') or (renunMeasuresReceived and renunMeasuresReceived != u''):
                        renunciationList[3] += 1
        return reportMainData, renunciationList, deathList, reportSubLine


class CStationaryAdultF142000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.cmbTypeSurgery.setVisible(False)
        self.stationaryF14SetupDialog.lblTypeSurgery.setVisible(False)
        return result


    def build(self, params):
        orgStructureId = params.get('orgStructureId', None)
        eventOrder = params.get('eventOrder', 0)
        financeId = params.get('financeId', None)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRows] )
            rowSize = 9
            reportMainData = [ [0]*rowSize for row in xrange(len(MainRows)) ]

            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'1.Состав больных в стационаре, сроки и исходы лечения\n(2000)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()

            cols = [('15%',[u'Наименование болезни', u'', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('5%', [u'Код по МКБ X пересмотра', u'', u'', u'', u'3'], CReportBase.AlignLeft),
                    ('8.3%', [u'А.Взрослые (18 лет и старше)', u'Выписано больных', u'всего', u'', u'4'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них доставленных по экстренным показаниям', u'', u'5'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них больных, доставленных СМП', u'', u'6'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Проведено выписанными койко-дней', u'', u'', u'7'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Умерло', u'Всего', u'', u'8'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'Из них', u'Проведено пат.анатомических вскрытий', u'9'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'Установлено расхождений диагнозов', u'10'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'проведено судебномедицинских вскрытий', u'11'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'из них установлено расхождений диагнозов', u'12'], CReportBase.AlignLeft),
                   ]

            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 4, 1) # 1
            table.mergeCells(0, 1, 4, 1) # 2
            table.mergeCells(0, 2, 4, 1) # 3
            table.mergeCells(0, 3, 1, 9) # 4
            table.mergeCells(1, 3, 1, 3)
            table.mergeCells(1, 6, 3, 1)
            table.mergeCells(2, 3, 2, 1)
            table.mergeCells(2, 4, 2, 1)
            table.mergeCells(2, 5, 2, 1)
            table.mergeCells(1, 7, 1, 5)
            table.mergeCells(2, 7, 2, 1)
            table.mergeCells(2, 8, 1, 4)
            reportMainData, renunciationList, deathList, reportSubLine = self.dataLeavedMKB(eventOrder, mapMainRows, reportMainData, orgStructureId, begDateTime, endDateTime, financeId, 18, False)
            for row, rowDescr in enumerate(MainRows):
                reportLine = reportMainData[row]
                i = table.addRow()
                table.setText(i, 0, rowDescr[0])
                table.setText(i, 1, rowDescr[1])
                table.setText(i, 2, rowDescr[2])
                for col in xrange(rowSize):
                    table.setText(i, 3+col, reportLine[col])

        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()
        cursor.insertText(u'''(2001) Из общего числа пациентов с травмами (стр. 20.0), пациенты, пострадавшие в ДТП %s, из них умерло: всего %s, в том числе в первые 0-30 суток %s, из них в первые 0-7 суток %s'''
        %(reportSubLine[0], deathList[7], reportSubLine[1], reportSubLine[2]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2100) Кроме того пациенты, переведенные в другие  организации (подразделения), оказывающие медицинскую помощь в стационарных условиях %s, в том числе новорожденные %s, из них недоношенные %s, направлено: в организации медицинской реабилитации %s, в санатории %s.'''
        %(reportSubLine[3], reportSubLine[4], reportSubLine[27], reportSubLine[5], reportSubLine[6]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2200) Из общего числа умерших (стр. 1) умерло новорожденных в первые 168 часов жизни %s. Умерло в первые 24 часа после поступления в стационар: в возрасте 0 - 24 часа после рождения %s, из них недоношенных %s, до 1 года (без умерших в первые 24 часа после рождения) %s, в том числе от пневмонии %s.'''
        %(str(deathList[3]), str(deathList[4]), deathList[8], str(deathList[5]), str(deathList[6])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2300) Поступило пациентов с инфарктом миокарда в первые сутки от начала заболевания %s, в том числе в первые 12 часов %s, из них проведена тромболитическая терапия %s, стентирование %s, из общего числа умерших умерло пациентов с инфарктом миокарда (стр. 10.4.2+10.4.3) в первые 24 часа после поступления в стационар %s, в том числе в возрасте до 65 лет %s, из числа умерших в первые в 24 часа поступления в стационар пациентов с инфарктом миокарда проведена тромболитическая терапия %s, стентирование %s.'''
        %(reportSubLine[7], reportSubLine[28], reportSubLine[8], reportSubLine[9], reportSubLine[10], reportSubLine[11], reportSubLine[12], reportSubLine[29]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2301) Поступило пациентов с острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.5) в первые сутки от начала заболевания %s, из них в первые 6 часов %s , из них проведена тромболитическая терапия в первые 6 часов %s.'''
        %(reportSubLine[13], reportSubLine[14], reportSubLine[15]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2400) Умерло беременных, рожениц и родильниц (при сроке беременности 28 недели и более) %s. Из них умерло от заболеваний, осложняющих беременность и роды %s.'''
        %(reportSubLine[16], reportSubLine[17]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2500) Из общего числа умерших умерло в первые 24 часа после поступления в стационар: детей в возрасте 0-17 лет включительно %s, больных в возрасте от 18 до 65 лет %s, из них больных острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.4) %s.'''
        %(str(deathList[0]), str(deathList[1]), str(deathList[2])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2600) Из общего числа выписанных (стр. 1, гр. 4) было направлено в стационар поликлиникой %s, в т.ч. детей %s, полицией %s, в т.ч.детей %s, обратились самостоятельно %s.'''
        %(reportSubLine[18], reportSubLine[19], reportSubLine[20], reportSubLine[21], reportSubLine[22]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2700) Из общего числа отказов в госпитализации: отказались сами %s, не было показаний к госпитализации %s, медицинская помощь была оказана амбулаторно %s , были направлены в другие стационары %s.'''
        %(str(renunciationList[0]), str(renunciationList[1]), str(renunciationList[2]), str(renunciationList[3])))
        cursor.insertBlock()
        cursor.movePosition(QtGui.QTextCursor.End)
        return doc


class CStationaryAdultNoSeniorF142000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.cmbTypeSurgery.setVisible(False)
        self.stationaryF14SetupDialog.lblTypeSurgery.setVisible(False)
        return result


    def build(self, params):
        eventOrder = params.get('eventOrder', 0)
        orgStructureId = params.get('orgStructureId', None)
        financeId = params.get('financeId', None)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRows] )
            rowSize = 9
            reportMainData = [ [0]*rowSize for row in xrange(len(MainRows)) ]

            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'1.Состав больных в стационаре, сроки и исходы лечения\n(2000)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()

            cols = [('15%',[u'Наименование болезни', u'', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('5%', [u'Код по МКБ X пересмотра', u'', u'', u'', u'3'], CReportBase.AlignLeft),
                    ('8.3%', [u'А.Взрослые (18 лет и старше)', u'Выписано больных', u'всего', u'', u'4'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них доставленных по экстренным показаниям', u'', u'5'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них больных, доставленных СМП', u'', u'6'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Проведено выписанными койко-дней', u'', u'', u'7'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Умерло', u'Всего', u'', u'8'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'Из них', u'Проведено пат.анатомических вскрытий', u'9'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'Установлено расхождений диагнозов', u'10'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'проведено судебномедицинских вскрытий', u'11'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'из них установлено расхождений диагнозов', u'12'], CReportBase.AlignLeft),
                   ]

            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 4, 1) # 1
            table.mergeCells(0, 1, 4, 1) # 2
            table.mergeCells(0, 2, 4, 1) # 3
            table.mergeCells(0, 3, 1, 9) # 4
            table.mergeCells(1, 3, 1, 3)
            table.mergeCells(1, 6, 3, 1)
            table.mergeCells(2, 3, 2, 1)
            table.mergeCells(2, 4, 2, 1)
            table.mergeCells(2, 5, 2, 1)
            table.mergeCells(1, 7, 1, 5)
            table.mergeCells(2, 7, 2, 1)
            table.mergeCells(2, 8, 1, 4)
            reportMainData, renunciationList, deathList, reportSubLine = self.dataLeavedMKB(eventOrder, mapMainRows, reportMainData, orgStructureId, begDateTime, endDateTime, financeId, 18, False, None, True)
            for row, rowDescr in enumerate(MainRows):
                reportLine = reportMainData[row]
                i = table.addRow()
                table.setText(i, 0, rowDescr[0])
                table.setText(i, 1, rowDescr[1])
                table.setText(i, 2, rowDescr[2])
                for col in xrange(rowSize):
                    table.setText(i, 3+col, reportLine[col])

        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()
        cursor.insertText(u'''(2001) Из общего числа пациентов с травмами (стр. 20.0), пациенты, пострадавшие в ДТП %s, из них умерло: всего %s, в том числе в первые 0-30 суток %s, из них в первые 0-7 суток %s'''
        %(reportSubLine[0], deathList[7], reportSubLine[1], reportSubLine[2]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2100) Кроме того пациенты, переведенные в другие  организации (подразделения), оказывающие медицинскую помощь в стационарных условиях %s, в том числе новорожденные %s, из них недоношенные %s, направлено: в организации медицинской реабилитации %s, в санатории %s'''
        %(reportSubLine[3], reportSubLine[4], reportSubLine[27], reportSubLine[5], reportSubLine[6]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2200) Из общего числа умерших (стр. 1) умерло новорожденных в первые 168 часов жизни %s. Умерло в первые 24 часа после поступления в стационар: в возрасте 0 - 24 часа после рождения %s, из них недоношенных %s, до 1 года (без умерших в первые 24 часа после рождения) %s, в том числе от пневмонии %s.'''
        %(str(deathList[3]), str(deathList[4]), deathList[8], str(deathList[5]), str(deathList[6])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2300) Поступило пациентов с инфарктом миокарда в первые сутки от начала заболевания %s, в том числе в первые 12 часов %s, из них проведена тромболитическая терапия %s, стентирование %s, из общего числа умерших умерло пациентов с инфарктом миокарда (стр. 10.4.2+10.4.3) в первые 24 часа после поступления в стационар %s, в том числе в возрасте до 65 лет %s, из числа умерших в первые в 24 часа поступления в стационар пациентов с инфарктом миокарда проведена тромболитическая терапия %s, стентирование %s.'''
        %(reportSubLine[7], reportSubLine[28], reportSubLine[8], reportSubLine[9], reportSubLine[10], reportSubLine[11], reportSubLine[12], reportSubLine[29]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2301) Поступило пациентов с острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.5) в первые сутки от начала заболевания %s, из них в первые 6 часов %s , из них проведена тромболитическая терапия в первые 6 часов %s'''
        %(reportSubLine[13], reportSubLine[14], reportSubLine[15]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2400) Умерло беременных, рожениц и родильниц (при сроке беременности 28 недели и более) %s. Из них умерло от заболеваний, осложняющих беременность и роды %s.'''
        %(reportSubLine[16], reportSubLine[17]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2500) Из общего числа умерших умерло в первые 24 часа после поступления в стационар: детей в возрасте 0-17 лет включительно %s, больных в возрасте от 18 до 65 лет %s, из них больных острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.4) %s.'''
        %(str(deathList[0]), str(deathList[1]), str(deathList[2])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2600) Из общего числа выписанных (стр. 1, гр. 4) было направлено в стационар поликлиникой %s, в т.ч. детей %s, полицией %s, в т.ч.детей %s, обратились самостоятельно %s.'''
        %(reportSubLine[18], reportSubLine[19], reportSubLine[20], reportSubLine[21], reportSubLine[22]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2700) Из общего числа отказов в госпитализации: отказались сами %s, не было показаний к госпитализации %s, медицинская помощь была оказана амбулаторно %s , были направлены в другие стационары %s.'''
        %(str(renunciationList[0]), str(renunciationList[1]), str(renunciationList[2]), str(renunciationList[3])))
        cursor.insertBlock()
        cursor.movePosition(QtGui.QTextCursor.End)
        return doc


class CStationarySeniorF142000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.cmbTypeSurgery.setVisible(False)
        self.stationaryF14SetupDialog.lblTypeSurgery.setVisible(False)
        return result


    def build(self, params):
        eventOrder = params.get('eventOrder', 0)
        orgStructureId = params.get('orgStructureId', None)
        financeId = params.get('financeId', None)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRows] )
            rowSize = 9
            reportMainData = [ [0]*rowSize for row in xrange(len(MainRows)) ]

            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'1.Состав больных в стационаре, сроки и исходы лечения\n(2000)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()

            cols = [('15%',[u'Наименование болезни', u'', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('5%', [u'Код по МКБ X пересмотра', u'', u'', u'', u'3'], CReportBase.AlignLeft),
                    ('8.3%', [u'Б.Взрослые старше трудоспособного возраста (с 56 лет у женщин и с 61 лет у мужчин)', u'Выписано больных', u'всего', u'', u'13'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них доставленных по экстренным показаниям', u'', u'14'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'из них больных, доставленных СМП', u'', u'15'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Проведено выписанными койко-дней', u'', u'', u'16'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'Умерло', u'Всего', u'', u'17'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'Из них', u'Проведено пат.анатомических вскрытий', u'18'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'Установлено расхождений диагнозов', u'19'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'проведено судебномедицинских вскрытий', u'20'], CReportBase.AlignLeft),
                    ('8.3%', [u'', u'', u'', u'из них установлено расхождений диагнозов', u'21'], CReportBase.AlignLeft),
                   ]

            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 4, 1) # 1
            table.mergeCells(0, 1, 4, 1) # 2
            table.mergeCells(0, 2, 4, 1) # 3
            table.mergeCells(0, 3, 1, 9) # 4
            table.mergeCells(1, 3, 1, 3)
            table.mergeCells(1, 6, 3, 1)
            table.mergeCells(2, 3, 2, 1)
            table.mergeCells(2, 4, 2, 1)
            table.mergeCells(2, 5, 2, 1)
            table.mergeCells(1, 7, 1, 5)
            table.mergeCells(2, 7, 2, 1)
            table.mergeCells(2, 8, 1, 4)
            reportMainData, renunciationList, deathList, reportSubLine = self.dataLeavedMKB(eventOrder, mapMainRows, reportMainData, orgStructureId, begDateTime, endDateTime, financeId, None, False, None, True)
            for row, rowDescr in enumerate(MainRows):
                reportLine = reportMainData[row]
                i = table.addRow()
                table.setText(i, 0, rowDescr[0])
                table.setText(i, 1, rowDescr[1])
                table.setText(i, 2, rowDescr[2])
                for col in xrange(rowSize):
                    table.setText(i, 3+col, reportLine[col])
        cursor.movePosition(QtGui.QTextCursor.End)

        cursor.insertBlock()
        cursor.insertText(u'''(2001) Из общего числа пациентов с травмами (стр. 20.0), пациенты, пострадавшие в ДТП %s, из них умерло: всего %s, в том числе в первые 0-30 суток %s, из них в первые 0-7 суток %s'''
        %(reportSubLine[0], deathList[7], reportSubLine[1], reportSubLine[2]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2100) Кроме того пациенты, переведенные в другие  организации (подразделения), оказывающие медицинскую помощь в стационарных условиях %s, в том числе новорожденные %s, из них недоношенные %s, направлено: в организации медицинской реабилитации %s, в санатории %s'''
        %(reportSubLine[3], reportSubLine[4], reportSubLine[27], reportSubLine[5], reportSubLine[6]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2200) Из общего числа умерших (стр. 1) умерло новорожденных в первые 168 часов жизни %s. Умерло в первые 24 часа после поступления в стационар: в возрасте 0 - 24 часа после рождения %s, из них недоношенных %s, до 1 года (без умерших в первые 24 часа после рождения) %s, в том числе от пневмонии %s.'''
        %(str(deathList[3]), str(deathList[4]), deathList[8], str(deathList[5]), str(deathList[6])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2300) Поступило пациентов с инфарктом миокарда в первые сутки от начала заболевания %s, в том числе в первые 12 часов %s, из них проведена тромболитическая терапия %s, стентирование %s, из общего числа умерших умерло пациентов с инфарктом миокарда (стр. 10.4.2+10.4.3) в первые 24 часа после поступления в стационар %s, в том числе в возрасте до 65 лет %s, из числа умерших в первые в 24 часа поступления в стационар пациентов с инфарктом миокарда проведена тромболитическая терапия %s, стентирование %s.'''
        %(reportSubLine[7], reportSubLine[28], reportSubLine[8], reportSubLine[9], reportSubLine[10], reportSubLine[11], reportSubLine[12], reportSubLine[29]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2301) Поступило пациентов с острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.5) в первые сутки от начала заболевания %s, из них в первые 6 часов %s , из них проведена тромболитическая терапия в первые 6 часов %s'''
        %(reportSubLine[13], reportSubLine[14], reportSubLine[15]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2400) Умерло беременных, рожениц и родильниц (при сроке беременности 28 недели и более) %s. Из них умерло от заболеваний, осложняющих беременность и роды %s.'''
        %(reportSubLine[16], reportSubLine[17]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2500) Из общего числа умерших умерло в первые 24 часа после поступления в стационар: детей в возрасте 0-17 лет включительно %s, больных в возрасте от 18 до 65 лет %s, из них больных острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.4) %s.'''
        %(str(deathList[0]), str(deathList[1]), str(deathList[2])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2600) Из общего числа выписанных (стр. 1, гр. 4) было направлено в стационар поликлиникой %s, в т.ч. детей %s, полицией %s, в т.ч.детей %s, обратились самостоятельно %s.'''
        %(reportSubLine[18], reportSubLine[19], reportSubLine[20], reportSubLine[21], reportSubLine[22]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2700) Из общего числа отказов в госпитализации: отказались сами %s, не было показаний к госпитализации %s, медицинская помощь была оказана амбулаторно %s , были направлены в другие стационары %s.'''
        %(str(renunciationList[0]), str(renunciationList[1]), str(renunciationList[2]), str(renunciationList[3])))
        cursor.insertBlock()
        cursor.movePosition(QtGui.QTextCursor.End)
        return doc


class CStationaryChildrenF142000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.cmbTypeSurgery.setVisible(False)
        self.stationaryF14SetupDialog.lblTypeSurgery.setVisible(False)
        return result


    def build(self, params):
        eventOrder = params.get('eventOrder', 0)
        orgStructureId = params.get('orgStructureId', None)
        financeId = params.get('financeId', None)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRowsChildren] )
            rowSize = 12
            reportMainData = [ [0]*rowSize for row in xrange(len(MainRowsChildren)) ]

            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'1.Состав больных в стационаре, сроки и исходы лечения\n(2000)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()

            cols = [('18%',[u'Наименование болезни', u'', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('5%', [u'Код по МКБ X пересмотра', u'', u'', u'', u'3'], CReportBase.AlignLeft),
                    ('6%', [u'В.Дети 0-17 лет включительно', u'Выписано больных', u'всего', u'', u'22'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'из них доставленных по экстренным показаниям', u'', u'23'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'из них больных, доставленных СМП', u'', u'24'], CReportBase.AlignLeft),
                    ('6%', [u'', u'из них в возрасте до 1 года', u'', u'', u'25'], CReportBase.AlignLeft),
                    ('6%', [u'', u'Проведено выписанными койко-дней', u'', u'', u'26'], CReportBase.AlignLeft),
                    ('6%', [u'', u'из них (из гр.8): в воз-расте до 1 года', u'', u'', u'27'], CReportBase.AlignLeft),
                    ('6%', [u'', u'Умерло', u'Всего', u'', u'28'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'Из них', u'Проведено пат.анатомических вскрытий', u'29'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'', u'Установлено расхождений диагнозов', u'30'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'', u'проведено судебномедицинских вскрытий', u'31'], CReportBase.AlignLeft),
                    ('6%', [u'', u'', u'', u'из них установлено расхождений диагнозов', u'32'], CReportBase.AlignLeft),
                    ('6%', [u'', u'из них в возрасте до 1 года', u'', u'', u'33'], CReportBase.AlignLeft)
                   ]

            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 4, 1)
            table.mergeCells(0, 1, 4, 1)
            table.mergeCells(0, 2, 4, 1)
            table.mergeCells(0, 3, 1, 11)
            table.mergeCells(1, 3, 1, 3)
            table.mergeCells(1, 6, 3, 1)
            table.mergeCells(1, 7, 3, 1)
            table.mergeCells(2, 3, 2, 1)
            table.mergeCells(2, 4, 2, 1)
            table.mergeCells(2, 5, 2, 1)
            table.mergeCells(1, 8, 3, 1)
            table.mergeCells(1, 9, 1, 5)
            table.mergeCells(2, 9, 2, 1)
            table.mergeCells(2, 10, 1, 4)
            table.mergeCells(1, 14, 3, 1)

            reportMainData, renunciationList1, deathList1, reportSubLine1 = self.dataLeavedMKB(eventOrder, mapMainRows, reportMainData, orgStructureId, begDateTime, endDateTime, financeId, 17, True)
            for row, rowDescr in enumerate(MainRowsChildren):
                reportLine = reportMainData[row]
                i = table.addRow()
                table.setText(i, 0, rowDescr[0])
                table.setText(i, 1, rowDescr[1])
                table.setText(i, 2, rowDescr[2])
                for col in xrange(rowSize):
                        table.setText(i, 3+col, reportLine[col])
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()
        cursor.insertText(u'''(2001) Из общего числа пациентов с травмами (стр. 20.0), пациенты, пострадавшие в ДТП %s, из них умерло: всего %s, в том числе в первые 0-30 суток %s, из них в первые 0-7 суток %s'''
        %(reportSubLine1[0], deathList1[7], reportSubLine1[1], reportSubLine1[2]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2100) Кроме того пациенты, переведенные в другие  организации (подразделения), оказывающие медицинскую помощь в стационарных условиях %s, в том числе новорожденные %s, из них недоношенные %s, направлено: в организации медицинской реабилитации %s, в санатории %s'''
        %(reportSubLine1[3], reportSubLine1[4], reportSubLine1[27], reportSubLine1[5], reportSubLine1[6]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2200) Из общего числа умерших (стр. 1) умерло новорожденных в первые 168 часов жизни %s. Умерло в первые 24 часа после поступления в стационар: в возрасте 0 - 24 часа после рождения %s, из них недоношенных %s, до 1 года (без умерших в первые 24 часа после рождения) %s, в том числе от пневмонии %s.'''
        %(str(deathList1[3]), str(deathList1[4]), deathList1[8], str(deathList1[5]), str(deathList1[6])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2300) Поступило пациентов с инфарктом миокарда в первые сутки от начала заболевания %s, в том числе в первые 12 часов %s, из них проведена тромболитическая терапия %s, стентирование %s, из общего числа умерших умерло пациентов с инфарктом миокарда (стр. 10.4.2+10.4.3) в первые 24 часа после поступления в стационар %s, в том числе в возрасте до 65 лет %s, из числа умерших в первые в 24 часа поступления в стационар пациентов с инфарктом миокарда проведена тромболитическая терапия %s, стентирование %s.'''
        %(reportSubLine1[7], reportSubLine1[28], reportSubLine1[8], reportSubLine1[9], reportSubLine1[10], reportSubLine1[11], reportSubLine1[12], reportSubLine1[29]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2301) Поступило пациентов с острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.5) в первые сутки от начала заболевания %s, из них в первые 6 часов %s , из них проведена тромболитическая терапия в первые 6 часов %s'''
        %(reportSubLine1[13], reportSubLine1[14], reportSubLine1[15]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2400) Умерло беременных, рожениц и родильниц (при сроке беременности 28 недели и более) %s. Из них умерло от заболеваний, осложняющих беременность и роды %s.'''
        %(reportSubLine1[16], reportSubLine1[17]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2500) Из общего числа умерших умерло в первые 24 часа после поступления в стационар: детей в возрасте 0-17 лет включительно %s, больных в возрасте от 18 до 65 лет %s, из них больных острыми цереброваскулярными болезнями (стр. 10.7.1-10.7.4) %s.'''
        %(str(deathList1[0]), str(deathList1[1]), str(deathList1[2])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2600) Из общего числа выписанных (стр. 1, гр. 4) было направлено в стационар поликлиникой %s, в т.ч. детей %s, полицией %s, в т.ч.детей %s, обратились самостоятельно %s.'''
        %(reportSubLine1[18], reportSubLine1[19],
        reportSubLine1[20], reportSubLine1[21], reportSubLine1[22]))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2700) Из общего числа отказов в госпитализации: отказались сами %s, не было показаний к госпитализации %s, медицинская помощь была оказана амбулаторно %s , были направлены в другие стационары %s.'''
        %(str(renunciationList1[0]), str(renunciationList1[1]), str(renunciationList1[2]), str(renunciationList1[3])))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(2800) Замещение жизненно важных функций (искусственная вентиляция легких, экстракорпоральные методы лечения, экстракорпоральная мембранная оксигенация, контрпульсация, прессорная поддержка и др.) в отделениях анестезиологии и реанимации: до 1 суток __ , до 3-х суток __ , 30 суток и более __ ; умерло: в течение 1 часа ___ , в течение 1 суток ___.''')
        cursor.insertBlock()
        cursor.movePosition(QtGui.QTextCursor.End)
        return doc


class CStationaryF143000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureId = self.getOrgStructureId(orgStructureIndex)
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex)
        params['orgStructureId'] = orgStructureId
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            rowSize = 6
            mapRowsChildrenOutMoving = createMapCodeToRowIdx( [row[2] for row in RowsChildren] )
            reportMainDataOutMoving = [ [0]*rowSize for row in xrange(len(RowsChildren)) ]
            reportMainDataAll = [ [0]*rowSize ]
            reportMainDataOthers = [ [0]*rowSize ]

            def findReceived(orgStructureIdList, orgStructureId, begDateTime, endDateTime):
                db = QtGui.qApp.db
                tableAPT = db.table('ActionPropertyType')
                tableAP = db.table('ActionProperty')
                tableActionType = db.table('ActionType')
                tableAction = db.table('Action')
                tableEvent = db.table('Event')
                tableClient = db.table('Client')
                tableAPOS = db.table('ActionProperty_OrgStructure')
                tableOS = db.table('OrgStructure')
                tableDiagnosis = db.table('Diagnosis')
                tableDiagnostic = db.table('Diagnostic')
                tableRBDiagnosisType = db.table('rbDiagnosisType')
                tableEventType = db.table('EventType')
                tableRBMedicalAidType = db.table('rbMedicalAidType')

                queryTable = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
                queryTable = queryTable.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                queryTable = queryTable.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
                queryTable = queryTable.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                queryTable = queryTable.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                queryTable = queryTable.leftJoin(tableAPT, tableAPT['actionType_id'].eq(tableActionType['id']))
                queryTable = queryTable.leftJoin(tableAP, tableAP['type_id'].eq(tableAPT['id']))
                queryTable = queryTable.innerJoin(tableDiagnostic, tableEvent['id'].eq(tableDiagnostic['event_id']))
                queryTable = queryTable.innerJoin(tableDiagnosis, tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']))
                queryTable = queryTable.innerJoin(tableRBDiagnosisType, tableDiagnostic['diagnosisType_id'].eq(tableRBDiagnosisType['id']))

                cond = [ tableActionType['id'].inlist(getActionTypeIdListByFlatCode('received%')),
                         tableAction['deleted'].eq(0),
                         tableEvent['deleted'].eq(0),
                         tableActionType['deleted'].eq(0),
                         tableClient['deleted'].eq(0),
                         tableEventType['deleted'].eq(0)
                       ]
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    queryTable = queryTable.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if orgStructureId and orgStructureIdList:
                    queryTable = queryTable.innerJoin(tableAPOS, tableAPOS['id'].eq(tableAP['id']))
                    queryTable = queryTable.innerJoin(tableOS, tableOS['id'].eq(tableAPOS['value']))
                    cond.append(db.joinAnd([tableOS['deleted'].eq(0), tableAP['deleted'].eq(0), tableAPT['deleted'].eq(0), tableAP['action_id'].eq(tableAction['id'])]))
                    cond.append(tableOS['id'].inlist(orgStructureIdList))
                    cond.append(tableOS['type'].ne(0))
                    cond.append(tableOS['deleted'].eq(0))
                cond.append(u'Action.begDate >= Client.birthDate AND Action.begDate <= ADDDATE(Client.birthDate, 6)')
                joinOr1 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].dateGe(begDateTime)])
                joinOr2 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].dateLe(endDateTime)])
                cond.append(db.joinAnd([joinOr1, joinOr2]))
                cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2' AND Diagnostic.person_id = Event.execPerson_id AND (NOT EXISTS (SELECT DC.id FROM Diagnostic AS DC INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '1' AND DC.event_id = Event.id LIMIT 1)))''')
                cols = u'''Action.begDate, Action.endDate, Client.id AS clientId, Client.birthDate, Client.birthWeight, Diagnosis.MKB, (SELECT ClientAttach.begDate FROM ClientAttach INNER JOIN rbAttachType ON ClientAttach.attachType_id=rbAttachType.id
AND (rbAttachType.code=\'%s\') AND (ClientAttach.deleted=0) WHERE Client.id=ClientAttach.client_id AND ((Action.begDate IS NULL) OR (ClientAttach.begDate IS NOT NULL AND Action.begDate IS NOT NULL AND DATE(ClientAttach.begDate)>=DATE(Action.begDate))) AND ((Action.endDate IS NULL) OR (ClientAttach.begDate IS NOT NULL AND Action.endDate IS NOT NULL AND DATE(ClientAttach.begDate)<=DATE(Action.endDate)))) AS clientAttachBegDate''' %(self.clientDeath)
                records = db.getRecordListGroupBy(queryTable, cols, cond, 'Event.id')
                reportDataAll = reportMainDataAll[0]
                reportDataOthers = reportMainDataOthers[0]
                for record in records:
                    MKBRec = normalizeMKB(forceString(record.value('MKB')))
                    clientAttachBegDate = forceDate(record.value('clientAttachBegDate'))
                    birthDate   = forceDate(record.value('birthDate'))
                    birthWeight = forceInt(record.value('birthWeight'))
                    maxDeathDate = None
                    if clientAttachBegDate:
                        maxDeathDate = birthDate.addDays(6) if birthDate else None
                    for row in mapRowsChildrenOutMoving.get(MKBRec, []):
                        reportLine = reportMainDataOutMoving[row]
                        if 500 <= birthWeight < 1000:
                            reportLine[0] += 1
                        elif birthWeight >= 1000:
                            reportLine[3] += 1
                        if clientAttachBegDate:
                            if 500 <= birthWeight and birthWeight < 1000:
                                if maxDeathDate and clientAttachBegDate <= maxDeathDate:
                                    reportLine[2] += 1
                                reportLine[1] += 1
                            elif birthWeight >= 1000:
                                if maxDeathDate and clientAttachBegDate <= maxDeathDate:
                                    reportLine[5] += 1
                                reportLine[4] += 1
                    if not mapRowsChildrenOutMoving.get(MKBRec, []):
                        if 500 <= birthWeight < 1000:
                            reportDataOthers[0] += 1
                            if clientAttachBegDate:
                                if maxDeathDate and clientAttachBegDate <= maxDeathDate:
                                    reportDataOthers[2] += 1
                                reportDataOthers[1] += 1
                        elif birthWeight >= 1000:
                            reportDataOthers[3] += 1
                            if clientAttachBegDate:
                                if maxDeathDate and clientAttachBegDate <= maxDeathDate:
                                    reportDataOthers[5] += 1
                                reportDataOthers[4] += 1
                    if 500 <= birthWeight < 1000:
                        reportDataAll[0] += 1
                        if clientAttachBegDate:
                            reportDataAll[1] += 1
                            if maxDeathDate and clientAttachBegDate and clientAttachBegDate <= maxDeathDate:
                                reportDataAll[2] += 1
                    elif birthWeight >= 1000:
                        reportDataAll[3] += 1
                        if clientAttachBegDate:
                            reportDataAll[4] += 1
                            if maxDeathDate and clientAttachBegDate and clientAttachBegDate <= maxDeathDate:
                                reportDataAll[5] += 1

        doc = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(doc)
        cursor.setCharFormat(CReportBase.ReportTitle)
        cursor.insertText(u'2.Состав больных новорожденных, поступивших в возрасте 0-6 дней жизни, и исходы их лечения\n(3000)')
        cursor.insertBlock()
        self.dumpParams(cursor, params)
        cursor.setCharFormat(CReportBase.ReportBody)
        cursor.insertBlock()
        cols = [('25%',[u'Наименование заболеваний', u'', u'', u'1'], CReportBase.AlignLeft),
                ('5%', [u'№ строки', u'', u'', u'2'], CReportBase.AlignLeft),
                ('10%', [u'Код по МКБ X пересмотра', u'', u'', u'3'], CReportBase.AlignLeft),
                ('10%', [u'Массой тела при рождении до 1000 г(500-999 г)', u'Поступило больных в первые 0-6 дней после рождения', u'', u'4'], CReportBase.AlignLeft),
                ('10%', [u'', u'Из них умерло', u'всего',u'5'], CReportBase.AlignLeft),
                ('10%', [u'', u'', u'из них в первые 0-6 дней после рождения', u'6'], CReportBase.AlignLeft),
                ('10%', [u'Массой тела при рождении 1000 г и более', u'Поступило больных в первые 0-6 дней после рождения', u'', u'7'], CReportBase.AlignLeft),
                ('10%', [u'', u'Из них умерло', u'всего', u'8'], CReportBase.AlignLeft),
                ('10%', [u'', u'', u'из них в первые 0-6 дней после рождения', u'9'], CReportBase.AlignLeft)
               ]
        table = createTable(cursor, cols)
        table.mergeCells(0, 0, 3, 1) # 1
        table.mergeCells(0, 1, 3, 1) # 2
        table.mergeCells(0, 2, 3, 1) # 3
        table.mergeCells(0, 3, 1, 3) # 4
        table.mergeCells(1, 4, 1, 2) # 5
        table.mergeCells(1, 3, 2, 1) # 4
        table.mergeCells(0, 6, 1, 3) # 7
        table.mergeCells(1, 6, 2, 1) # 7
        table.mergeCells(1, 7, 1, 2) # 8
        row = table.addRow()
        table.setText(row, 0, u'Всего больных новорожденных')
        table.setText(row, 1, u'1')
        table.setText(row, 2, u'')

        findReceived(orgStructureIdList, orgStructureId, begDateTime, endDateTime)
        reportDataAll = reportMainDataAll[0]
        reportDataOthers = reportMainDataOthers[0]
        for col in xrange(rowSize):
            table.setText(row, 3+col, reportDataAll[col])
        for row, rowDescr in enumerate(RowsChildren):
            reportLine = reportMainDataOutMoving[row]
            i = table.addRow()
            table.setText(i, 0, rowDescr[0])
            table.setText(i, 1, rowDescr[1])
            table.setText(i, 2, rowDescr[2])
            for col in xrange(rowSize):
                table.setText(i, 3+col, reportLine[col])
        rowOthers = table.addRow()
        table.setText(rowOthers, 0, u'прочие болезни')
        table.setText(rowOthers, 1, u'8')
        table.setText(rowOthers, 2, u'')
        for col in xrange(rowSize):
            table.setText(rowOthers, 3+col, reportDataOthers[col])
        return doc


class CStationaryF144000(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.setSelectActionTypeVisible(True)
        self.stationaryF14SetupDialog.cmbSelectActionType.addItem(u'Выписка+внешние События')
        self.stationaryF14SetupDialog.setSelectIsTypeOS(True)
        self.stationaryF14SetupDialog.setItemsTypeSurgery([u'Пользовательский с детализацией по дополнительным операциям'])
        self.stationaryF14SetupDialog.setMedicalAidTypeVisible(True)
        self.stationaryF14SetupDialog.setExistFlatCodeVisible(True)
        return result


    def build(self, params):
        db = QtGui.qApp.db
        orgStructureId = params.get('orgStructureId', None)
        orgStructureIdList = db.getDescendants('OrgStructure', 'parent_id', orgStructureId) if orgStructureId else []
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        isTypeOS = params.get('isTypeOS', 0)
        isMedicalAidType = params.get('isMedicalAidType', 0)
        selectActionType = params.get('selectActionType', 0)
        existFlatCode       = params.get('existFlatCode', False)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRows4000] )
            if isNomeclature:
                rowSize = 27
                reportMainData = [0]*rowSize
                reportMainData.append(0.0)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'3.Хирургическая работа учреждения\n(4000)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('15%',[u'Наименование операции', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('4%', [u'№ строки', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('3%', [u'Число операций, проведенных в стационаре', u'всего', u'', u'3'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'4'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'из них (из гр.4) в возрасте до 1 года', u'5'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включительно', u'6'], CReportBase.AlignLeft),
                    ('3%', [u'Из них операций с применением высоких медицинских технологий (ВМП)',u'всего', u'', u'7'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'8'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'из них (из гр.8) в возрасте до 1 года', u'9'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включи-тельно', u'10'], CReportBase.AlignLeft),
                    ('3%', [u'Число операций, при которых наблюдались осложнения в стационаре',u'всего', u'', u'11'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'12'], CReportBase.AlignLeft),
                    ('3%', [u'',u'', u'из них (из гр.12) в возрасте до 1 года', u'13'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включительно', u'14'], CReportBase.AlignLeft),
                    ('3%', [u'из них после операций, с применением ВМП',u'всего', u'', u'15'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'16'], CReportBase.AlignLeft),
                    ('3%', [u'',u'', u'из них (из гр.16) в возрасте до 1 года', u'17'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включительно', u'18'], CReportBase.AlignLeft),
                    ('3%', [u'Умерло оперированных в стационаре',u'всего', u'', u'19'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'20'], CReportBase.AlignLeft),
                    ('3%', [u'',u'', u'из них (из гр.20) в возрасте до 1 года', u'21'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включительно', u'22'], CReportBase.AlignLeft),
                    ('3%', [u'из них умерло после операций, проведенных с применением ВМП',u'всего', u'', u'23'], CReportBase.AlignLeft),
                    ('3%', [u'', u'из них: детям 0-17 лет включительно', u'0-14 лет включительно', u'24'], CReportBase.AlignLeft),
                    ('3%', [u'',u'', u'из них (из гр.24) в возрасте до 1 года', u'25'], CReportBase.AlignLeft),
                    ('3%', [u'', u'', u'15-17 лет включительно', u'26'], CReportBase.AlignLeft),
                    ('3%', [u'Из гр.3: проведено операций по поводу злокачественных новообразований', u'', u'', u'27'], CReportBase.AlignLeft),
                    ('3%', [u'Из гр.3: направлено материалов на морфологическое исследование', u'', u'', u'28'], CReportBase.AlignLeft)
                   ]
            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 3, 1)
            table.mergeCells(0, 1, 3, 1)
            table.mergeCells(0, 2, 1, 4)
            table.mergeCells(1, 2, 2, 1)
            table.mergeCells(1, 3, 1, 3)
            table.mergeCells(0, 6, 1, 4)
            table.mergeCells(1, 6, 2, 1)
            table.mergeCells(1, 7, 1, 3)
            table.mergeCells(0, 10, 1, 4)
            table.mergeCells(1, 10, 2, 1)
            table.mergeCells(1, 11, 1, 3)
            table.mergeCells(0, 14, 1, 4)
            table.mergeCells(1, 14, 2, 1)
            table.mergeCells(1, 15, 1, 3)
            table.mergeCells(0, 18, 1, 4)
            table.mergeCells(1, 18, 2, 1)
            table.mergeCells(1, 19, 1, 3)
            table.mergeCells(0, 22, 1, 4)
            table.mergeCells(1, 22, 2, 1)
            table.mergeCells(1, 23, 1, 3)
            table.mergeCells(0, 26, 3, 1)
            table.mergeCells(0, 27, 3, 1)
            mapCodeToRowIdx = self.getRowsSurgery(isNomeclature)
            mapCodesToRowIdx, mapCodeToRowIdxAddition = self.getSurgery(mapMainRows, mapCodeToRowIdx, orgStructureIdList, begDate, endDate, financeId, isNomeclature, selectActionType, isTypeOS=isTypeOS, isMedicalAidType=isMedicalAidType, existFlatCode=existFlatCode)
            keys = mapCodesToRowIdx.keys()
            keys.sort()
            if isNomeclature:
                for row, rowDescr in enumerate(RowsUsers4000_3):
                    rowUsers = rowDescr[1]
                    if rowUsers == u'1':
                        rowUsers = u''
                    i = table.addRow()
                    table.setText(i, 0, rowDescr[0])
                    table.setText(i, 1, rowDescr[1])
                    items = mapCodesToRowIdx.get(QString(rowUsers), reportMainData)
                    for col, item in enumerate(items):
                        if col > 1:
                            table.setText(i, col, forceString(item))
                if mapCodeToRowIdxAddition:
                    i = table.addRow()
                    table.setText(i, 0, u'Дополнительные операции')
                    table.mergeCells(i, 0, 1, len(cols))
                    for values in mapCodeToRowIdxAddition.values():
                        i = table.addRow()
                        for col, val in enumerate(values):
                            table.setText(i, col, forceString(val))
            else:
                for key in keys:
                    items = mapCodesToRowIdx[key]
                    i = table.addRow()
                    for col, item in enumerate(items):
                        table.setText(i, col, forceString(item))
        return doc


    def getRowsSurgery(self, isNomeclature):
        mapCodeToRowIdx = {}
        db = QtGui.qApp.db
        tableActionType = db.table('ActionType')
        tableRBService = db.table('rbService')
        cond = [tableActionType['deleted'].eq(0)]
        cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
        table = tableActionType
        if not isNomeclature:
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
        stmt = db.selectStmt(table, [tableActionType['flatCode'], tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'), tableActionType['name'],
                                    tableActionType['group_id'], tableActionType['id'].alias('actionTypeId')],
                            cond, u'%s , ActionType.group_id'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
        records = db.query(stmt)
        if not isNomeclature:
            numbers = [1]
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = code.split('.')
                    lenCodeList = len(codeList)
                    if len(numbers) < lenCodeList:
                        for i in range(lenCodeList - len(numbers)):
                            numbers.append(0)
                    elif len(numbers) > lenCodeList:
                        for i in range(len(numbers) - lenCodeList):
                            numbers[len(numbers)- (1 + i)] = 0
                    numbers[lenCodeList-1] += 1
                    rowIdx = u'.'.join(str(number) for number in numbers)
                    mapCodeToRowIdx[code] = (name, rowIdx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                    rowIdx = []
        else:
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = [QString(code)]
                    indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    while indexPoint > -1:
                        code.truncate(indexPoint)
                        codeList.append(QString(code))
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    codeList.sort()
                    for code in codeList:
                        if not mapCodeToRowIdx.get(code, None):
                            mapCodeToRowIdx[code] = (name, code, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        return mapCodeToRowIdx


    def setValueMapCodeToRowIdx(self, mapCodeToRowIdx, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature):
        if mapCodeToRowIdx.get(code, None):
            items = mapCodeToRowIdx[code]
            valueName = items[0]
            valueRow = items[1]
            valueSurgery = items[2]
            valueSurgeryChildren14 = items[3]
            valueSurgeryChildren1 = items[4]
            valueSurgeryChildren17 = items[5]
            valueSurgeryWTMP = items[6]
            valueSurgeryWTMP14 = items[7]
            valueSurgeryWTMP1 = items[8]
            valueSurgeryWTMP17 = items[9]
            valueComplication = items[10]
            valueComplication14 = items[11]
            valueComplication1 = items[12]
            valueComplication17 = items[13]
            valueComplicationWTMP = items[14]
            valueComplicationWTMP14 = items[15]
            valueComplicationWTMP1 = items[16]
            valueComplicationWTMP17 = items[17]
            valueDeath = items[18]
            valueDeath14 = items[19]
            valueDeath1 = items[20]
            valueDeath17 = items[21]
            valueDeathWTMP = items[22]
            valueDeathWTMP14 = items[23]
            valueDeathWTMP1 = items[24]
            valueDeathWTMP17 = items[25]
            valueSurgeryOncology = items[26]
            valueMorphologicalStudy = items[27]
            valueSurgery += countSurgery
            if surgeryOncology:
                valueSurgeryOncology += countSurgery
            if quotaTypeWTMP:
                valueSurgeryWTMP += countSurgery
            if countComplication:
                valueComplication += countSurgery
            if countComplication and quotaTypeWTMP:
                valueComplicationWTMP += countSurgery
            if countDeathSurgery:
                valueDeath += 1
            if countDeathSurgery and quotaTypeWTMP:
                valueDeathWTMP += 1
            if countMorphologicalStudy:
                valueMorphologicalStudy += 1
            valuePostsurgicalLethality = round((100.0 * float(valueDeath))/float(valueSurgery), 2) if valueSurgery else 0.0
            if ageClient < 18:
                if ageClient >= 0 and ageClient < 15:
                    valueSurgeryChildren14 += countSurgery
                    if quotaTypeWTMP: valueSurgeryWTMP14 += countSurgery
                    if countComplication: valueComplication14 += countSurgery
                    if countComplication and quotaTypeWTMP: valueComplicationWTMP14 += countSurgery
                    if countDeathSurgery: valueDeath14 += 1
                    if countDeathSurgery and quotaTypeWTMP: valueDeathWTMP14 += 1
                elif ageClient >= 15 and ageClient < 18:
                    valueSurgeryChildren17 += countSurgery
                    if quotaTypeWTMP: valueSurgeryWTMP17 += countSurgery
                    if countComplication: valueComplication17 += countSurgery
                    if countComplication and quotaTypeWTMP: valueComplicationWTMP17 += countSurgery
                    if countDeathSurgery: valueDeath17 += 1
                    if countDeathSurgery and quotaTypeWTMP: valueDeathWTMP17 += 1
                if ageClient >= 0 and ageClient < 1:
                    valueSurgeryChildren1 += countSurgery
                    if quotaTypeWTMP: valueSurgeryWTMP1 += countSurgery
                    if countComplication: valueComplication1 += countSurgery
                    if countComplication and quotaTypeWTMP: valueComplicationWTMP1 += countSurgery
                    if countDeathSurgery: valueDeath1 += 1
                    if countDeathSurgery and quotaTypeWTMP: valueDeathWTMP1 += 1

            mapCodeToRowIdx[code] = (valueName, valueRow, valueSurgery, valueSurgeryChildren14, valueSurgeryChildren1,
                                     valueSurgeryChildren17, valueSurgeryWTMP, valueSurgeryWTMP14, valueSurgeryWTMP1,
                                     valueSurgeryWTMP17, valueComplication, valueComplication14, valueComplication1,
                                     valueComplication17, valueComplicationWTMP, valueComplicationWTMP14, valueComplicationWTMP1,
                                     valueComplicationWTMP17, valueDeath,  valueDeath14, valueDeath1, valueDeath17,
                                     valueDeathWTMP, valueDeathWTMP14, valueDeathWTMP1, valueDeathWTMP17,
                                     valueSurgeryOncology, valueMorphologicalStudy)
        return mapCodeToRowIdx


    def getSurgery(self, mapMainRows, mapCodeToRowIdx, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature, selectActionType, isTypeOS=0, isMedicalAidType=0, existFlatCode=None):
        mapCodeToRowIdxAddition = {}
        if mapCodeToRowIdx:
            db = QtGui.qApp.db
            tableEvent = db.table('Event')
            tableAction = db.table('Action')
            tableActionType = db.table('ActionType')
            tableClient = db.table('Client')
            tableRBService = db.table('rbService')
            tableEventType = db.table('EventType')
            tableRBMedicalAidType = db.table('rbMedicalAidType')
            tableContract = db.table('Contract')
            tablePerson = db.table('Person')
            tableOrgStructure = db.table('OrgStructure')
            table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            eventIdDataList = {}
            records = []
            if selectActionType > 0:
                flatCode = ['received%', 'moving%', 'leaved%', 'leaved%'][selectActionType-1]
                nameProperty = [u'Направлен в отделение', u'Отделение пребывания', u'Отделение', u'Отделение'][selectActionType-1]
                cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode(flatCode)),
                              tableEvent['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableEventType['deleted'].eq(0)
                            ]
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                if isMedicalAidType:
                    table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                    cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if existFlatCode:
                    cond.append(tableActionType['flatCode'].ne(u''))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['begDate'].le(endDateTime))
                if orgStructureIdList:
                    cond.append(getDataOrgStructure_HBDS(nameProperty, orgStructureIdList, isTypeOS))
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                if selectActionType == 2:
                    eventRecords = db.getRecordList(table, 'Event.id AS eventId, Action.begDate, Action.endDate', cond)
                    for eventRecord in eventRecords:
                        eventId = forceRef(eventRecord.value('eventId'))
                        dateList = eventIdDataList.get(eventId, [])
                        begDate = forceDate(eventRecord.value('begDate'))
                        endDate = forceDate(eventRecord.value('endDate'))
                        if (begDate, endDate) not in dateList:
                            dateList.append((begDate, endDate))
                        eventIdDataList[eventId] = dateList
                    eventIdList = eventIdDataList.keys()
                else:
                    eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
                    idList = set([])
                    if selectActionType == 1:
                        for eventId in eventIdList:
                            idListDescendant = set(db.getDescendants(tableEvent, 'prevEvent_id', eventId))
                            idList |= idListDescendant
                    elif selectActionType == 3:
                        idListParents = set(db.getTheseAndParents(tableEvent, 'prevEvent_id', eventIdList))
                        idList |= idListParents
                    setEventIdList = set(eventIdList)
                    setEventIdList |= idList
                    eventIdList = list(setEventIdList)
                if eventIdList:
                    order = u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode')
                    cols = [tableAction['id'].alias('actionId'),
                                tableAction['event_id'],
                                tableAction['amount'].alias('countSurgery'),
                                tableAction['MKB'],
                                tableAction['begDate'],
                                tableAction['endDate'],
                                tableActionType['id'].alias('actionTypeId'),
                                tableActionType['group_id'].alias('groupId'),
                                tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                                tableActionType['name'],
                                tableActionType['flatCode'],
                                tableActionType['serviceType']
                                ]
                    cols.append('''(IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1,
                                   IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                       WHERE ActionType_QuotaType.master_id = ActionType.id
                                       AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1, 0))
                                    AND (EXISTS(SELECT APCQ.value
                                        FROM ActionPropertyType AS APT
                                        INNER JOIN ActionProperty AS AP ON AP.type_id=APT.id
                                        INNER JOIN ActionProperty_Client_Quoting AS APCQ ON APCQ.id=AP.id
                                        INNER JOIN Client_Quoting AS CQ ON CQ.id=APCQ.value
                                        WHERE APT.actionType_id=Action.actionType_id
                                        AND AP.action_id=Action.id
                                        AND AP.deleted = 0
                                        AND APT.typeName = '%s' AND APT.deleted=0
                                        AND CQ.deleted=0 AND CQ.master_id = Client.id))
                                    ) AS quotaTypeWTMP'''%(u'Квота пациента'))
#                    cols.append('''IF((SELECT QuotaType.class
#                                       FROM QuotaType
#                                       WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
#                                       LIMIT 1) = 0, 1,
#                                   IF((SELECT QuotaType.class
#                                       FROM QuotaType
#                                       INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
#                                       WHERE ActionType_QuotaType.master_id = ActionType.id
#                                       AND QuotaType.deleted = 0
#                                       LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                    cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                    cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                    cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                    cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                    table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                    table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                    table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                    cond = [tableAction['event_id'].inlist(eventIdList),
                                  tableEvent['deleted'].eq(0),
                                  tableAction['deleted'].eq(0),
                                  tableActionType['deleted'].eq(0),
                                  tableClient['deleted'].eq(0),
                                  tableAction['endDate'].isNotNull()
                                ]
                    if selectActionType == 4:
                        tableEvent_P = db.table('Event').alias('Event_P')
                        tableAction_P = db.table('Action').alias('Action_P')
                        tableActionType_P = db.table('ActionType').alias('ActionType_P')
                        tableRBService_P = db.table('rbService').alias('rbService_P')
                        #tableContract_P = db.table('Contract').alias('Contract_P')
                        #tablePerson_P = db.table('Person').alias('Person_P')
                        cols_P = [  tableAction_P['id'].alias('actionId_P'),
                                    tableAction_P['amount'].alias('countSurgery_P'),
                                    tableAction_P['event_id'].alias('event_id_P'),
                                    tableAction_P['begDate'].alias('begDate_P'),
                                    tableAction_P['endDate'].alias('endDate_P'),
                                    tableAction_P['MKB'].alias('MKB_P'),
                                    tableActionType_P['id'].alias('actionTypeId_P'),
                                    tableActionType_P['group_id'].alias('groupId_P'),
                                    tableRBService_P['code'].alias('code_P') if not isNomeclature else tableActionType_P['flatCode'].alias('code_P'),
                                    tableActionType_P['name'].alias('name_P'),
                                    tableActionType['flatCode'].alias('flatCode_P'),
                                    tableActionType_P['serviceType'].alias('serviceType_P')
                                ]
                        cols_P.append('''(IF((SELECT QuotaType.class
                                           FROM QuotaType
                                           WHERE QuotaType.id = ActionType_P.quotaType_id AND QuotaType.deleted = 0
                                           LIMIT 1) = 0, 1,
                                       IF((SELECT QuotaType.class
                                           FROM QuotaType
                                           INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                           WHERE ActionType_QuotaType.master_id = ActionType_P.id
                                           AND QuotaType.deleted = 0
                                           LIMIT 1) = 0, 1, 0))
                                        AND (EXISTS(SELECT APCQ.value
                                            FROM ActionPropertyType AS APT
                                            INNER JOIN ActionProperty AS AP ON AP.type_id=APT.id
                                            INNER JOIN ActionProperty_Client_Quoting AS APCQ ON APCQ.id=AP.id
                                            INNER JOIN Client_Quoting AS CQ ON CQ.id=APCQ.value
                                            WHERE APT.actionType_id=Action_P.actionType_id
                                            AND AP.action_id=Action_P.id
                                            AND AP.deleted = 0
                                            AND APT.typeName = '%s' AND APT.deleted=0
                                            AND CQ.deleted=0 AND CQ.master_id = Client.id))
                                        ) AS quotaTypeWTMP_P'''%(u'Квота пациента'))
                        cols_P.append('%s AS countMorphologicalStudy_P'%(getStringPropertyForTableName(u'Action_P', u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                        cols_P.append(u'%s AS countDeathHospital_P'%(getStringPropertyForTableName(u'Action_P', u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                        cols_P.append(u'%s AS countComplication_P'%(getStringPropertyForTableName(u'Action_P', u'Осложнени%', u'(APS.value != \'\' OR APS.value != \' \')')))
                        tableA_F = db.table('Action').alias('A_F')
                        tableE_F = db.table('Event').alias('E_F')
                        condA_F = [u'E_F.id = getFirstEventId(Event.id)',
                                   tableA_F['deleted'].eq(0),
                                   tableE_F['deleted'].eq(0),
                                   tableA_F['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%'))
                                   ]
                        stmtJOINA = db.selectStmt(u'''Event AS E_F INNER JOIN Action AS A_F ON A_F.event_id = E_F.id''', u'A_F.begDate', condA_F)
                        tableA_E = db.table('Action').alias('A_E')
                        tableAT_E = db.table('ActionType').alias('AT_E')
                        condA_E = [tableA_E['deleted'].eq(0),
                                   tableA_E['event_id'].eq(tableEvent_P['id']),
                                   tableA_E['endDate'].isNotNull(),
                                   tableAT_E['deleted'].eq(0),
                                   tableA_E['endDate'].dateLe(tableAction['endDate']),
                                   u'DATE(A_E.begDate) >= DATE(('+unicode(stmtJOINA)+u'))'
                                   ]
                        tableAE = tableA_E.innerJoin(tableAT_E, tableAT_E['id'].eq(tableA_E['actionType_id']))
                        condA_E.append(tableAT_E['serviceType'].eq(CActionServiceType.operation))
                        if not isNomeclature:
                            tableRB_A = db.table('rbService').alias('RB_A')
                            condRBSA = [tableRB_A['id'].eq(tableAT_E['nomenclativeService_id'])]
                            tableAE = tableAE.innerJoin(tableRB_A, db.joinAnd(condRBSA))
                        table = table.leftJoin(tableEvent_P, db.joinAnd([tableEvent_P['id'].notInlist(eventIdList),
                                                                         tableEvent_P['client_id'].eq(tableClient['id']),
                                                                         tableEvent_P['deleted'].eq(0),
                                                                         tableEvent_P['id'].ne(tableEvent['id']),
                                                                         db.existsStmt(tableAE, condA_E)
                                                                         ]))
                        condJOINAction = [tableAction_P['event_id'].notInlist(eventIdList),
                                          tableAction_P['event_id'].eq(tableEvent_P['id']),
                                          tableAction_P['event_id'].ne(tableEvent['id']),
                                          tableAction_P['endDate'].isNotNull(),
                                          tableAction_P['deleted'].eq(0),
                                          tableEvent_P['deleted'].eq(0),
                                          tableAction_P['endDate'].dateLe(tableAction['endDate']),
                                          u'DATE(Action_P.begDate) >= DATE(('+unicode(stmtJOINA)+u'))'
                                          ]
                        table = table.leftJoin(tableAction_P, db.joinAnd(condJOINAction))
                        condJOINAT = [tableAction_P['actionType_id'].eq(tableActionType_P['id']),
                                      tableActionType_P['deleted'].eq(0)
                                      ]
                        condJOINAT.append(tableActionType_P['serviceType'].eq(CActionServiceType.operation))
                        table = table.leftJoin(tableActionType_P, db.joinAnd(condJOINAT))
                        if not isNomeclature:
                            condRBS = [tableRBService_P['id'].eq(tableActionType_P['nomenclativeService_id'])]
                            table = table.leftJoin(tableRBService_P, db.joinAnd(condRBS))
#                        condJOINP = [tablePerson_P['deleted'].eq(0)]
#                        if orgStructureIdList:
#                            condJOINP.append(tablePerson_P['orgStructure_id'].inlist(orgStructureIdList))
#                            cond.append(db.joinOr([db.joinAnd([tablePerson['deleted'].eq(0), tablePerson['orgStructure_id'].inlist(orgStructureIdList)]), db.joinAnd([tablePerson_P['deleted'].eq(0), tablePerson_P['orgStructure_id'].inlist(orgStructureIdList)])]))
#                        condJOINP.append(tableAction_P['person_id'].eq(tablePerson_P['id']))
#                        table = table.leftJoin(tablePerson_P, db.joinAnd(condJOINP))
#                        if financeId:
#                            condJOINC = [tableContract_P['id'].eq(tableEvent_P['contract_id']),
#                                         u'''((Action_P.finance_id IS NOT NULL AND Action_P.deleted=0 AND Action_P.finance_id = %s)
#                                              OR (Contract_P.id IS NOT NULL AND Contract_P.deleted=0 AND Contract_P.finance_id = %s))'''%(str(financeId), str(financeId))
#                                        ]
#                            table = table.leftJoin(tableContract_P, db.joinAnd(condJOINC))
                        cols.extend(cols_P)
                        order += u', ActionType_P.group_id, %s'%(u'rbService_P.code' if not isNomeclature else u'ActionType_P.flatCode')
                    socStatusClassId = self.params.get('socStatusClassId', None)
                    socStatusTypeId  = self.params.get('socStatusTypeId', None)
                    if socStatusClassId or socStatusTypeId:
                        tableClientSocStatus = db.table('ClientSocStatus')
                        if begDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                               tableClientSocStatus['endDate'].ge(begDateTime)
                                                              ]),
                                                   tableClientSocStatus['endDate'].isNull()
                                                  ]))
                        if endDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                               tableClientSocStatus['begDate'].le(endDateTime)
                                                              ]),
                                                   tableClientSocStatus['begDate'].isNull()
                                                  ]))
                        table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                        if socStatusClassId:
                            cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                        if socStatusTypeId:
                            cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                        cond.append(tableClientSocStatus['deleted'].eq(0))
                    if not isNomeclature:
                        table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                    if selectActionType == 4:
                        cond.append(db.joinOr([tableActionType['serviceType'].eq(CActionServiceType.operation), tableActionType['id'].inlist(getActionTypeIdListByFlatCode('leaved%'))]))
                    else:
                        cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                    records = db.getRecordList(table, cols, cond, order)
            else:
                cols = [tableAction['id'].alias('actionId'),
                            tableAction['event_id'],
                            tableAction['amount'].alias('countSurgery'),
                            tableAction['MKB'],
                            tableAction['begDate'],
                            tableAction['endDate'],
                            tableActionType['id'].alias('actionTypeId'),
                            tableActionType['group_id'].alias('groupId'),
                            tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                            tableActionType['name'],
                            tableActionType['flatCode'],
                            tableActionType['serviceType']
                            ]
                cols.append('''(IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1,
                               IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                   WHERE ActionType_QuotaType.master_id = ActionType.id
                                   AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1, 0))
                                AND (EXISTS(SELECT APCQ.value
                                    FROM ActionPropertyType AS APT
                                    INNER JOIN ActionProperty AS AP ON AP.type_id=APT.id
                                    INNER JOIN ActionProperty_Client_Quoting AS APCQ ON APCQ.id=AP.id
                                    INNER JOIN Client_Quoting AS CQ ON CQ.id=APCQ.value
                                    WHERE APT.actionType_id=Action.actionType_id
                                    AND AP.action_id=Action.id
                                    AND AP.deleted = 0
                                    AND APT.typeName = '%s' AND APT.deleted=0
                                    AND CQ.deleted=0 AND CQ.master_id = Client.id))
                                ) AS quotaTypeWTMP'''%(u'Квота пациента'))
#                cols.append('''IF((SELECT QuotaType.class
#                                   FROM QuotaType
#                                   WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
#                                   LIMIT 1) = 0, 1,
#                               IF((SELECT QuotaType.class
#                                   FROM QuotaType
#                                   INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
#                                   WHERE ActionType_QuotaType.master_id = ActionType.id
#                                   AND QuotaType.deleted = 0
#                                   LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
                table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                table = table.leftJoin(tablePerson, tableAction['person_id'].eq(tablePerson['id']))
                cond = [tableEvent['deleted'].eq(0),
                              tableEventType['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableAction['endDate'].isNotNull()
                            ]
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                if isMedicalAidType:
                    table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                    cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if existFlatCode:
                    cond.append(tableActionType['flatCode'].ne(u''))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['endDate'].le(endDateTime))
                if orgStructureIdList:
                    table = table.leftJoin(tableOrgStructure, tableOrgStructure['id'].eq(tablePerson['orgStructure_id']))
                    cond.append(tablePerson['deleted'].eq(0))
                    cond.append(tableOrgStructure['deleted'].eq(0))
                    cond.append(tableOrgStructure['id'].inlist(orgStructureIdList))
                    if isTypeOS == 1:
                        cond.append(u' AND OrgStructure.type != 0')
                    elif isTypeOS == 2:
                        cond.append(u' AND (OrgStructure.type = 0 AND (SELECT getOrgStructureIsType(OrgStructure.id)) = 1)')
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                if not isNomeclature:
                    table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
            actionIdList = []
            for record in records:
                actionId = forceRef(record.value('actionId'))
                serviceType = forceInt(record.value('serviceType'))
                if actionId and actionId not in actionIdList and serviceType == CActionServiceType.operation:
                    actionIdList.append(actionId)
                    eventId = forceRef(record.value('event_id'))
                    iterationNext = True
                    if selectActionType == 2:
                        begDate = forceDate(record.value('begDate'))
                        endDate = forceDate(record.value('endDate'))
                        actionDateList = eventIdDataList.get(eventId, [])
                        for actionDate in actionDateList:
                            actionBegDate = actionDate[0]
                            actionEndDate = actionDate[1]
                            if endDate > actionBegDate and begDate < actionEndDate:
                                iterationNext = True
                            elif endDate == begDate and (endDate >= actionBegDate and begDate <= actionEndDate):
                                iterationNext = True
                            else:
                                iterationNext = False
                    if iterationNext:
                        countSurgery = forceInt(record.value('countSurgery'))
                        quotaTypeWTMP = forceInt(record.value('quotaTypeWTMP'))
                        ageClient = forceInt(record.value('ageClient'))
                        countDeathSurgery = forceInt(record.value('countDeathSurgery'))
                        countComplication = forceInt(record.value('countComplication'))
                        countMorphologicalStudy = forceInt(record.value('countMorphologicalStudy'))
                        name = forceString(record.value('name'))
                        flatCode = forceString(record.value('flatCode'))
                        code = QString(forceString(record.value('code')))
                        MKBRec = normalizeMKB(forceString(record.value('MKB')))
                        surgeryOncology = True if MKBRec in mapMainRows.keys() else False
                        mapCodeToRowIdx = self.setValueMapCodeToRowIdx(mapCodeToRowIdx, u'', u'', quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                        codeList = [QString(code)]
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                        while indexPoint > -1:
                            code.truncate(indexPoint)
                            codeList.append(QString(code))
                            indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                        for code in codeList:
                            if code:
                                if isNomeclature == 2:
                                    codeInDescr = False
                                    for row, rowDescr in enumerate(RowsUsers4000_3):
                                        if code == rowDescr[1]:
                                            codeInDescr = True
                                            break
                                    if codeInDescr:
                                        mapCodeToRowIdx = self.setValueMapCodeToRowIdx(mapCodeToRowIdx, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                                    else:
                                        if not mapCodeToRowIdxAddition.get(code, None):
                                            mapCodeToRowIdxAddition[code] = (name, code, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0)
                                        mapCodeToRowIdxAddition = self.setValueMapCodeToRowIdx(mapCodeToRowIdxAddition, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                                else:
                                    mapCodeToRowIdx = self.setValueMapCodeToRowIdx(mapCodeToRowIdx, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                if selectActionType == 4:
                    actionId = forceRef(record.value('actionId_P'))
                    serviceType = forceInt(record.value('serviceType_P'))
                    if actionId and actionId not in actionIdList and serviceType == CActionServiceType.operation:
                        actionIdList.append(actionId)
                        eventId = forceRef(record.value('event_id_P'))
                        iterationNext = True
                        if iterationNext:
                            countSurgery = forceInt(record.value('countSurgery_P'))
                            quotaTypeWTMP = forceInt(record.value('quotaTypeWTMP_P'))
                            ageClient = forceInt(record.value('ageClient'))
                            countDeathSurgery = forceInt(record.value('countDeathSurgery_P'))
                            countComplication = forceInt(record.value('countComplication_P'))
                            countMorphologicalStudy = forceInt(record.value('countMorphologicalStudy_P'))
                            name = forceString(record.value('name_P'))
                            code = QString(forceString(record.value('code_P')))
                            flatCode = forceString(record.value('flatCode_P'))
                            MKBRec = normalizeMKB(forceString(record.value('MKB_P')))
                            surgeryOncology = True if MKBRec in mapMainRows.keys() else False
                            self.setValueMapCodeToRowIdx(mapCodeToRowIdx, u'', u'', quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                            codeList = [QString(code)]
                            indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                            while indexPoint > -1:
                                code.truncate(indexPoint)
                                codeList.append(QString(code))
                                indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                            for code in codeList:
                                if isNomeclature == 2:
                                    codeInDescr = False
                                    for row, rowDescr in enumerate(RowsUsers4000_3):
                                        if code == rowDescr[1]:
                                            codeInDescr = True
                                            break
                                    if codeInDescr:
                                        mapCodeToRowIdx = self.setValueMapCodeToRowIdx(mapCodeToRowIdx, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                                    else:
                                        if not mapCodeToRowIdxAddition.get(code, None):
                                            mapCodeToRowIdxAddition[code] = (name, code, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0)
                                        mapCodeToRowIdxAddition = self.setValueMapCodeToRowIdx(mapCodeToRowIdxAddition, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
                                else:
                                    self.setValueMapCodeToRowIdx(mapCodeToRowIdx, name, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, surgeryOncology, countMorphologicalStudy, countSurgery, isNomeclature)
        return mapCodeToRowIdx, mapCodeToRowIdxAddition


class CStationaryF14_4300_4301_4302(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.setSelectActionTypeVisible(True)
        self.stationaryF14SetupDialog.cmbSelectActionType.addItem(u'Выписка+внешние События')
        self.stationaryF14SetupDialog.setSelectIsTypeOS(True)
        self.stationaryF14SetupDialog.setMedicalAidTypeVisible(True)
        return result


    def build(self, params):
        begDate = params.get('begDate', QDate())
        endDate = params.get('endDate', QDate())
        orgStructureId = params.get('orgStructureId', None)
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        selectActionType = params.get('selectActionType', 0)
        isMedicalAidType = params.get('isMedicalAidType', 0)
        isTypeOS = params.get('isTypeOS', 0)
        countAction = 0
        doc = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(doc)
        cursor.setCharFormat(CReportBase.ReportTitle)
        cursor.insertText(u'Стационар. Форма 14. Подстрочники (4300), (4301), (4302).')
        cursor.insertBlock()
        self.dumpParams(cursor, params)
        cursor.setCharFormat(CReportBase.ReportBody)
        cursor.insertBlock()
        if (not begDate) or (not endDate):
            currentDate = QDate.currentDate()
            begDate = QDate(currentDate.year(), 1, 1)
            endDate = currentDate
        if begDate and endDate:
            orgStructureIdList = QtGui.qApp.db.getDescendants('OrgStructure', 'parent_id', orgStructureId) if orgStructureId else []
            countAction = self.getSurgery(orgStructureIdList, begDate, endDate, financeId, isNomeclature, selectActionType, isTypeOS=isTypeOS, isMedicalAidType=isMedicalAidType)
        cursor.insertBlock()
        cursor.insertText(u'''(4300) Из числа стентирований (из табл. 4000) (стр.7.5.2.1) – проведено пациентам с инфарктом миокарда %s.'''%(countAction))
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(4301) Из числа операций на сосудах, питающих головной мозг (из табл. 4000) (стр. 8.1.1.) проведено операций при внутримозговом кровоизлиянии __________.''')
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'''(4302) Из числа оперативных вмешательств проведено: по поводу множественной травмы  ____________, нейротравмы  ____________.''')
        cursor.insertBlock()
        cursor.movePosition(QtGui.QTextCursor.End)
        return doc


    def getSurgery(self, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature, selectActionType, isTypeOS=0, isMedicalAidType=0):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        tableContract = db.table('Contract')
        tablePerson = db.table('Person')
        tableOrgStructure = db.table('OrgStructure')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        eventIdDataList = {}
        records = []
        if selectActionType > 0:
            flatCode = ['received%', 'moving%', 'leaved%', 'leaved%'][selectActionType-1]
            nameProperty = [u'Направлен в отделение', u'Отделение пребывания', u'Отделение', u'Отделение'][selectActionType-1]
            cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode(flatCode)),
                          tableEvent['deleted'].eq(0),
                          tableAction['deleted'].eq(0),
                          tableActionType['deleted'].eq(0),
                          tableClient['deleted'].eq(0),
                          tableEventType['deleted'].eq(0)
                        ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            if isMedicalAidType:
                table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
            if bool(begDateTime):
                cond.append(tableAction['endDate'].dateGe(begDateTime))
            if bool(endDateTime):
                cond.append(tableAction['begDate'].dateLe(endDateTime))
            if orgStructureIdList:
                cond.append(getDataOrgStructure_HBDS(nameProperty, orgStructureIdList, isTypeOS))
            if financeId:
                cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
            if selectActionType == 2:
                eventRecords = db.getRecordList(table, 'Event.id AS eventId, Action.begDate, Action.endDate', cond)
                for eventRecord in eventRecords:
                    eventId = forceRef(eventRecord.value('eventId'))
                    dateList = eventIdDataList.get(eventId, [])
                    begDate = forceDate(eventRecord.value('begDate'))
                    endDate = forceDate(eventRecord.value('endDate'))
                    if (begDate, endDate) not in dateList:
                        dateList.append((begDate, endDate))
                    eventIdDataList[eventId] = dateList
                eventIdList = eventIdDataList.keys()
            else:
                eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
                idList = set([])
                if selectActionType == 1:
                    for eventId in eventIdList:
                        idListDescendant = set(db.getDescendants(tableEvent, 'prevEvent_id', eventId))
                        idList |= idListDescendant
                elif selectActionType == 3:
                    idListParents = set(db.getTheseAndParents(tableEvent, 'prevEvent_id', eventIdList))
                    idList |= idListParents
                setEventIdList = set(eventIdList)
                setEventIdList |= idList
                eventIdList = list(setEventIdList)
            if eventIdList:
                order = u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode')
                cols = [u'COUNT(Action.amount) AS countAction']
                table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                cond = [tableAction['event_id'].inlist(eventIdList),
                              tableEvent['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableAction['endDate'].isNotNull()
                            ]
                cond.append(tableRBService['code'].like(u'%7.5.2.1%') if not isNomeclature else tableActionType['flatCode'].like(u'%7.5.2.1%'))
                cond.append(tableAction['MKB'].inlist(u'I21', u'I21.2', u'I21.3', u'I21.4', u'I21.9', u'I22', u'I22.8', u'I22.9', u'I25.2'))
                if selectActionType == 4:
                    tableEvent_P = db.table('Event').alias('Event_P')
                    tableAction_P = db.table('Action').alias('Action_P')
                    tableActionType_P = db.table('ActionType').alias('ActionType_P')
                    tableRBService_P = db.table('rbService').alias('rbService_P')
                    tableA_F = db.table('Action').alias('A_F')
                    tableE_F = db.table('Event').alias('E_F')
                    condA_F = [u'E_F.id = getFirstEventId(Event.id)',
                               tableA_F['deleted'].eq(0),
                               tableE_F['deleted'].eq(0),
                               tableA_F['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%'))
                               ]
                    stmtJOINA = db.selectStmt(u'''Event AS E_F INNER JOIN Action AS A_F ON A_F.event_id = E_F.id''', u'A_F.begDate', condA_F)
                    tableA_E = db.table('Action').alias('A_E')
                    tableAT_E = db.table('ActionType').alias('AT_E')
                    condA_E = [tableA_E['deleted'].eq(0),
                               tableA_E['event_id'].eq(tableEvent_P['id']),
                               tableA_E['endDate'].isNotNull(),
                               tableAT_E['deleted'].eq(0),
                               tableA_E['endDate'].dateLe(tableAction['endDate']),
                               u'DATE(A_E.begDate) >= DATE(('+unicode(stmtJOINA)+u'))'
                               ]
                    tableAE = tableA_E.innerJoin(tableAT_E, tableAT_E['id'].eq(tableA_E['actionType_id']))
                    condA_E.append(tableAT_E['serviceType'].eq(CActionServiceType.operation))
                    if not isNomeclature:
                        tableRB_A = db.table('rbService').alias('RB_A')
                        condRBSA = [tableRB_A['id'].eq(tableAT_E['nomenclativeService_id'])]
                        tableAE = tableAE.innerJoin(tableRB_A, db.joinAnd(condRBSA))
                    table = table.leftJoin(tableEvent_P, db.joinAnd([tableEvent_P['id'].notInlist(eventIdList),
                                                                     tableEvent_P['client_id'].eq(tableClient['id']),
                                                                     tableEvent_P['deleted'].eq(0),
                                                                     tableEvent_P['id'].ne(tableEvent['id']),
                                                                     db.existsStmt(tableAE, condA_E)
                                                                     ]))
                    condJOINAction = [tableAction_P['event_id'].notInlist(eventIdList),
                                      tableAction_P['event_id'].eq(tableEvent_P['id']),
                                      tableAction_P['event_id'].ne(tableEvent['id']),
                                      tableAction_P['endDate'].isNotNull(),
                                      tableAction_P['deleted'].eq(0),
                                      tableEvent_P['deleted'].eq(0),
                                      tableAction_P['endDate'].dateLe(tableAction['endDate']),
                                      u'DATE(Action_P.begDate) >= DATE(('+unicode(stmtJOINA)+u'))'
                                      ]
                    table = table.leftJoin(tableAction_P, db.joinAnd(condJOINAction))
                    condJOINAT = [tableAction_P['actionType_id'].eq(tableActionType_P['id']),
                                  tableActionType_P['deleted'].eq(0)
                                  ]
                    condJOINAT.append(tableActionType_P['serviceType'].eq(CActionServiceType.operation))
                    if not isNomeclature:
                        condRBS = [tableRBService_P['id'].eq(tableActionType_P['nomenclativeService_id'])]
                        table = table.leftJoin(tableRBService_P, db.joinAnd(condRBS))
                    table = table.leftJoin(tableActionType_P, db.joinAnd(condJOINAT))
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                if not isNomeclature:
                    table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                if selectActionType == 4:
                    cond.append(db.joinOr([tableActionType['serviceType'].eq(CActionServiceType.operation), tableActionType['id'].inlist(getActionTypeIdListByFlatCode('leaved%'))]))
                else:
                    cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                records = db.getRecordList(table, cols, cond, order)
        else:
            cols = [u'COUNT(Action.amount) AS countAction']
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            table = table.leftJoin(tablePerson, tableAction['person_id'].eq(tablePerson['id']))
            cond = [tableEvent['deleted'].eq(0),
                          tableEventType['deleted'].eq(0),
                          tableAction['deleted'].eq(0),
                          tableActionType['deleted'].eq(0),
                          tableClient['deleted'].eq(0),
                          tableAction['endDate'].isNotNull()
                        ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            if isMedicalAidType:
                table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
            if bool(begDateTime):
                cond.append(tableAction['endDate'].dateGe(begDateTime))
            if bool(endDateTime):
                cond.append(tableAction['endDate'].dateLe(endDateTime))
            if orgStructureIdList:
                table = table.leftJoin(tableOrgStructure, tableOrgStructure['id'].eq(tablePerson['orgStructure_id']))
                cond.append(tablePerson['deleted'].eq(0))
                cond.append(tableOrgStructure['deleted'].eq(0))
                cond.append(tableOrgStructure['id'].inlist(orgStructureIdList))
                if isTypeOS == 1:
                    cond.append(u' AND OrgStructure.type != 0')
                elif isTypeOS == 2:
                    cond.append(u' AND (OrgStructure.type = 0 AND (SELECT getOrgStructureIsType(OrgStructure.id)) = 1)')
            if financeId:
                cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
            cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
            if not isNomeclature:
                table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
            cond.append(tableRBService['code'].like(u'%7.5.2.1%') if not isNomeclature else tableActionType['flatCode'].like(u'%7.5.2.1%'))
            cond.append(tableAction['MKB'].inlist([u'I21', u'I21.2', u'I21.3', u'I21.4', u'I21.9', u'I22', u'I22.8', u'I22.9', u'I25.2']))
            records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
        countAction = 0
        for record in records:
            countAction += forceInt(record.value('countAction'))
        return countAction


class CStationaryF144001(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.setSelectActionTypeVisible(True)
        self.stationaryF14SetupDialog.setSelectIsTypeOS(True)
        self.stationaryF14SetupDialog.setItemsTypeSurgery([u'Пользовательский с детализацией по дополнительным операциям'])
        return result


    def getDefaultParams(self):
        result = CStationaryF014.getDefaultParams(self)
        result['ageFrom']     = 55
        result['ageTo']       = 150
        return result


    def build(self, params):
        db = QtGui.qApp.db
        orgStructureId = params.get('orgStructureId', None)
        orgStructureIdList = db.getDescendants('OrgStructure', 'parent_id', orgStructureId) if orgStructureId else []
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        selectActionType = params.get('selectActionType', 0)
        isMedicalAidType = params.get('isMedicalAidType', 0)
        isTypeOS = params.get('isTypeOS', 0)
        ageFrom = params.get('ageFrom', 55)
        ageTo = params.get('ageTo', 150)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            if isNomeclature:
                rowSize = 8
                reportMainData = [0]*rowSize
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'3.1.Хирургическая работа организации\n(лица старше трудоспособного возраста)\n(4001)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('23%',[u'Наименование операции', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('12%', [u'Число операций, проведенных в стационаре', u'всего', u'(из гр.3 т.4000)', u'3'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них: с применением высоких медицинских технологий (ВМТ)', u'(из гр.7 т.4000)', u'4'], CReportBase.AlignLeft),
                    ('12%', [u'Число операций, при которых наблюдались осложнения в стационаре',u'всего', u'(из гр.11 т.4000)', u'5'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них: после операций с применением ВМТ', u'(из гр.15 т.4000)', u'6'], CReportBase.AlignLeft),
                    ('12%', [u'Умерло оперированных в стационаре',u'всего', u'(из гр.19 т.4000)', u'7'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них умерло: после операций проведённых с ВМТ', u'(из гр.23 т.4000)', u'8'], CReportBase.AlignLeft),
                   ]
            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 3, 1)
            table.mergeCells(0, 1, 3, 1)
            table.mergeCells(0, 2, 1, 2)
            table.mergeCells(0, 4, 1, 2)
            table.mergeCells(0, 6, 1, 2)
            mapCodeToRowIdx = self.getRowsSurgery(isNomeclature)
            mapCodesToRowIdx, mapCodeToRowIdxAddition = self.getSurgery(mapCodeToRowIdx, orgStructureIdList, begDate, endDate, financeId, isNomeclature, selectActionType, ageFrom, ageTo, isTypeOS=isTypeOS, isMedicalAidType=isMedicalAidType)
            keys = mapCodesToRowIdx.keys()
            keys.sort()
            if isNomeclature:
                for row, rowDescr in enumerate(RowsUsers4000):
                    rowUsers = rowDescr[1]
                    if rowUsers == u'1':
                        rowUsers = u''
                    i = table.addRow()
                    table.setText(i, 0, rowDescr[0])
                    table.setText(i, 1, rowDescr[1])
                    items = mapCodesToRowIdx.get(QString(rowUsers), reportMainData)
                    for col, item in enumerate(items):
                        if col > 1:
                            table.setText(i, col, forceString(item))
                if mapCodeToRowIdxAddition:
                    i = table.addRow()
                    table.setText(i, 0, u'Дополнительные операции')
                    table.mergeCells(i, 0, 1, len(cols))
                    for values in mapCodeToRowIdxAddition.values():
                        i = table.addRow()
                        for col, val in enumerate(values):
                            table.setText(i, col, forceString(val))
            else:
                for key in keys:
                    items = mapCodesToRowIdx[key]
                    i = table.addRow()
                    for col, item in enumerate(items):
                        table.setText(i, col, forceString(item))
        return doc


    def getRowsSurgery(self, isNomeclature):
        mapCodeToRowIdx = {}
        db = QtGui.qApp.db
        tableActionType = db.table('ActionType')
        tableRBService = db.table('rbService')
        cond = [tableActionType['deleted'].eq(0)]
        cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
        table = tableActionType
        if not isNomeclature:
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
        stmt = db.selectStmt(table, [tableActionType['flatCode'], tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'), tableActionType['name'],
                                               tableActionType['group_id'], tableActionType['id'].alias('actionTypeId')], cond, u'%s , ActionType.group_id'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
        records = db.query(stmt)
        if not isNomeclature:
            numbers = [1]
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = code.split('.')
                    lenCodeList = len(codeList)
                    if len(numbers) < lenCodeList:
                        for i in range(lenCodeList - len(numbers)):
                            numbers.append(0)
                    elif len(numbers) > lenCodeList:
                        for i in range(len(numbers) - lenCodeList):
                            numbers[len(numbers)- (1 + i)] = 0
                    numbers[lenCodeList-1] += 1
                    rowIdx = u'.'.join(str(number) for number in numbers)
                    mapCodeToRowIdx[code] = (name, rowIdx, 0, 0, 0, 0, 0, 0)
                    rowIdx = []
        else:
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = [QString(code)]
                    indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    while indexPoint > -1:
                        code.truncate(indexPoint)
                        codeList.append(QString(code))
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    codeList.sort()
                    for code in codeList:
                        if not mapCodeToRowIdx.get(code, None):
                            mapCodeToRowIdx[code] = (name, code, 0, 0, 0, 0, 0, 0)
        return mapCodeToRowIdx


    def getSurgery(self, mapCodeToRowIdx, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature, selectActionType, ageFrom, ageTo, isTypeOS=0, isMedicalAidType=0):
        def setValueMapCodeToRowIdx(mapCodeToRowIdx, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery):
            if mapCodeToRowIdx.get(code, None):
                items = mapCodeToRowIdx[code]
                valueName = items[0]
                valueRow = items[1]
                valueSurgery = items[2]
                valueSurgeryWTMP = items[3]
                valueComplication = items[4]
                valueComplicationWTMP = items[5]
                valueDeath = items[6]
                valueDeathWTMP = items[7]
                valueSurgery += countSurgery
                if quotaTypeWTMP:
                    valueSurgeryWTMP += countSurgery
                if countComplication:
                    valueComplication += countSurgery
                if countComplication and quotaTypeWTMP:
                    valueComplicationWTMP += countSurgery
                if countDeathSurgery:
                    valueDeath += 1
                if countDeathSurgery and quotaTypeWTMP:
                    valueDeathWTMP += 1

                mapCodeToRowIdx[code] = (valueName, valueRow, valueSurgery, valueSurgeryWTMP, valueComplication, valueComplicationWTMP,
                                         valueDeath, valueDeathWTMP)
            return mapCodeToRowIdx
        if mapCodeToRowIdx:
            mapCodeToRowIdxAddition = {}
            db = QtGui.qApp.db
            tableEvent = db.table('Event')
            tableAction = db.table('Action')
            tableActionType = db.table('ActionType')
            tableClient = db.table('Client')
            tableRBService = db.table('rbService')
            tableEventType = db.table('EventType')
            tableRBMedicalAidType = db.table('rbMedicalAidType')
            tableContract = db.table('Contract')
            tablePerson = db.table('Person')
            tableOrgStructure = db.table('OrgStructure')
            table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            eventIdDataList = {}
            records = []
            if selectActionType > 0:
                flatCode = ['received%', 'moving%', 'leaved%'][selectActionType-1]
                nameProperty = [u'Направлен в отделение', u'Отделение пребывания', u'Отделение'][selectActionType-1]
                cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode(flatCode)),
                              tableEvent['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableEventType['deleted'].eq(0)
                            ]
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                if isMedicalAidType:
                    table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['begDate'].le(endDateTime))
                if orgStructureIdList:
                    cond.append(getDataOrgStructure_HBDS(nameProperty, orgStructureIdList, isTypeOS))
                cond.append('Action.endDate >= ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2 AND %d < 55, 55, IF(Client.sex = 1 AND %d < 60, 60, %d)) YEAR)'%(ageFrom, ageFrom, ageFrom))
                cond.append(tableClient['sex'].ne(0))
                cond.append('Action.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL %d YEAR),1)'%(ageTo+1))
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                if selectActionType == 2:
                    eventRecords = db.getRecordList(table, 'Event.id AS eventId, Action.begDate, Action.endDate', cond)
                    for eventRecord in eventRecords:
                        eventId = forceRef(eventRecord.value('eventId'))
                        dateList = eventIdDataList.get(eventId, [])
                        begDate = forceDate(eventRecord.value('begDate'))
                        endDate = forceDate(eventRecord.value('endDate'))
                        if (begDate, endDate) not in dateList:
                            dateList.append((begDate, endDate))
                        eventIdDataList[eventId] = dateList
                    eventIdList = eventIdDataList.keys()
                else:
                    eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
                    idList = set([])
                    if selectActionType == 1:
                        for eventId in eventIdList:
                            idListDescendant = set(db.getDescendants(tableEvent, 'prevEvent_id', eventId))
                            idList |= idListDescendant
                    elif selectActionType == 3:
                        idListParents = set(db.getTheseAndParents(tableEvent, 'prevEvent_id', eventIdList))
                        idList |= idListParents
                    setEventIdList = set(eventIdList)
                    setEventIdList |= idList
                    eventIdList = list(setEventIdList)
                if eventIdList:
                    cols = [tableAction['id'].alias('actionId'),
                                tableAction['event_id'],
                                tableAction['amount'].alias('countSurgery'),
                                tableAction['MKB'],
                                tableAction['begDate'],
                                tableAction['endDate'],
                                tableActionType['id'].alias('actionTypeId'),
                                tableActionType['group_id'].alias('groupId'),
                                tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                                tableActionType['name']
                                ]
                    cols.append('''IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1,
                                   IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                       WHERE ActionType_QuotaType.master_id = ActionType.id
                                       AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                    cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                    cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                    cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                    cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                    table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                    table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                    table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                    cond = [tableAction['event_id'].inlist(eventIdList),
                                  tableEvent['deleted'].eq(0),
                                  tableAction['deleted'].eq(0),
                                  tableActionType['deleted'].eq(0),
                                  tableClient['deleted'].eq(0),
                                  tableAction['endDate'].isNotNull()
                                ]
                    socStatusClassId = self.params.get('socStatusClassId', None)
                    socStatusTypeId  = self.params.get('socStatusTypeId', None)
                    if socStatusClassId or socStatusTypeId:
                        tableClientSocStatus = db.table('ClientSocStatus')
                        if begDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                               tableClientSocStatus['endDate'].ge(begDateTime)
                                                              ]),
                                                   tableClientSocStatus['endDate'].isNull()
                                                  ]))
                        if endDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                               tableClientSocStatus['begDate'].le(endDateTime)
                                                              ]),
                                                   tableClientSocStatus['begDate'].isNull()
                                                  ]))
                        table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                        if socStatusClassId:
                            cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                        if socStatusTypeId:
                            cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                        cond.append(tableClientSocStatus['deleted'].eq(0))
                    cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                    if not isNomeclature:
                        table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                    records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
            else:
                cols = [tableAction['id'].alias('actionId'),
                            tableAction['event_id'],
                            tableAction['amount'].alias('countSurgery'),
                            tableAction['MKB'],
                            tableAction['begDate'],
                            tableAction['endDate'],
                            tableActionType['id'].alias('actionTypeId'),
                            tableActionType['group_id'].alias('groupId'),
                            tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                            tableActionType['name']
                            ]
                cols.append('''IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1,
                               IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                   WHERE ActionType_QuotaType.master_id = ActionType.id
                                   AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
                table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                table = table.leftJoin(tablePerson, tableAction['person_id'].eq(tablePerson['id']))
                cond = [tableEvent['deleted'].eq(0),
                              tableEventType['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableAction['endDate'].isNotNull()
                            ]
                cond.append('Action.endDate >= ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2, 55, IF(Client.sex = 1, 60, 55)) YEAR)')
                cond.append(tableClient['sex'].ne(0))
                cond.append('Action.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL %d YEAR),1)'%(ageTo+1))
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                if isMedicalAidType:
                    table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['endDate'].le(endDateTime))
                if orgStructureIdList:
                    tableOrgStructure = db.table('OrgStructure')
                    table = table.leftJoin(tableOrgStructure, tableOrgStructure['id'].eq(tablePerson['orgStructure_id']))
                    cond.append(tablePerson['deleted'].eq(0))
                    cond.append(tablePerson['orgStructure_id'].inlist(orgStructureIdList))
                    cond.append(tableOrgStructure['deleted'].eq(0))
                    cond.append(tableOrgStructure['id'].inlist(orgStructureIdList))
                    if isTypeOS == 1:
                        cond.append(u' AND OrgStructure.type != 0')
                    elif isTypeOS == 2:
                        cond.append(u' AND (OrgStructure.type = 0 AND (SELECT getOrgStructureIsType(OrgStructure.id)) = 1)')
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                if not isNomeclature:
                    table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
            for record in records:
                eventId = forceRef(record.value('event_id'))
                iterationNext = True
                if selectActionType == 2:
                    begDate = forceDate(record.value('begDate'))
                    endDate = forceDate(record.value('endDate'))
                    actionDateList = eventIdDataList.get(eventId, [])
                    for actionDate in actionDateList:
                        actionBegDate = actionDate[0]
                        actionEndDate = actionDate[1]
                        if endDate > actionBegDate and begDate < actionEndDate:
                            iterationNext = True
                        elif endDate == begDate and (endDate >= actionBegDate and begDate <= actionEndDate):
                            iterationNext = True
                        else:
                            iterationNext = False
                if iterationNext:
                    countSurgery = forceInt(record.value('countSurgery'))
                    quotaTypeWTMP = forceInt(record.value('quotaTypeWTMP'))
                    ageClient = forceInt(record.value('ageClient'))
                    countDeathSurgery = forceInt(record.value('countDeathSurgery'))
                    countComplication = forceInt(record.value('countComplication'))
                    name = forceString(record.value('name'))
                    code = QString(forceString(record.value('code')))
#                    MKBRec = normalizeMKB(forceString(record.value('MKB')))
                    setValueMapCodeToRowIdx(mapCodeToRowIdx, u'', quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
                    codeList = [QString(code)]
                    indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    while indexPoint > -1:
                        code.truncate(indexPoint)
                        codeList.append(QString(code))
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    for code in codeList:
                        if code:
                            if isNomeclature == 2:
                                codeInDescr = False
                                for row, rowDescr in enumerate(RowsUsers4000):
                                    if code == rowDescr[1]:
                                        codeInDescr = True
                                        break
                                if codeInDescr:
                                    mapCodeToRowIdx = setValueMapCodeToRowIdx(mapCodeToRowIdx, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
                                else:
                                    if not mapCodeToRowIdxAddition.get(code, None):
                                        mapCodeToRowIdxAddition[code] = (name, code, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0)
                                    mapCodeToRowIdxAddition = setValueMapCodeToRowIdx(mapCodeToRowIdxAddition, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
                            else:
                                mapCodeToRowIdx = setValueMapCodeToRowIdx(mapCodeToRowIdx, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
        return mapCodeToRowIdx, mapCodeToRowIdxAddition


class CStationaryF144001A(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        self.stationaryF14SetupDialog = result
        self.stationaryF14SetupDialog.setSelectActionTypeVisible(True)
        self.stationaryF14SetupDialog.setSelectIsTypeOS(True)
        return result


    def getDefaultParams(self):
        result = CStationaryF014.getDefaultParams(self)
        result['ageFrom']     = 18
        result['ageTo']       = 60
        return result


    def build(self, params):
        db = QtGui.qApp.db
        orgStructureId = params.get('orgStructureId', None)
        orgStructureIdList = db.getDescendants('OrgStructure', 'parent_id', orgStructureId) if orgStructureId else []
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        selectActionType = params.get('selectActionType', 0)
        ageFrom = params.get('ageFrom', 55)
        ageTo = params.get('ageTo', 150)
        isTypeOS = params.get('isTypeOS', 0)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            if isNomeclature:
                rowSize = 8
                reportMainData = [0]*rowSize
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'Хирургическая работа организации\n(лица трудоспособного возраста)\n(4001а)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('23%',[u'Наименование операции', u'', u'', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'', u'', u'2'], CReportBase.AlignLeft),
                    ('12%', [u'Число операций, проведенных в стационаре', u'всего', u'(из гр.3 т.4000)', u'3'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них: с применением высоких медицинских технологий (ВМТ)', u'(из гр.7 т.4000)', u'4'], CReportBase.AlignLeft),
                    ('12%', [u'Число операций, при которых наблюдались осложнения в стационаре',u'всего', u'(из гр.11 т.4000)', u'5'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них: после операций с применением ВМТ', u'(из гр.15 т.4000)', u'6'], CReportBase.AlignLeft),
                    ('12%', [u'Умерло оперированных в стационаре',u'всего', u'(из гр.19 т.4000)', u'7'], CReportBase.AlignLeft),
                    ('12%', [u'', u'из них умерло: после операций проведённых с ВМТ', u'(из гр.23 т.4000)', u'8'], CReportBase.AlignLeft),
                   ]
            table = createTable(cursor, cols)
            table.mergeCells(0, 0, 3, 1)
            table.mergeCells(0, 1, 3, 1)
            table.mergeCells(0, 2, 1, 2)
            table.mergeCells(0, 4, 1, 2)
            table.mergeCells(0, 6, 1, 2)
            mapCodeToRowIdx = self.getRowsSurgery(isNomeclature)
            mapCodesToRowIdx = self.getSurgery(mapCodeToRowIdx, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature, selectActionType, ageFrom, ageTo, isTypeOS=isTypeOS)
            keys = mapCodesToRowIdx.keys()
            keys.sort()
            if isNomeclature:
                for row, rowDescr in enumerate(RowsUsers4000):
                    rowUsers = rowDescr[1]
                    if rowUsers == u'1':
                        rowUsers = u''
                    i = table.addRow()
                    table.setText(i, 0, rowDescr[0])
                    table.setText(i, 1, rowDescr[1])
                    items = mapCodesToRowIdx.get(QString(rowUsers), reportMainData)
                    for col, item in enumerate(items):
                        if col > 1:
                            table.setText(i, col, forceString(item))
            else:
                for key in keys:
                    items = mapCodesToRowIdx[key]
                    i = table.addRow()
                    for col, item in enumerate(items):
                        table.setText(i, col, forceString(item))
        return doc


    def getRowsSurgery(self, isNomeclature):
        mapCodeToRowIdx = {}
        db = QtGui.qApp.db
        tableActionType = db.table('ActionType')
        tableRBService = db.table('rbService')
        cond = [tableActionType['deleted'].eq(0)]
        cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
        table = tableActionType
        if not isNomeclature:
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
        stmt = db.selectStmt(table, [tableActionType['flatCode'], tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'), tableActionType['name'],
                                               tableActionType['group_id'], tableActionType['id'].alias('actionTypeId')], cond, u'%s , ActionType.group_id'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
        records = db.query(stmt)
        if not isNomeclature:
            numbers = [1]
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = code.split('.')
                    lenCodeList = len(codeList)
                    if len(numbers) < lenCodeList:
                        for i in range(lenCodeList - len(numbers)):
                            numbers.append(0)
                    elif len(numbers) > lenCodeList:
                        for i in range(len(numbers) - lenCodeList):
                            numbers[len(numbers)- (1 + i)] = 0
                    numbers[lenCodeList-1] += 1
                    rowIdx = u'.'.join(str(number) for number in numbers)
                    mapCodeToRowIdx[code] = (name, rowIdx, 0, 0, 0, 0, 0, 0)
                    rowIdx = []
        else:
            mapCodeToRowIdx[''] = (u'Всего операций', 1, 0, 0, 0, 0, 0, 0)
            while records.next():
                record = records.record()
                code = QString(forceString(record.value('code')))
                name = forceString(record.value('name'))
                if not mapCodeToRowIdx.get(code, None):
                    codeList = [QString(code)]
                    indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    while indexPoint > -1:
                        code.truncate(indexPoint)
                        codeList.append(QString(code))
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    codeList.sort()
                    for code in codeList:
                        if not mapCodeToRowIdx.get(code, None):
                            mapCodeToRowIdx[code] = (name, code, 0, 0, 0, 0, 0, 0)
        return mapCodeToRowIdx


    def getSurgery(self, mapCodeToRowIdx, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature, selectActionType, ageFrom, ageTo, isTypeOS=0):
        def setValueMapCodeToRowIdx(mapCodeToRowIdx, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery):
            if mapCodeToRowIdx.get(code, None):
                items = mapCodeToRowIdx[code]
                valueName = items[0]
                valueRow = items[1]
                valueSurgery = items[2]
                valueSurgeryWTMP = items[3]
                valueComplication = items[4]
                valueComplicationWTMP = items[5]
                valueDeath = items[6]
                valueDeathWTMP = items[7]
                valueSurgery += countSurgery
                if quotaTypeWTMP:
                    valueSurgeryWTMP += countSurgery
                if countComplication:
                    valueComplication += countSurgery
                if countComplication and quotaTypeWTMP:
                    valueComplicationWTMP += countSurgery
                if countDeathSurgery:
                    valueDeath += 1
                if countDeathSurgery and quotaTypeWTMP:
                    valueDeathWTMP += 1

                mapCodeToRowIdx[code] = (valueName, valueRow, valueSurgery, valueSurgeryWTMP, valueComplication, valueComplicationWTMP,
                                         valueDeath, valueDeathWTMP)
        if mapCodeToRowIdx:
            db = QtGui.qApp.db
            tableEvent = db.table('Event')
            tableAction = db.table('Action')
            tableActionType = db.table('ActionType')
            tableClient = db.table('Client')
            tableRBService = db.table('rbService')
            tableEventType = db.table('EventType')
            tableRBMedicalAidType = db.table('rbMedicalAidType')
            tableContract = db.table('Contract')
            tablePerson = db.table('Person')
            table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
            table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            eventIdDataList = {}
            records = []
            if selectActionType > 0:
                flatCode = ['received%', 'moving%', 'leaved%'][selectActionType-1]
                nameProperty = [u'Направлен в отделение', u'Отделение пребывания', u'Отделение'][selectActionType-1]
                cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode(flatCode)),
                              tableEvent['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableEventType['deleted'].eq(0)
                            ]
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['begDate'].le(endDateTime))
                if orgStructureIdList:
                    cond.append(getDataOrgStructure_HBDS(nameProperty, orgStructureIdList, isTypeOS))
                cond.append('Action.endDate >= ADDDATE(Client.birthDate, INTERVAL 18 YEAR)')
                cond.append('Action.endDate < ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2, 55, IF(Client.sex = 1, 60, 55)) YEAR)')
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                if selectActionType == 2:
                    eventRecords = db.getRecordList(table, 'Event.id AS eventId, Action.begDate, Action.endDate', cond)
                    for eventRecord in eventRecords:
                        eventId = forceRef(eventRecord.value('eventId'))
                        dateList = eventIdDataList.get(eventId, [])
                        begDate = forceDate(eventRecord.value('begDate'))
                        endDate = forceDate(eventRecord.value('endDate'))
                        if (begDate, endDate) not in dateList:
                            dateList.append((begDate, endDate))
                        eventIdDataList[eventId] = dateList
                    eventIdList = eventIdDataList.keys()
                else:
                    eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
                    idList = set([])
                    if selectActionType == 1:
                        for eventId in eventIdList:
                            idListDescendant = set(db.getDescendants(tableEvent, 'prevEvent_id', eventId))
                            idList |= idListDescendant
                    elif selectActionType == 3:
                        idListParents = set(db.getTheseAndParents(tableEvent, 'prevEvent_id', eventIdList))
                        idList |= idListParents
                    setEventIdList = set(eventIdList)
                    setEventIdList |= idList
                    eventIdList = list(setEventIdList)
                if eventIdList:
                    cols = [tableAction['id'].alias('actionId'),
                                tableAction['event_id'],
                                tableAction['amount'].alias('countSurgery'),
                                tableAction['MKB'],
                                tableAction['begDate'],
                                tableAction['endDate'],
                                tableActionType['id'].alias('actionTypeId'),
                                tableActionType['group_id'].alias('groupId'),
                                tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                                tableActionType['name']
                                ]
                    cols.append('''IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1,
                                   IF((SELECT QuotaType.class
                                       FROM QuotaType
                                       INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                       WHERE ActionType_QuotaType.master_id = ActionType.id
                                       AND QuotaType.deleted = 0
                                       LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                    cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                    cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                    cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                    cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                    table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                    table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                    table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                    cond = [tableAction['event_id'].inlist(eventIdList),
                                  tableEvent['deleted'].eq(0),
                                  tableAction['deleted'].eq(0),
                                  tableActionType['deleted'].eq(0),
                                  tableClient['deleted'].eq(0),
                                  tableAction['endDate'].isNotNull()
                                ]
                    socStatusClassId = self.params.get('socStatusClassId', None)
                    socStatusTypeId  = self.params.get('socStatusTypeId', None)
                    if socStatusClassId or socStatusTypeId:
                        tableClientSocStatus = db.table('ClientSocStatus')
                        if begDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                               tableClientSocStatus['endDate'].ge(begDateTime)
                                                              ]),
                                                   tableClientSocStatus['endDate'].isNull()
                                                  ]))
                        if endDateTime:
                            cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                               tableClientSocStatus['begDate'].le(endDateTime)
                                                              ]),
                                                   tableClientSocStatus['begDate'].isNull()
                                                  ]))
                        table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                        if socStatusClassId:
                            cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                        if socStatusTypeId:
                            cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                        cond.append(tableClientSocStatus['deleted'].eq(0))
                    cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                    if not isNomeclature:
                        table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                    records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
            else:
                cols = [tableAction['id'].alias('actionId'),
                            tableAction['event_id'],
                            tableAction['amount'].alias('countSurgery'),
                            tableAction['MKB'],
                            tableAction['begDate'],
                            tableAction['endDate'],
                            tableActionType['id'].alias('actionTypeId'),
                            tableActionType['group_id'].alias('groupId'),
                            tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code'),
                            tableActionType['name']
                            ]
                cols.append('''IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1,
                               IF((SELECT QuotaType.class
                                   FROM QuotaType
                                   INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                                   WHERE ActionType_QuotaType.master_id = ActionType.id
                                   AND QuotaType.deleted = 0
                                   LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
                cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
                cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
                cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
                cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
                table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
                table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
                table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
                table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
                table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
                table = table.leftJoin(tablePerson, tableAction['person_id'].eq(tablePerson['id']))
                cond = [tableEvent['deleted'].eq(0),
                              tableEventType['deleted'].eq(0),
                              tableAction['deleted'].eq(0),
                              tableActionType['deleted'].eq(0),
                              tableClient['deleted'].eq(0),
                              tableAction['endDate'].isNotNull()
                            ]
                cond.append('Action.endDate >= ADDDATE(Client.birthDate, INTERVAL 18 YEAR)')
                cond.append('Action.endDate < ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2, 55, IF(Client.sex = 1, 60, 55)) YEAR)')
                socStatusClassId = self.params.get('socStatusClassId', None)
                socStatusTypeId  = self.params.get('socStatusTypeId', None)
                if socStatusClassId or socStatusTypeId:
                    tableClientSocStatus = db.table('ClientSocStatus')
                    if begDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                           tableClientSocStatus['endDate'].ge(begDateTime)
                                                          ]),
                                               tableClientSocStatus['endDate'].isNull()
                                              ]))
                    if endDateTime:
                        cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                           tableClientSocStatus['begDate'].le(endDateTime)
                                                          ]),
                                               tableClientSocStatus['begDate'].isNull()
                                              ]))
                    table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                    if socStatusClassId:
                        cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                    if socStatusTypeId:
                        cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                    cond.append(tableClientSocStatus['deleted'].eq(0))
                cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
                if bool(begDateTime):
                    cond.append(tableAction['endDate'].ge(begDateTime))
                if bool(endDateTime):
                    cond.append(tableAction['endDate'].le(endDateTime))
                if orgStructureIdList:
                    cond.append(tablePerson['deleted'].eq(0))
                    cond.append(tablePerson['orgStructure_id'].inlist(orgStructureIdList))
                if financeId:
                    cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
                    table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
                cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
                if not isNomeclature:
                    table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                records = db.getRecordList(table, cols, cond, u'ActionType.group_id, %s'%(u'rbService.code' if not isNomeclature else u'ActionType.flatCode'))
            for record in records:
                eventId = forceRef(record.value('event_id'))
                iterationNext = True
                if selectActionType == 2:
                    begDate = forceDate(record.value('begDate'))
                    endDate = forceDate(record.value('endDate'))
                    actionDateList = eventIdDataList.get(eventId, [])
                    for actionDate in actionDateList:
                        actionBegDate = actionDate[0]
                        actionEndDate = actionDate[1]
                        if endDate > actionBegDate and begDate < actionEndDate:
                            iterationNext = True
                        elif endDate == begDate and (endDate >= actionBegDate and begDate <= actionEndDate):
                            iterationNext = True
                        else:
                            iterationNext = False
                if iterationNext:
                    countSurgery = forceInt(record.value('countSurgery'))
                    quotaTypeWTMP = forceInt(record.value('quotaTypeWTMP'))
                    ageClient = forceInt(record.value('ageClient'))
                    countDeathSurgery = forceInt(record.value('countDeathSurgery'))
                    countComplication = forceInt(record.value('countComplication'))
                    code = QString(forceString(record.value('code')))
#                    MKBRec = normalizeMKB(forceString(record.value('MKB')))
                    setValueMapCodeToRowIdx(mapCodeToRowIdx, u'', quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
                    codeList = [QString(code)]
                    indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    while indexPoint > -1:
                        code.truncate(indexPoint)
                        codeList.append(QString(code))
                        indexPoint = code.lastIndexOf(u'.', -1, Qt.CaseInsensitive)
                    for code in codeList:
                        if code:
                            setValueMapCodeToRowIdx(mapCodeToRowIdx, code, quotaTypeWTMP, ageClient, countDeathSurgery, countComplication, countSurgery)
        return mapCodeToRowIdx


class CStationaryF144002(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            rowSize = 4
            mapRowsChildren4002 = createMapCodeToRowIdx( [row[2] for row in RowsChildren4002] )
            reportMainData = [ [0]*rowSize for row in xrange(len(RowsChildren4002)) ]
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'Операции у детей в возрасте до 1 года\n(4002)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('22%',[u'Наименование операции',u'1'], CReportBase.AlignLeft),
                    ('3%', [u'№ строки', u'2'], CReportBase.AlignLeft),
                    ('15%', [u'Коды по МКБ-10', u''], CReportBase.AlignLeft),
                    ('15%', [u'Число операций в стационаре', u'3'], CReportBase.AlignLeft),
                    ('15%', [u'из них операций с применением высоких медицинских технологий (ВМП)', u'4'], CReportBase.AlignLeft),
                    ('15%', [u'Число операций, при которых наблюдались осложнения в стационаре', u'5'], CReportBase.AlignLeft),
                    ('15%', [u'Умерло оперированных в стационаре', u'6'], CReportBase.AlignLeft)
                   ]
            table = createTable(cursor, cols)
            records = self.getRowsChildren4002(orgStructureIdList, begDateTime, endDateTime)
            for record in records:
                MKBRec = normalizeMKB(forceString(record.value('MKB')))
                birthGestationalAge = forceInt(record.value('birthGestationalAge'))
                quotaTypeWTMP = forceInt(record.value('quotaTypeWTMP'))
                countDeathSurgery = forceInt(record.value('countDeathSurgery'))
                countComplication = forceInt(record.value('countComplication'))
                for row in mapRowsChildren4002.get(MKBRec, []):
                    reportLine = reportMainData[row]
                    if row == 2 or row == 4 or row == 6 or row == 8 or row == 10 or row == 12 or row == 13:
                        if birthGestationalAge >= 22 and birthGestationalAge <= 37:
                            reportLine[0] += 1
                            if quotaTypeWTMP:
                                reportLine[1] += 1
                            if countComplication:
                                reportLine[2] += 1
                            if countDeathSurgery:
                                reportLine[3] += 1
                    else:
                        reportLine[0] += 1
                        if quotaTypeWTMP:
                            reportLine[1] += 1
                        if countComplication:
                            reportLine[2] += 1
                        if countDeathSurgery:
                            reportLine[3] += 1
            for row, rowDescr in enumerate(RowsChildren4002):
                reportLine = reportMainData[row]
                i = table.addRow()
                name, line, codeMKB = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
                table.setText(i, 2, codeMKB)
                for col in xrange(rowSize):
                    table.setText(i, 3+col, reportLine[col])
        return doc


    def getRowsChildren4002(self, orgStructureIdList, begDateTime, endDateTime, isHospital = None):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableDiagnosis = db.table('Diagnosis')
        tableDiagnostic = db.table('Diagnostic')
        tableRBDiagnosisType = db.table('rbDiagnosisType')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')

        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        cond.append('age(Client.birthDate, Event.setDate) <= 1')
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].ge(begDateTime), tableAction['begDate'].le(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].ge(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].le(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].ge(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id'],
                    tableDiagnosis['MKB'],
                    tableClient['birthGestationalAge']
                    ]
            cols.append('''IF((SELECT QuotaType.class
                               FROM QuotaType
                               WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                               LIMIT 1) = 0, 1,
                           IF((SELECT QuotaType.class
                               FROM QuotaType
                               INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                               WHERE ActionType_QuotaType.master_id = ActionType.id
                               AND QuotaType.deleted = 0
                               LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
            cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
            cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))

            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            table = table.innerJoin(tableDiagnostic, tableEvent['id'].eq(tableDiagnostic['event_id']))
            table = table.innerJoin(tableDiagnosis, tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']))
            table = table.innerJoin(tableRBDiagnosisType, tableDiagnostic['diagnosisType_id'].eq(tableRBDiagnosisType['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull(),
                    tableDiagnosis['deleted'].eq(0),
                    tableDiagnostic['deleted'].eq(0)
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2' AND Diagnostic.person_id = Event.execPerson_id AND (NOT EXISTS (SELECT DC.id FROM Diagnostic AS DC INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id WHERE DT.code = '1' AND DC.event_id = Event.id LIMIT 1)))''')
            cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
            return db.getRecordList(table, cols, cond)
        return []


class CStationaryF144100(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'(4100)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('22%',[u'Строка 1'], CReportBase.AlignLeft),
                    ('3%', [u'№ графы'], CReportBase.AlignLeft),
                    ('75%', [u'Число'], CReportBase.AlignLeft)
                   ]
            table = createTable(cursor, cols)
            records = self.getOperation(orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature)
            reportLine = [0]*10
            eventIdList = []
            for record in records:
                eventId = forceRef(record.value('event_id'))
                if eventId  and eventId not in eventIdList:
                    eventIdList.append(eventId)
                reportLine[0] += 1
                ageClient = forceInt(record.value('ageClient'))
                if ageClient:
                    reportLine[2] += 1
                if forceInt(record.value('quotaTypeWTMP')):
                    reportLine[1] += 1
                    if ageClient:
                        reportLine[3] += 1
            if eventIdList:
                records = self.getAnesthesia(eventIdList, begDateTime, endDateTime)
                for record in records:
                    if forceInt(record.value('countDeathSurgery')):
                        reportLine[9] += 1
                    reportLine[8] += 1
            reportLine[4] = u'-'
            reportLine[5] = u'-'
            reportLine[6] = u'-'
            reportLine[7] = u'-'
            for row, rowDescr in enumerate(Rows4100):
                i = table.addRow()
                name, line = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
            table.setText(1, 2, reportLine[0])
            table.setText(2, 2, reportLine[1])
            table.setText(3, 2, reportLine[2])
            table.setText(4, 2, reportLine[3])
            table.setText(5, 2, reportLine[4])
            table.setText(6, 2, reportLine[5])
            table.setText(7, 2, reportLine[6])
            table.setText(8, 2, reportLine[7])
            table.setText(9, 2, reportLine[8])
            table.setText(10, 2, reportLine[9])
        return doc


    def getAnesthesia(self, eventIdList, begDate, endDate):
        if eventIdList:
            db = QtGui.qApp.db
            tableEvent = db.table('Event')
            tableAction = db.table('Action')
            tableActionType = db.table('ActionType')
            tableClient = db.table('Client')
            tableEventType = db.table('EventType')
            tableRBMedicalAidType = db.table('rbMedicalAidType')
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id']
                    ]
            cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход анестезии', u'(APS.value LIKE \'%смерть%\')')))
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
            table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableAction['endDate'].isNotNull(),
                    tableActionType['id'].inlist(getActionTypeIdListByFlatCode('anesthesia%')),
                    tableEventType['deleted'].eq(0)
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDate:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDate)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDate:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDate)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
            return db.getRecordList(table, cols, cond)
        return []


    def getOperation(self, orgStructureIdList, begDateTime, endDateTime, financeId, isNomeclature):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableEventType = db.table('EventType')
        tableContract = db.table('Contract')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].ge(begDateTime), tableAction['begDate'].le(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].ge(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].le(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].ge(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        if financeId:
            cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
            table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id'],
                    tableActionType['id'].alias('actionTypeId'),
                    tableActionType['group_id'].alias('groupId'),
                    tableActionType['name'],
                    tableRBService['code'] if not isNomeclature else tableActionType['flatCode'].alias('code')
                    ]
            cols.append('''IF((SELECT QuotaType.class
                               FROM QuotaType
                               WHERE QuotaType.id = ActionType.quotaType_id AND QuotaType.deleted = 0
                               LIMIT 1) = 0, 1,
                           IF((SELECT QuotaType.class
                               FROM QuotaType
                               INNER JOIN ActionType_QuotaType ON ActionType_QuotaType.quotaType_id = QuotaType.id
                               WHERE ActionType_QuotaType.master_id = ActionType.id
                               AND QuotaType.deleted = 0
                               LIMIT 1) = 0, 1, 0)) AS quotaTypeWTMP''')
            cols.append('age(Client.birthDate, Event.setDate) AS ageClient')
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull()
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            if not isNomeclature:
                table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
                cols.append(tableRBService['code'].alias('codeService'))
            else:
                cols.append(tableActionType['serviceType'].alias('codeService'))
            cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
            return db.getRecordList(table, cols, cond)
        return []


class CStationaryF144200(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        financeId = params.get('financeId', None)
        isNomeclature = params.get('typeSurgery', 0)
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'(4200)Из общего числа операций(единиц)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('45%',[u'Наименование показателей', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки',                 u'2'], CReportBase.AlignCenter),
                    ('25%',[u'Всего',                    u'3'], CReportBase.AlignRight),
                    ('25%',[u'из них: у детей',          u'4'], CReportBase.AlignRight)
                   ]
            table = createTable(cursor, cols)
            reportLineEye = self.getTypeOperation(orgStructureIdList, begDate, endDate, u'''ActionType.flatCode = '4' ''' if isNomeclature else u'rbService.code LIKE \'А16.26.%%\'', financeId, isNomeclature)
            reportLineEar = self.getTypeOperation(orgStructureIdList, begDate, endDate, u'''ActionType.flatCode = '5.1' ''' if isNomeclature else u'rbService.code LIKE \'А16.25.%%\'', financeId, isNomeclature)
            reportLineBelly = self.getTypeOperation(orgStructureIdList, begDate, endDate, u'''ActionType.flatCode = '9.1' ''' if isNomeclature else u'rbService.code = \'А16.16.021\' OR rbService.code = \'А16.16.013\'', financeId, isNomeclature)
            def getReportLine(records):
                reportLine = [0, 0]
                for record in records:
                    actionId = forceRef(record.value('actionId'))
                    clientAge = forceInt(record.value('clientAge'))
                    if actionId:
                        reportLine[0] += 1
                        if clientAge <= 17:
                            reportLine[1] += 1
                return reportLine
            for row, rowDescr in enumerate(Rows4200):
                i = table.addRow()
                name, line = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
            reportLineEye = getReportLine(reportLineEye)
            reportLineEar = getReportLine(reportLineEar)
            reportLineBelly = getReportLine(reportLineBelly)
            table.setText(2, 2, reportLineEye[0])
            table.setText(2, 3, reportLineEye[0])
            table.setText(3, 2, u'-')
            table.setText(3, 3, u'-')
            table.setText(4, 2, u'-')
            table.setText(4, 3, u'-')
            table.setText(5, 2, u'-')
            table.setText(5, 3, u'-')
            table.setText(6, 2, u'-')
            table.setText(6, 3, u'-')
            table.setText(7, 2, reportLineEar[0])
            table.setText(7, 3, reportLineEar[1])
            table.setText(8, 2, reportLineBelly[0])
            table.setText(8, 3, reportLineBelly[1])
            table.setText(11, 2, u'-')
        return doc


    def getTypeOperation(self, orgStructureIdList, begDateTime, endDateTime, codeOperation, financeId = None, isNomeclature = False):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableContract = db.table('Contract')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].ge(begDateTime), tableAction['begDate'].le(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].ge(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].le(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].ge(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        if financeId:
            cond.append('''((Action.finance_id IS NOT NULL AND Action.deleted=0 AND Action.finance_id = %s) OR (Contract.id IS NOT NULL AND Contract.deleted=0 AND Contract.finance_id = %s))'''%(str(financeId), str(financeId)))
            table = table.innerJoin(tableContract, tableContract['id'].eq(tableEvent['contract_id']))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id'],
                    u'age(Client.birthDate, Event.setDate) AS clientAge'
                    ]
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull()
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            cond.append(tableActionType['serviceType'].eq(CActionServiceType.operation))
            cond.append(codeOperation)
            return db.getRecordList(table, cols, cond)
        return []


class CStationaryF144201(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'(4201)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('25%',[u'Наименование трансплантаций', u'1'], CReportBase.AlignLeft),
                    ('5%', [u'№ строки', u'2'], CReportBase.AlignCenter),
                    ('10%',[u'Проведено операций (трансплантаций) - всего', u'3'], CReportBase.AlignRight),
                    ('10%',[u'из них: детям', u'4'], CReportBase.AlignRight),
                    ('10%',[u'Число операций, при которых наблюдались осложнения (из гр. 3)', u'5'], CReportBase.AlignRight),
                    ('10%',[u'из них: детям', u'6'], CReportBase.AlignRight),
                    ('10%',[u'Умерло оперированных (из гр. 3)', u'7'], CReportBase.AlignRight),
                    ('10%',[u'из них: детей (из гр. 7)', u'8'], CReportBase.AlignRight),
                    ('10%',[u'Направлено материалов на морфологическое исследование (из гр. 3)', u'9'], CReportBase.AlignRight)
                   ]
            table = createTable(cursor, cols)
            def getReportLine(records):
                reportLine = [0]*7
                for record in records:
                    countDeathSurgery = forceInt(record.value('countDeathSurgery'))
                    clientAge = forceInt(record.value('clientAge'))
                    countComplication = forceInt(record.value('countComplication'))
                    countMorphologicalStudy = forceInt(record.value('countMorphologicalStudy'))
                    reportLine[0] += 1
                    if countComplication:
                        reportLine[2] += 1
                    if countDeathSurgery:
                        reportLine[4] += 1
                    if countMorphologicalStudy:
                        reportLine[6] += 1
                    if clientAge <= 17:
                        reportLine[1] += 1
                        if countComplication:
                            reportLine[3] += 1
                        if countDeathSurgery:
                            reportLine[5] += 1
                return reportLine
            recordsAll = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация%')
            recordsBuds = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация почки%')
            recordsPancreat = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация поджелудочной железы%')
            recordsHearts = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация сердца%')
            recordsBaking = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация печени%')
            recordsMedulla = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация костного мозга%')
            recordsLung = self.getTransplantation(orgStructureIdList, begDateTime, endDateTime, u'трансплантация легк%')
            recordsTK = self.getTransplantation(orgStructureIdList, begDate, endDate, u'трансплантация тонкой кишки%')
            recordsPR = self.getTransplantation(orgStructureIdList, begDate, endDate, u'трансплантация прочих органов%')
            recordsNesk = self.getTransplantation(orgStructureIdList, begDate, endDate, u'трансплантация двух и более органов%')
            for row, rowDescr in enumerate(Rows4201):
                i = table.addRow()
                name, line = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
            def setReportLine(reportLine, i):
                table.setText(i, 2, reportLine[0])
                table.setText(i, 3, reportLine[1])
                table.setText(i, 4, reportLine[2])
                table.setText(i, 5, reportLine[3])
                table.setText(i, 6, reportLine[4])
                table.setText(i, 7, reportLine[5])
                table.setText(i, 8, reportLine[6])
            reportLineAll = getReportLine(recordsAll)
            setReportLine(reportLineAll, 2)
            reportLineBuds = getReportLine(recordsBuds)
            setReportLine(reportLineBuds, 8)
            reportLinePancreat = getReportLine(recordsPancreat)
            setReportLine(reportLinePancreat, 6)
            reportLineHearts = getReportLine(recordsHearts)
            setReportLine(reportLineHearts, 4)
            reportLineBaking = getReportLine(recordsBaking)
            setReportLine(reportLineBaking, 5)
            reportLineMedulla = getReportLine(recordsMedulla)
            setReportLine(reportLineMedulla, 9)
            reportLineLung = getReportLine(recordsLung)
            setReportLine(reportLineLung, 3)
            reportLineLung = getReportLine(recordsTK)
            setReportLine(reportLineLung, 7)
            reportLineLung = getReportLine(recordsPR)
            setReportLine(reportLineLung, 10)
            reportLineLung = getReportLine(recordsNesk)
            setReportLine(reportLineLung, 11)
        return doc


    def getTransplantation(self, orgStructureIdList, begDateTime, endDateTime, nameTrasplantate):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].ge(begDateTime), tableAction['begDate'].le(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].ge(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].le(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].ge(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id']
                    ]
            cols.append('age(Client.birthDate, Event.setDate) AS clientAge')
            cols.append('%s AS countDeathSurgery'%(getStringProperty(u'Исход операции', u'(APS.value LIKE \'умер%\' OR APS.value LIKE \'смерть%\')')))
            cols.append('%s AS countMorphologicalStudy'%(getStringProperty(u'Направление на морфологию', u'(APS.value = \'да\' OR APS.value = \'ДА\' OR APS.value = \'Да\')')))
            cols.append('%s AS countComplication'%(getStringProperty(u'Осложнение', u'(APS.value != \'\' OR APS.value != \' \')')))
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull()
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            cond.append(tableRBService['name'].like(nameTrasplantate))
            return db.getRecordList(table, cols, cond)
        return []


class CStationaryF144202(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        begDate = params.get('begDate', QDate())
        endDate = params.get('endDate', QDate())
        doc = QtGui.QTextDocument()
        if (not begDate) or (not endDate):
            currentDate = QDate.currentDate()
            begDate = QDate(currentDate.year(), 1, 1)
            endDate = currentDate
        if begDate and endDate:
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'(4202)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('22%',[u'Строка 1'], CReportBase.AlignLeft),
                    ('3%', [u'№ графы'], CReportBase.AlignLeft),
                    ('75%', [u''], CReportBase.AlignLeft)
                   ]
            table = createTable(cursor, cols)
            for row, rowDescr in enumerate(Rows4202):
                i = table.addRow()
                name, line = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
            records = self.getEndoprosthesis(orgStructureIdList, begDate, endDate)
            reportLine = [0, 0]
            for record in records:
                reportLine[0] += 1
                if forceInt(record.value('clientAge')) <= 17:
                    reportLine[1] += 1
            table.setText(1, 2, reportLine[0])
            table.setText(2, 2, reportLine[1])
            table.setText(3, 2, u'-')
            table.setText(4, 2, u'-')
        return doc


    def getEndoprosthesis(self, orgStructureIdList, begDateTime, endDateTime):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].dateGe(begDateTime), tableAction['begDate'].dateLe(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].dateGe(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].dateLe(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].dateGe(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id']
                    ]
            cols.append('age(Client.birthDate, Event.setDate) AS clientAge')
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull()
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].dateGe(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].dateLe(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            cond.append(tableRBService['name'].like(u'%эндопротезирование%'))
            return db.getRecordList(table, cols, cond)
        return []


class CStationaryF144400(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex) if orgStructureIndex.row() else []
        doc = QtGui.QTextDocument()
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'(4400)')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cols = [('22%',[u'Строка 1'], CReportBase.AlignLeft),
                    ('3%', [u'№ графы'], CReportBase.AlignLeft),
                    ('75%', [u'Число'], CReportBase.AlignLeft)
                   ]
            table = createTable(cursor, cols)
            recordsAll = self.getRestoration(orgStructureIdList, begDate, endDate, u'')
            recordsBelly = self.getRestoration(orgStructureIdList, begDate, endDate, u'rbService.code = \'А16.16.021\' OR rbService.code = \'А16.16.013\'')
            recordsBiliary = self.getRestoration(orgStructureIdList, begDate, endDate, u'rbService.code = \'А16.14.009\'')
            recordsHeart = self.getRestoration(orgStructureIdList, begDate, endDate, u'(rbService.code >= \'А16.12.001\' AND rbService.code <= \'А16.12.023\') OR (rbService.code >= \'А16.12.025\' AND rbService.code <= \'А16.12.028\') OR (rbService.code >= \'А16.10.001\' AND rbService.code <= \'А16.10.018\')')
            recordsSubBelly = self.getRestoration(orgStructureIdList, begDate, endDate, u'(rbService.code >= \'А16.15.001\' AND rbService.code <= \'А16.15.012\')')
            recordsSubBone = self.getRestoration(orgStructureIdList, begDate, endDate, u'(rbService.code >= \'А16.04.001\' AND rbService.code <= \'А16.04.023\') OR (rbService.code >= \'А16.03.021\' AND rbService.code <= \'А16.03.041\') OR (rbService.code = \'А16.31.017\') OR (rbService.code = \'А16.31.018\')')
            def getReportLine(records):
                reportLine = 0
                for record in records:
                    reportLine += 1
                return reportLine
            for row, rowDescr in enumerate(Rows4400):
                i = table.addRow()
                name, line = rowDescr
                table.setText(i, 0, name)
                table.setText(i, 1, line)
            table.setText(1, 2, getReportLine(recordsAll))
            table.setText(2, 2, getReportLine(recordsBelly))
            table.setText(3, 2, getReportLine(recordsBiliary))
            table.setText(4, 2, getReportLine(recordsHeart))
            table.setText(5, 2, getReportLine(recordsSubBelly))
            table.setText(6, 2, getReportLine(recordsSubBone))
        return doc


    def getRestoration(self, orgStructureIdList, begDateTime, endDateTime, codeRestoration):
        db = QtGui.qApp.db
        tableEvent = db.table('Event')
        tableAction = db.table('Action')
        tableActionType = db.table('ActionType')
        tableClient = db.table('Client')
        tableRBService = db.table('rbService')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        table = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        table = table.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        table = table.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        cond = [tableAction['actionType_id'].inlist(getActionTypeIdListByFlatCode('received%')),
                tableEvent['deleted'].eq(0),
                tableAction['deleted'].eq(0),
                tableActionType['deleted'].eq(0),
                tableClient['deleted'].eq(0),
                tableEventType['deleted'].eq(0)
                ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNull()])
        joinOr2 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].ge(begDateTime), tableAction['begDate'].le(endDateTime)])
        joinOr3 = db.joinAnd([tableAction['begDate'].isNull(), tableAction['endDate'].isNotNull(), tableAction['endDate'].ge(begDateTime)])
        joinOr4 = db.joinAnd([tableAction['begDate'].isNotNull(), tableAction['begDate'].le(begDateTime), db.joinOr([tableAction['endDate'].isNull(), tableAction['endDate'].ge(begDateTime)])])
        cond.append(db.joinOr([joinOr1, joinOr2, joinOr3, joinOr4]))
        cond.append('''EXISTS(SELECT RBS.id
                      FROM Action AS A
                      INNER JOIN ActionType AS AT ON A.actionType_id=AT.id
                      INNER JOIN rbService AS RBS ON RBS.id = AT.nomenclativeService_id
                      WHERE A.event_id = Action.event_id AND A.deleted = 0 AND AT.deleted = 0 AND RBS.name = '%s')'''%(u'%восстановительное лечение%'))
        if orgStructureIdList:
            cond.append(getDataOrgStructure(u'Направлен в отделение', orgStructureIdList))
        eventIdList = db.getDistinctIdList(table, 'Event.id', cond)
        if eventIdList:
            cols = [tableAction['id'].alias('actionId'),
                    tableAction['event_id']
                    ]
            table = tableAction.innerJoin(tableActionType, tableAction['actionType_id'].eq(tableActionType['id']))
            table = table.innerJoin(tableRBService, tableRBService['id'].eq(tableActionType['nomenclativeService_id']))
            table = table.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
            table = table.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
            cond = [tableAction['event_id'].inlist(eventIdList),
                    tableEvent['deleted'].eq(0),
                    tableAction['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableClient['deleted'].eq(0),
                    tableActionType['class'].eq(2),
                    tableAction['endDate'].isNotNull()
                    ]
            socStatusClassId = self.params.get('socStatusClassId', None)
            socStatusTypeId  = self.params.get('socStatusTypeId', None)
            if socStatusClassId or socStatusTypeId:
                tableClientSocStatus = db.table('ClientSocStatus')
                if begDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                       tableClientSocStatus['endDate'].ge(begDateTime)
                                                      ]),
                                           tableClientSocStatus['endDate'].isNull()
                                          ]))
                if endDateTime:
                    cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                       tableClientSocStatus['begDate'].le(endDateTime)
                                                      ]),
                                           tableClientSocStatus['begDate'].isNull()
                                          ]))
                table = table.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
                if socStatusClassId:
                    cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
                if socStatusTypeId:
                    cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
                cond.append(tableClientSocStatus['deleted'].eq(0))
            if codeRestoration:
                cond.append(codeRestoration)
            cond.append('''EXISTS(SELECT RBS.id
                                  FROM Action AS A
                                  INNER JOIN ActionType AS AT ON A.actionType_id=AT.id
                                  INNER JOIN rbService AS RBS ON RBS.id = AT.nomenclativeService_id
                                  WHERE A.event_id = Action.event_id AND A.deleted = 0 AND AT.deleted = 0 AND RBS.name LIKE '%восстановительное лечение%' AND DATE(A.begDate) >= DATE(Action.begDate))''')
            return db.getRecordListGroupBy(table, cols, cond, u'Action.event_id')
        return []


class CStationaryF142100(CStationaryF014):
    def __init__(self, parent = None):
        CStationaryF014.__init__(self, parent)
        self.stationaryF14SetupDialog = None


    def getSetupDialog(self, parent):
        result = CStationaryF14SetupDialog(parent)
        result.setTypeSurgeryVisible(False)
        result.setSelectActionTypeVisible(False)
        result.setFinanceVisible(False)
        result.setSpecialDeliverClientVisible(False)
        self.stationaryF14SetupDialog = result
        return result


    def dumpParams(self, cursor, params):
        description = []
        self.params = params
        begDate = params.get('begDate', QDate())
        endDate = params.get('endDate', QDate())
        if begDate and endDate:
            description.append(dateRangeAsStr(u'за период', begDate, endDate))
        orgStructureId = params.get('orgStructureId', None)
        if orgStructureId:
            description.append(u'подразделение: ' + getOrgStructureFullName(orgStructureId))
        else:
            description.append(u'подразделение: ЛПУ')
        socStatusClassId = params.get('socStatusClassId', None)
        if socStatusClassId:
            description.append(u'класс соц.статуса: %s'%(forceString(QtGui.qApp.db.translate('rbSocStatusClass', 'id', socStatusClassId, 'name'))))
        socStatusTypeId  = params.get('socStatusTypeId', None)
        if socStatusTypeId:
            description.append(u'тип соц.статуса: %s'%(forceString(QtGui.qApp.db.translate('rbSocStatusType', 'id', socStatusTypeId, 'name'))))
        description.append(u'отчёт составлен: '+forceString(QDateTime.currentDateTime()))
        columns = [ ('100%', [], CReportBase.AlignLeft) ]
        table = createTable(cursor, columns, headerRowCount=len(description), border=0, cellPadding=2, cellSpacing=0)
        for i, row in enumerate(description):
            table.setText(i, 0, row)
        cursor.movePosition(QtGui.QTextCursor.End)


    def getInfoByReport(self, orgStructureIdList, begDateTime, endDateTime, isHospital = None):
        reportMainData = [0, 0, 0, 0, 0]
        db = QtGui.qApp.db
        tableAPHB = db.table('ActionProperty_HospitalBed')
        tableAPT = db.table('ActionPropertyType')
        tableAP = db.table('ActionProperty')
        tableActionType = db.table('ActionType')
        tableAction = db.table('Action')
        tableEvent = db.table('Event')
        tableClient = db.table('Client')
        tableOrg = db.table('Organisation')
        tableOS = db.table('OrgStructure')
        tableAPHB = db.table('ActionProperty_HospitalBed')
        tableOSHB = db.table('OrgStructure_HospitalBed')
        tableDiagnosis = db.table('Diagnosis')
        tableDiagnostic = db.table('Diagnostic')
        tableRBDiagnosisType = db.table('rbDiagnosisType')
        tableEventType = db.table('EventType')
        tableRBMedicalAidType = db.table('rbMedicalAidType')
        queryTable = tableActionType.innerJoin(tableAction, tableActionType['id'].eq(tableAction['actionType_id']))
        queryTable = queryTable.innerJoin(tableEvent, tableAction['event_id'].eq(tableEvent['id']))
        queryTable = queryTable.innerJoin(tableEventType, tableEvent['eventType_id'].eq(tableEventType['id']))
        queryTable = queryTable.innerJoin(tableRBMedicalAidType, tableEventType['medicalAidType_id'].eq(tableRBMedicalAidType['id']))
        queryTable = queryTable.innerJoin(tableClient, tableEvent['client_id'].eq(tableClient['id']))
        queryTable = queryTable.innerJoin(tableDiagnostic, tableEvent['id'].eq(tableDiagnostic['event_id']))
        queryTable = queryTable.innerJoin(tableDiagnosis, tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']))
        queryTable = queryTable.innerJoin(tableRBDiagnosisType, tableDiagnostic['diagnosisType_id'].eq(tableRBDiagnosisType['id']))
        actionTypeIdList = getActionTypeIdListByFlatCode('leaved%')
        cond = [ tableActionType['id'].inlist(actionTypeIdList),
                 tableAction['deleted'].eq(0),
                 tableEvent['deleted'].eq(0),
                 tableActionType['deleted'].eq(0),
                 tableClient['deleted'].eq(0),
                 tableDiagnosis['deleted'].eq(0),
                 tableDiagnostic['deleted'].eq(0),
                 tableAction['endDate'].isNotNull(),
                 tableEventType['deleted'].eq(0)
               ]
        socStatusClassId = self.params.get('socStatusClassId', None)
        socStatusTypeId  = self.params.get('socStatusTypeId', None)
        if socStatusClassId or socStatusTypeId:
            tableClientSocStatus = db.table('ClientSocStatus')
            if begDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['endDate'].isNotNull(),
                                                   tableClientSocStatus['endDate'].ge(begDateTime)
                                                  ]),
                                       tableClientSocStatus['endDate'].isNull()
                                      ]))
            if endDateTime:
                cond.append(db.joinOr([db.joinAnd([tableClientSocStatus['begDate'].isNotNull(),
                                                   tableClientSocStatus['begDate'].le(endDateTime)
                                                  ]),
                                       tableClientSocStatus['begDate'].isNull()
                                      ]))
            queryTable = queryTable.leftJoin(tableClientSocStatus, tableClientSocStatus['client_id'].eq(tableClient['id']))
            if socStatusClassId:
                cond.append(tableClientSocStatus['socStatusClass_id'].eq(socStatusClassId))
            if socStatusTypeId:
                cond.append(tableClientSocStatus['socStatusType_id'].eq(socStatusTypeId))
            cond.append(tableClientSocStatus['deleted'].eq(0))
        cond.append(tableRBMedicalAidType['code'].inlist([1, 2, 3]))
        joinOr1 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].ge(begDateTime)])
        joinOr2 = db.joinOr([tableAction['begDate'].isNull(), tableAction['begDate'].le(endDateTime)])
        cond.append(db.joinAnd([joinOr1, joinOr2]))
        cond.append(u'''rbDiagnosisType.code = '1' OR (rbDiagnosisType.code = '2'
        AND Diagnostic.person_id = Event.execPerson_id
        AND (NOT EXISTS (SELECT DC.id
        FROM Diagnostic AS DC
        INNER JOIN rbDiagnosisType AS DT ON DT.id = DC.diagnosisType_id
        WHERE DT.code = '1' AND DC.event_id = Event.id
        LIMIT 1)))''')
        cond.append(getStringProperty(u'Исход госпитализации', u'(APS.value LIKE \'%%переведен%%\')'))
        cols = [tableEvent['id'].alias('eventId'),
                tableAction['id'].alias('actionId'),
                tableAction['endDate'],
                tableClient['id'].alias('clientId'),
                tableClient['birthGestationalAge'],
                tableClient['birthDate'],
                tableDiagnosis['MKB'],
                tableEvent['setDate']
                ]
        cols.append(u'''(SELECT APS_S.value
                        FROM Action AS A_S
                        INNER JOIN ActionType AS AT_S ON AT_S.id = A_S.actionType_id
                        INNER JOIN ActionPropertyType AS APT_S ON APT_S.actionType_id = AT_S.id
                        INNER JOIN ActionProperty AS AP_S ON AP_S.type_id = APT_S.id
                        INNER JOIN ActionProperty_String AS APS_S ON APS_S.id = AP_S.id
                        WHERE A_S.actionType_id IN (%s)
                        AND A_S.deleted=0
                        AND AP_S.deleted=0
                        AND APT_S.deleted=0
                        AND AP_S.action_id = A_S.id
                        AND A_S.event_id = Event.id
                        AND APT_S.name LIKE 'Исход госпитализации%%') AS trasferedType''' % (','.join(str(actionTypeId) for actionTypeId in actionTypeIdList if actionTypeId)))
        stmt = db.selectStmt(queryTable, cols, cond)
        query = db.query(stmt)
#        days = 0
        cols = [tableAction['begDate'],
                tableAction['id'].alias('actionId'),
                tableAction['endDate'],
                tableOSHB['master_id'],
                tableOrg['isMedical']
                ]
        queryTable = tableAction.innerJoin(tableActionType, tableActionType['id'].eq(tableAction['actionType_id']))
        queryTable = queryTable.innerJoin(tableAPT, tableAPT['actionType_id'].eq(tableActionType['id']))
        queryTable = queryTable.innerJoin(tableAP, tableAP['type_id'].eq(tableAPT['id']))
        queryTable = queryTable.innerJoin(tableAPHB, tableAPHB['id'].eq(tableAP['id']))
        queryTable = queryTable.innerJoin(tableOSHB, tableOSHB['id'].eq(tableAPHB['value']))
        queryTable = queryTable.innerJoin(tableOS, tableOS['id'].eq(tableOSHB['master_id']))
        queryTable = queryTable.innerJoin(tableOrg, tableOrg['id'].eq(tableOS['organisation_id']))
        order = u'Action.begDate DESC'
        while query.next():
            record = query.record()
            eventId = forceRef(record.value('eventId'))
            birthGestationalAge = forceInt(record.value('birthGestationalAge'))
            birthDate = forceDate(record.value('birthDate'))
            setDate = forceDate(record.value('setDate'))
            trasferedType = forceString(record.value('trasferedType'))
            MKBRec = normalizeMKB(forceString(record.value('MKB')))
            cond = [tableActionType['flatCode'].like('moving%'),
                    tableAction['deleted'].eq(0),
                    tableAction['event_id'].eq(eventId),
                    tableAP['deleted'].eq(0),
                    tableActionType['deleted'].eq(0),
                    tableAPT['deleted'].eq(0),
                    tableOS['type'].ne(0),
                    tableOS['deleted'].eq(0),
                    tableOrg['deleted'].eq(0),
                    tableAPT['typeName'].like('HospitalBed'),
                    tableAP['action_id'].eq(tableAction['id'])
                   ]
            firstRecord = db.getRecordEx(queryTable, cols, cond, order)
            if firstRecord:
                isHospitalRecord = None
                masterId = forceRef(firstRecord.value('master_id'))
                if isHospital is not None:
                    isHospitalRecord = forceInt(firstRecord.value('isMedical'))
                if MKBRec and isHospital == isHospitalRecord and masterId in orgStructureIdList:
                    reportMainData[0] += 1
                    if birthDate.addDays(30) > setDate:
                        reportMainData[1] += 1
                    if 0<birthGestationalAge< 36:
                        reportMainData[2] += 1
                    if u'восстановит' in trasferedType.lower():
                        reportMainData[3] += 1
                    if u'санаторий' in trasferedType.lower():
                        reportMainData[4] += 1
        return reportMainData


    def build(self, params):
        orgStructureIndex = self.stationaryF14SetupDialog.cmbOrgStructure._model.index(self.stationaryF14SetupDialog.cmbOrgStructure.currentIndex(), 0, self.stationaryF14SetupDialog.cmbOrgStructure.rootModelIndex())
        orgStructureIdList = self.getOrgStructureIdList(orgStructureIndex)
        endDate = params.get('endDate', QDate())
        begDate = params.get('begDate', QDate())
        if not endDate:
            endDate = QDate.currentDate()
        if endDate:
            endTime = params.get('endTime', QTime(9, 0, 0, 0))
            begTime = params.get('begTime', None)
            endDateTime = QDateTime(endDate, endTime)
            if not begDate:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(endDate.addDays(-1), begTime)
            else:
                begTime = begTime if begTime else endTime
                begDateTime = QDateTime(begDate, begTime)
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'2100')
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.setCharFormat(CReportBase.ReportBody)
            cursor.insertBlock()
            cursor.insertBlock()
            reportMainData = self.getInfoByReport(orgStructureIdList, begDateTime, endDateTime)
            result = u'''Кроме того, больные, переведенные в другие стационары %s, в том числе новорожденные %s, из них недоношенные %s, из числа переведенных в другие стационары переведено: в стационары восстановительного лечения %s, в санатории %s.'''%(str(reportMainData[0]), str(reportMainData[1]), str(reportMainData[2]), str(reportMainData[3]), str(reportMainData[4]))
            cursor.insertText(result)
            cursor.insertBlock()
        return doc


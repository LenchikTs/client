##################################################
# file: FileOperationsLnService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b ../wsdl/fixed/FileOperationsLnService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type
from fssns import FSSMO, FSSELN, FSSFAULT

##############################
# targetNamespace
# http://www.fss.ru/integration/ws/eln/mo/v01
##############################

class ns0:
    targetNamespace = "http://www.fss.ru/integration/ws/eln/mo/v01"

# end class ns0 (tns: http://www.fss.ru/integration/ws/eln/mo/v01)

##############################
# targetNamespace
# http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
##############################

class ns1:
    targetNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"

# end class ns1 (tns: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd)

##############################
# targetNamespace
# http://www.fss.ru/integration/types/eln/mo/v01
##############################

class ns2:
    targetNamespace = FSSMO

    class PrParseFilelnlpuRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "PrParseFilelnlpuRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PrParseFilelnlpuRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.pXmlFile_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._pXmlFile = None
                    return
            Holder.__name__ = "PrParseFilelnlpuRequest_Holder"
            self.pyclass = Holder


        class pXmlFile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "pXmlFile"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.PrParseFilelnlpuRequest_Def.pXmlFile_Dec.schema
                TClist = [GED(FSSMO,"rowset",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"pXmlFile")
                kw["aname"] = "_pXmlFile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._rowset = None
                        return
                Holder.__name__ = "pXmlFile_Holder"
                self.pyclass = Holder




    class PrParseFileNumberslpuRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "PrParseFileNumberslpuRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PrParseFileNumberslpuRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.pXmlNumFile_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._pXmlNumFile = None
                    return
            Holder.__name__ = "PrParseFileNumberslpuRequest_Holder"
            self.pyclass = Holder


        class pXmlNumFile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "pXmlNumFile"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.PrParseFileNumberslpuRequest_Def.pXmlNumFile_Dec.schema
                TClist = [GED(FSSMO,"data",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"pXmlNumFile")
                kw["aname"] = "_pXmlNumFile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._data = None
                        return
                Holder.__name__ = "pXmlNumFile_Holder"
                self.pyclass = Holder




    class GetNewLNNumRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetNewLNNumRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetNewLNNumRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    return
            Holder.__name__ = "GetNewLNNumRequest_Holder"
            self.pyclass = Holder

    class GetNewLNNumRangeRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetNewLNNumRangeRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetNewLNNumRangeRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"cntLnNumbers"), aname="_cntLnNumbers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._cntLnNumbers = None
                    return
            Holder.__name__ = "GetNewLNNumRangeRequest_Holder"
            self.pyclass = Holder

    class GetLNDataRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetLNDataRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetLNDataRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._lnCode = None
                    self._snils = None
                    return
            Holder.__name__ = "GetLNDataRequest_Holder"
            self.pyclass = Holder

    class GetExistingLNNumRangeRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetExistingLNNumRangeRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetExistingLNNumRangeRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    return
            Holder.__name__ = "GetExistingLNNumRangeRequest_Holder"
            self.pyclass = Holder

    class GetLNListBySnilsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetLNListBySnilsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetLNListBySnilsRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._snils = None
                    return
            Holder.__name__ = "GetLNListBySnilsRequest_Holder"
            self.pyclass = Holder

    class GetLNListByDateRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "GetLNListByDateRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GetLNListByDateRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._date = None
                    return
            Holder.__name__ = "GetLNListByDateRequest_Holder"
            self.pyclass = Holder

    class DisableLnRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "DisableLnRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DisableLnRequest_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reasonCode"), aname="_reasonCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason"), aname="_reason", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._lnCode = None
                    self._snils = None
                    self._reasonCode = None
                    self._reason = None
                    return
            Holder.__name__ = "DisableLnRequest_Holder"
            self.pyclass = Holder

    class ServFullData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "ServFullData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ServFullData_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"diagnosis"), aname="_diagnosis", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ServFullData_Def not in ns2.ServFullData_Def.__bases__:
                bases = list(ns2.ServFullData_Def.__bases__)
                bases.insert(0, ns3.ServFullData_Def)
                ns2.ServFullData_Def.__bases__ = tuple(bases)

            ns3.ServFullData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HospitalBreach_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "HospitalBreach")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HospitalBreach_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            if ns3.HospitalBreachInfo_Def not in ns2.HospitalBreach_Def.__bases__:
                bases = list(ns2.HospitalBreach_Def.__bases__)
                bases.insert(0, ns3.HospitalBreachInfo_Def)
                ns2.HospitalBreach_Def.__bases__ = tuple(bases)

            ns3.HospitalBreachInfo_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LnResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "LnResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.LnResult_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            if ns3.LnResult_Def not in ns2.LnResult_Def.__bases__:
                bases = list(ns2.LnResult_Def.__bases__)
                bases.insert(0, ns3.LnResult_Def)
                ns2.LnResult_Def.__bases__ = tuple(bases)

            ns3.LnResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Row_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "Row")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Row_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"unconditional"), aname="_unconditional", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"surname"), aname="_surname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"patronymic"), aname="_patronymic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"prevLnCode"), aname="_prevLnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"primaryFlag"), aname="_primaryFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"duplicateFlag"), aname="_duplicateFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"lnDate"), aname="_lnDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"idMo"), aname="_idMo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuName"), aname="_lpuName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuAddress"), aname="_lpuAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuOgrn"), aname="_lpuOgrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthday"), aname="_birthday", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason1"), aname="_reason1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason2"), aname="_reason2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"diagnos"), aname="_diagnos", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date1"), aname="_date1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date2"), aname="_date2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"voucherNo"), aname="_voucherNo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"voucherOgrn"), aname="_voucherOgrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.servData_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregn12wFlag"), aname="_pregn12wFlag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"hospitalDt1"), aname="_hospitalDt1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"hospitalDt2"), aname="_hospitalDt2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(FSSMO,"HospitalBreach",lazy=False)(pname=(ns,"hospitalBreach"), aname="_hospitalBreach", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt1"), aname="_mseDt1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt2"), aname="_mseDt2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt3"), aname="_mseDt3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"mseInvalidGroup"), aname="_mseInvalidGroup", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.treatPeriods_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(FSSMO,"LnResult",lazy=False)(pname=(ns,"lnResult"), aname="_lnResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnState"), aname="_lnState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnHash"), aname="_lnHash", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"previouslyIssuedCode"), aname="_previouslyIssuedCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"writtenAgreementFlag"), aname="_writtenAgreementFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"intermittentMethodFlag"), aname="_intermittentMethodFlag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unconditional = None
                    self._snils = None
                    self._surname = None
                    self._name = None
                    self._patronymic = None
                    self._lnCode = None
                    self._prevLnCode = None
                    self._primaryFlag = None
                    self._duplicateFlag = None
                    self._lnDate = None
                    self._idMo = None
                    self._lpuName = None
                    self._lpuAddress = None
                    self._lpuOgrn = None
                    self._birthday = None
                    self._gender = None
                    self._reason1 = None
                    self._reason2 = None
                    self._diagnos = None
                    self._date1 = None
                    self._date2 = None
                    self._voucherNo = None
                    self._voucherOgrn = None
                    self._servData = None
                    self._pregn12wFlag = None
                    self._hospitalDt1 = None
                    self._hospitalDt2 = None
                    self._hospitalBreach = None
                    self._mseDt1 = None
                    self._mseDt2 = None
                    self._mseDt3 = None
                    self._mseInvalidGroup = None
                    self._treatPeriods = None
                    self._lnResult = None
                    self._lnState = None
                    self._lnHash = None
                    self._previouslyIssuedCode = None
                    self._writtenAgreementFlag = None
                    self._intermittentMethodFlag = None
                    return
            Holder.__name__ = "Row_Holder"
            self.pyclass = Holder


        class servData_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "servData"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.Row_Def.servData_Dec.schema
                TClist = [GTD(FSSMO,"ServFullData",lazy=False)(pname=(ns,"servFullData"), aname="_servFullData", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"servData")
                kw["aname"] = "_servData"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._servFullData = []
                        return
                Holder.__name__ = "servData_Holder"
                self.pyclass = Holder





        class treatPeriods_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "treatPeriods"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.Row_Def.treatPeriods_Dec.schema
                TClist = [GTD(FSSELN,"TreatFullPeriodMo",lazy=False)(pname=(ns,"treatFullPeriod"), aname="_treatFullPeriod", minOccurs=1, maxOccurs=3, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"treatPeriods")
                kw["aname"] = "_treatPeriods"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._treatFullPeriod = []
                        return
                Holder.__name__ = "treatPeriods_Holder"
                self.pyclass = Holder




    class Rowset_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "Rowset")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Rowset_Def.schema
            TClist = [GTD(FSSMO,"Row",lazy=False)(pname=(ns,"row"), aname="_row", minOccurs=1, maxOccurs=30, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[(FSSELN,"version")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[(FSSELN,"software")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[(FSSELN,"version_software")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[(FSSELN,"author")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[(FSSELN,"phone")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[(FSSELN,"email")] = ZSI.TC.String(strip=False, )
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._row = []
                    return
            Holder.__name__ = "Rowset_Holder"
            self.pyclass = Holder

    class FileOperationsLnUserGetNewLNNumOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetNewLNNumOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetNewLNNumOut_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"data"), aname="_data", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetNewLNNumOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetNewLNNumOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetNewLNNumOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FileOperationsLnUserGetNewLNNumRangeOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetNewLNNumRangeOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def.schema
            TClist = [GTD(FSSELN,"LnCodeList",lazy=False)(pname=(ns,"data"), aname="_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FileOperationsLnUserGetLNDataOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetLNDataOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetLNDataOut_Def.schema
            TClist = [self.__class__.data_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetLNDataOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetLNDataOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetLNDataOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class data_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "data"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.FileOperationsLnUserGetLNDataOut_Def.data_Dec.schema
                TClist = [GED(FSSMO,"outRowset",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"data")
                kw["aname"] = "_data"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._outRowset = None
                        return
                Holder.__name__ = "data_Holder"
                self.pyclass = Holder




    class FileOperationsLnUserGetLNListBySnilsOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetLNListBySnilsOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.schema
            TClist = [self.__class__.Data_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Data_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Data"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.Data_Dec.schema
                TClist = [GED(FSSMO,"outRowsetLNListbySnils",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"Data")
                kw["aname"] = "_Data"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._outRowsetLNListbySnils = None
                        return
                Holder.__name__ = "Data_Holder"
                self.pyclass = Holder




    class FileOperationsLnUserGetLNListByDateOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetLNListByDateOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetLNListByDateOut_Def.schema
            TClist = [self.__class__.data_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetLNListByDateOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetLNListByDateOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetLNListByDateOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class data_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "data"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.FileOperationsLnUserGetLNListByDateOut_Def.data_Dec.schema
                TClist = [GED(FSSMO,"outRowsetLNListbyDate",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"data")
                kw["aname"] = "_data"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._outRowsetLNListbyDate = None
                        return
                Holder.__name__ = "data_Holder"
                self.pyclass = Holder




    class FileOperationsLnUserGetExistingLNNumRangeOut_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSMO
        type = (schema, "FileOperationsLnUserGetExistingLNNumRangeOut")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def.schema
            TClist = [GTD(FSSELN,"LnCodeList",lazy=False)(pname=(ns,"data"), aname="_data", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.WSResult_Def not in ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def.__bases__:
                bases = list(ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OutRowset_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "OutRowset")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.OutRowset_Def.schema
            TClist = [GTD(FSSMO,"ResponseRow",lazy=False)(pname=(ns,"responseRow"), aname="_responseRow", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseRow = None
                    return
            Holder.__name__ = "OutRowset_Holder"
            self.pyclass = Holder

    class OutRowsetLNListbySnils_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "OutRowsetLNListbySnils")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.OutRowsetLNListbySnils_Def.schema
            TClist = [GTD(FSSMO,"RowLNbySnils",lazy=False)(pname=(ns,"rowLNbySnils"), aname="_rowLNbySnils", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rowLNbySnils = []
                    return
            Holder.__name__ = "OutRowsetLNListbySnils_Holder"
            self.pyclass = Holder

    class OutRowsetLNListbyDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "OutRowsetLNListbyDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.OutRowsetLNListbyDate_Def.schema
            TClist = [GTD(FSSMO,"RowLNbyDate",lazy=False)(pname=(ns,"rowLNbyDate"), aname="_rowLNbyDate", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rowLNbyDate = []
                    return
            Holder.__name__ = "OutRowsetLNListbyDate_Holder"
            self.pyclass = Holder

    class ResponseRow_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "ResponseRow")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ResponseRow_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"surname"), aname="_surname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"patronymic"), aname="_patronymic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"prevLnCode"), aname="_prevLnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"primaryFlag"), aname="_primaryFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"duplicateFlag"), aname="_duplicateFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"lnDate"), aname="_lnDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"idMo"), aname="_idMo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuName"), aname="_lpuName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuAddress"), aname="_lpuAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuOgrn"), aname="_lpuOgrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthday"), aname="_birthday", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason1"), aname="_reason1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason2"), aname="_reason2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"diagnos"), aname="_diagnos", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date1"), aname="_date1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date2"), aname="_date2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"voucherNo"), aname="_voucherNo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"voucherOgrn"), aname="_voucherOgrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.servData_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregn12wFlag"), aname="_pregn12wFlag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"hospitalDt1"), aname="_hospitalDt1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"hospitalDt2"), aname="_hospitalDt2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(FSSELN,"HospitalBreachInfo",lazy=False)(pname=(ns,"hospitalBreach"), aname="_hospitalBreach", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt1"), aname="_mseDt1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt2"), aname="_mseDt2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"mseDt3"), aname="_mseDt3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"mseInvalidGroup"), aname="_mseInvalidGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.treatPeriods_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(FSSELN,"LnResult",lazy=False)(pname=(ns,"lnResult"), aname="_lnResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnState"), aname="_lnState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnHash"), aname="_lnHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"previouslyIssuedCode"), aname="_previouslyIssuedCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"writtenAgreementFlag"), aname="_writtenAgreementFlag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"intermittentMethodFlag"), aname="_intermittentMethodFlag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._snils = None
                    self._surname = None
                    self._name = None
                    self._patronymic = None
                    self._lnCode = None
                    self._prevLnCode = None
                    self._primaryFlag = None
                    self._duplicateFlag = None
                    self._lnDate = None
                    self._idMo = None
                    self._lpuName = None
                    self._lpuAddress = None
                    self._lpuOgrn = None
                    self._birthday = None
                    self._gender = None
                    self._reason1 = None
                    self._reason2 = None
                    self._diagnos = None
                    self._date1 = None
                    self._date2 = None
                    self._voucherNo = None
                    self._voucherOgrn = None
                    self._servData = None
                    self._pregn12wFlag = None
                    self._hospitalDt1 = None
                    self._hospitalDt2 = None
                    self._hospitalBreach = None
                    self._mseDt1 = None
                    self._mseDt2 = None
                    self._mseDt3 = None
                    self._mseInvalidGroup = None
                    self._treatPeriods = None
                    self._lnResult = None
                    self._lnState = None
                    self._lnHash = None
                    self._previouslyIssuedCode = None
                    self._writtenAgreementFlag = None
                    self._intermittentMethodFlag = None
                    return
            Holder.__name__ = "ResponseRow_Holder"
            self.pyclass = Holder


        class servData_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "servData"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.ResponseRow_Def.servData_Dec.schema
                TClist = [GTD(FSSMO,"ServFullData",lazy=False)(pname=(ns,"servFullData"), aname="_servFullData", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"servData")
                kw["aname"] = "_servData"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._servFullData = []
                        return
                Holder.__name__ = "servData_Holder"
                self.pyclass = Holder





        class treatPeriods_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "treatPeriods"
            schema = FSSMO
            def __init__(self, **kw):
                ns = ns2.ResponseRow_Def.treatPeriods_Dec.schema
                TClist = [GTD(FSSELN,"TreatFullPeriodMo",lazy=False)(pname=(ns,"treatFullPeriod"), aname="_treatFullPeriod", minOccurs=1, maxOccurs=3, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSMO,"treatPeriods")
                kw["aname"] = "_treatPeriods"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._treatFullPeriod = []
                        return
                Holder.__name__ = "treatPeriods_Holder"
                self.pyclass = Holder




    class RowLNbySnils_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "RowLNbySnils")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RowLNbySnils_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"lnDate"), aname="_lnDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnState"), aname="_lnState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lpuOgrn"), aname="_lpuOgrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lnCode = None
                    self._lnDate = None
                    self._lnState = None
                    self._lpuOgrn = None
                    return
            Holder.__name__ = "RowLNbySnils_Holder"
            self.pyclass = Holder

    class RowLNbyDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSMO
        type = (schema, "RowLNbyDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RowLNbyDate_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnState"), aname="_lnState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lnCode = None
                    self._lnState = None
                    self._snils = None
                    return
            Holder.__name__ = "RowLNbyDate_Holder"
            self.pyclass = Holder

    class prParseFilelnlpuRequest_Dec(ElementDeclaration):
        literal = "prParseFilelnlpuRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"prParseFilelnlpuRequest")
            kw["aname"] = "_prParseFilelnlpuRequest"
            if ns2.PrParseFilelnlpuRequest_Def not in ns2.prParseFilelnlpuRequest_Dec.__bases__:
                bases = list(ns2.prParseFilelnlpuRequest_Dec.__bases__)
                bases.insert(0, ns2.PrParseFilelnlpuRequest_Def)
                ns2.prParseFilelnlpuRequest_Dec.__bases__ = tuple(bases)

            ns2.PrParseFilelnlpuRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFilelnlpuRequest_Dec_Holder"

    class prParseFileNumberslpuRequest_Dec(ElementDeclaration):
        literal = "prParseFileNumberslpuRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"prParseFileNumberslpuRequest")
            kw["aname"] = "_prParseFileNumberslpuRequest"
            if ns2.PrParseFileNumberslpuRequest_Def not in ns2.prParseFileNumberslpuRequest_Dec.__bases__:
                bases = list(ns2.prParseFileNumberslpuRequest_Dec.__bases__)
                bases.insert(0, ns2.PrParseFileNumberslpuRequest_Def)
                ns2.prParseFileNumberslpuRequest_Dec.__bases__ = tuple(bases)

            ns2.PrParseFileNumberslpuRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFileNumberslpuRequest_Dec_Holder"

    class getNewLNNumRequest_Dec(ElementDeclaration):
        literal = "getNewLNNumRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getNewLNNumRequest")
            kw["aname"] = "_getNewLNNumRequest"
            if ns2.GetNewLNNumRequest_Def not in ns2.getNewLNNumRequest_Dec.__bases__:
                bases = list(ns2.getNewLNNumRequest_Dec.__bases__)
                bases.insert(0, ns2.GetNewLNNumRequest_Def)
                ns2.getNewLNNumRequest_Dec.__bases__ = tuple(bases)

            ns2.GetNewLNNumRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumRequest_Dec_Holder"

    class getNewLNNumRangeRequest_Dec(ElementDeclaration):
        literal = "getNewLNNumRangeRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getNewLNNumRangeRequest")
            kw["aname"] = "_getNewLNNumRangeRequest"
            if ns2.GetNewLNNumRangeRequest_Def not in ns2.getNewLNNumRangeRequest_Dec.__bases__:
                bases = list(ns2.getNewLNNumRangeRequest_Dec.__bases__)
                bases.insert(0, ns2.GetNewLNNumRangeRequest_Def)
                ns2.getNewLNNumRangeRequest_Dec.__bases__ = tuple(bases)

            ns2.GetNewLNNumRangeRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumRangeRequest_Dec_Holder"

    class getLNDataRequest_Dec(ElementDeclaration):
        literal = "getLNDataRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNDataRequest")
            kw["aname"] = "_getLNDataRequest"
            if ns2.GetLNDataRequest_Def not in ns2.getLNDataRequest_Dec.__bases__:
                bases = list(ns2.getLNDataRequest_Dec.__bases__)
                bases.insert(0, ns2.GetLNDataRequest_Def)
                ns2.getLNDataRequest_Dec.__bases__ = tuple(bases)

            ns2.GetLNDataRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNDataRequest_Dec_Holder"

    class getExistingLNNumRangeRequest_Dec(ElementDeclaration):
        literal = "getExistingLNNumRangeRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getExistingLNNumRangeRequest")
            kw["aname"] = "_getExistingLNNumRangeRequest"
            if ns2.GetExistingLNNumRangeRequest_Def not in ns2.getExistingLNNumRangeRequest_Dec.__bases__:
                bases = list(ns2.getExistingLNNumRangeRequest_Dec.__bases__)
                bases.insert(0, ns2.GetExistingLNNumRangeRequest_Def)
                ns2.getExistingLNNumRangeRequest_Dec.__bases__ = tuple(bases)

            ns2.GetExistingLNNumRangeRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getExistingLNNumRangeRequest_Dec_Holder"

    class getLNListBySnilsRequest_Dec(ElementDeclaration):
        literal = "getLNListBySnilsRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNListBySnilsRequest")
            kw["aname"] = "_getLNListBySnilsRequest"
            if ns2.GetLNListBySnilsRequest_Def not in ns2.getLNListBySnilsRequest_Dec.__bases__:
                bases = list(ns2.getLNListBySnilsRequest_Dec.__bases__)
                bases.insert(0, ns2.GetLNListBySnilsRequest_Def)
                ns2.getLNListBySnilsRequest_Dec.__bases__ = tuple(bases)

            ns2.GetLNListBySnilsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListBySnilsRequest_Dec_Holder"

    class getLNListByDateRequest_Dec(ElementDeclaration):
        literal = "getLNListByDateRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNListByDateRequest")
            kw["aname"] = "_getLNListByDateRequest"
            if ns2.GetLNListByDateRequest_Def not in ns2.getLNListByDateRequest_Dec.__bases__:
                bases = list(ns2.getLNListByDateRequest_Dec.__bases__)
                bases.insert(0, ns2.GetLNListByDateRequest_Def)
                ns2.getLNListByDateRequest_Dec.__bases__ = tuple(bases)

            ns2.GetLNListByDateRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListByDateRequest_Dec_Holder"

    class disableLnRequest_Dec(ElementDeclaration):
        literal = "disableLnRequest"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"disableLnRequest")
            kw["aname"] = "_disableLnRequest"
            if ns2.DisableLnRequest_Def not in ns2.disableLnRequest_Dec.__bases__:
                bases = list(ns2.disableLnRequest_Dec.__bases__)
                bases.insert(0, ns2.DisableLnRequest_Def)
                ns2.disableLnRequest_Dec.__bases__ = tuple(bases)

            ns2.DisableLnRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableLnRequest_Dec_Holder"

    class prParseFilelnlpuResponse_Dec(ElementDeclaration):
        literal = "prParseFilelnlpuResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"prParseFilelnlpuResponse")
            kw["aname"] = "_prParseFilelnlpuResponse"
            if ns3.WSResult_Def not in ns2.prParseFilelnlpuResponse_Dec.__bases__:
                bases = list(ns2.prParseFilelnlpuResponse_Dec.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.prParseFilelnlpuResponse_Dec.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFilelnlpuResponse_Dec_Holder"

    class prParseFileNumberslpuResponse_Dec(ElementDeclaration):
        literal = "prParseFileNumberslpuResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"prParseFileNumberslpuResponse")
            kw["aname"] = "_prParseFileNumberslpuResponse"
            if ns3.WSResult_Def not in ns2.prParseFileNumberslpuResponse_Dec.__bases__:
                bases = list(ns2.prParseFileNumberslpuResponse_Dec.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.prParseFileNumberslpuResponse_Dec.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFileNumberslpuResponse_Dec_Holder"

    class getNewLNNumResponse_Dec(ElementDeclaration):
        literal = "getNewLNNumResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getNewLNNumResponse")
            kw["aname"] = "_getNewLNNumResponse"
            if ns2.FileOperationsLnUserGetNewLNNumOut_Def not in ns2.getNewLNNumResponse_Dec.__bases__:
                bases = list(ns2.getNewLNNumResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetNewLNNumOut_Def)
                ns2.getNewLNNumResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetNewLNNumOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumResponse_Dec_Holder"

    class getNewLNNumRangeResponse_Dec(ElementDeclaration):
        literal = "getNewLNNumRangeResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getNewLNNumRangeResponse")
            kw["aname"] = "_getNewLNNumRangeResponse"
            if ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def not in ns2.getNewLNNumRangeResponse_Dec.__bases__:
                bases = list(ns2.getNewLNNumRangeResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def)
                ns2.getNewLNNumRangeResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetNewLNNumRangeOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumRangeResponse_Dec_Holder"

    class getLNDataResponse_Dec(ElementDeclaration):
        literal = "getLNDataResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNDataResponse")
            kw["aname"] = "_getLNDataResponse"
            if ns2.FileOperationsLnUserGetLNDataOut_Def not in ns2.getLNDataResponse_Dec.__bases__:
                bases = list(ns2.getLNDataResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetLNDataOut_Def)
                ns2.getLNDataResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetLNDataOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNDataResponse_Dec_Holder"

    class getExistingLNNumRangeResponse_Dec(ElementDeclaration):
        literal = "getExistingLNNumRangeResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getExistingLNNumRangeResponse")
            kw["aname"] = "_getExistingLNNumRangeResponse"
            if ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def not in ns2.getExistingLNNumRangeResponse_Dec.__bases__:
                bases = list(ns2.getExistingLNNumRangeResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def)
                ns2.getExistingLNNumRangeResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetExistingLNNumRangeOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getExistingLNNumRangeResponse_Dec_Holder"

    class getLNListBySnilsResponse_Dec(ElementDeclaration):
        literal = "getLNListBySnilsResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNListBySnilsResponse")
            kw["aname"] = "_getLNListBySnilsResponse"
            if ns2.FileOperationsLnUserGetLNListBySnilsOut_Def not in ns2.getLNListBySnilsResponse_Dec.__bases__:
                bases = list(ns2.getLNListBySnilsResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetLNListBySnilsOut_Def)
                ns2.getLNListBySnilsResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetLNListBySnilsOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListBySnilsResponse_Dec_Holder"

    class getLNListByDateResponse_Dec(ElementDeclaration):
        literal = "getLNListByDateResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"getLNListByDateResponse")
            kw["aname"] = "_getLNListByDateResponse"
            if ns2.FileOperationsLnUserGetLNListByDateOut_Def not in ns2.getLNListByDateResponse_Dec.__bases__:
                bases = list(ns2.getLNListByDateResponse_Dec.__bases__)
                bases.insert(0, ns2.FileOperationsLnUserGetLNListByDateOut_Def)
                ns2.getLNListByDateResponse_Dec.__bases__ = tuple(bases)

            ns2.FileOperationsLnUserGetLNListByDateOut_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListByDateResponse_Dec_Holder"

    class disableLnResponse_Dec(ElementDeclaration):
        literal = "disableLnResponse"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"disableLnResponse")
            kw["aname"] = "_disableLnResponse"
            if ns3.WSResult_Def not in ns2.disableLnResponse_Dec.__bases__:
                bases = list(ns2.disableLnResponse_Dec.__bases__)
                bases.insert(0, ns3.WSResult_Def)
                ns2.disableLnResponse_Dec.__bases__ = tuple(bases)

            ns3.WSResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableLnResponse_Dec_Holder"

    class data_Dec(ElementDeclaration):
        literal = "data"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"data")
            kw["aname"] = "_data"
            if ns3.LnCodeList_Def not in ns2.data_Dec.__bases__:
                bases = list(ns2.data_Dec.__bases__)
                bases.insert(0, ns3.LnCodeList_Def)
                ns2.data_Dec.__bases__ = tuple(bases)

            ns3.LnCodeList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "data_Dec_Holder"

    class info_Dec(ElementDeclaration):
        literal = "info"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"info")
            kw["aname"] = "_info"
            if ns3.Info_Def not in ns2.info_Dec.__bases__:
                bases = list(ns2.info_Dec.__bases__)
                bases.insert(0, ns3.Info_Def)
                ns2.info_Dec.__bases__ = tuple(bases)

            ns3.Info_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "info_Dec_Holder"

    class outRowset_Dec(ElementDeclaration):
        literal = "outRowset"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"outRowset")
            kw["aname"] = "_outRowset"
            if ns2.OutRowset_Def not in ns2.outRowset_Dec.__bases__:
                bases = list(ns2.outRowset_Dec.__bases__)
                bases.insert(0, ns2.OutRowset_Def)
                ns2.outRowset_Dec.__bases__ = tuple(bases)

            ns2.OutRowset_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "outRowset_Dec_Holder"

    class outRowsetLNListbySnils_Dec(ElementDeclaration):
        literal = "outRowsetLNListbySnils"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"outRowsetLNListbySnils")
            kw["aname"] = "_outRowsetLNListbySnils"
            if ns2.OutRowsetLNListbySnils_Def not in ns2.outRowsetLNListbySnils_Dec.__bases__:
                bases = list(ns2.outRowsetLNListbySnils_Dec.__bases__)
                bases.insert(0, ns2.OutRowsetLNListbySnils_Def)
                ns2.outRowsetLNListbySnils_Dec.__bases__ = tuple(bases)

            ns2.OutRowsetLNListbySnils_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "outRowsetLNListbySnils_Dec_Holder"

    class outRowsetLNListbyDate_Dec(ElementDeclaration):
        literal = "outRowsetLNListbyDate"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"outRowsetLNListbyDate")
            kw["aname"] = "_outRowsetLNListbyDate"
            if ns2.OutRowsetLNListbyDate_Def not in ns2.outRowsetLNListbyDate_Dec.__bases__:
                bases = list(ns2.outRowsetLNListbyDate_Dec.__bases__)
                bases.insert(0, ns2.OutRowsetLNListbyDate_Def)
                ns2.outRowsetLNListbyDate_Dec.__bases__ = tuple(bases)

            ns2.OutRowsetLNListbyDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "outRowsetLNListbyDate_Dec_Holder"

    class rowset_Dec(ElementDeclaration):
        literal = "rowset"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"rowset")
            kw["aname"] = "_rowset"
            if ns2.Rowset_Def not in ns2.rowset_Dec.__bases__:
                bases = list(ns2.rowset_Dec.__bases__)
                bases.insert(0, ns2.Rowset_Def)
                ns2.rowset_Dec.__bases__ = tuple(bases)

            ns2.Rowset_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "rowset_Dec_Holder"

    class row_Dec(ElementDeclaration):
        literal = "row"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"row")
            kw["aname"] = "_row"
            if ns2.Row_Def not in ns2.row_Dec.__bases__:
                bases = list(ns2.row_Dec.__bases__)
                bases.insert(0, ns2.Row_Def)
                ns2.row_Dec.__bases__ = tuple(bases)

            ns2.Row_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "row_Dec_Holder"

    class hospitalBreach_Dec(ElementDeclaration):
        literal = "hospitalBreach"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"hospitalBreach")
            kw["aname"] = "_hospitalBreach"
            if ns2.HospitalBreach_Def not in ns2.hospitalBreach_Dec.__bases__:
                bases = list(ns2.hospitalBreach_Dec.__bases__)
                bases.insert(0, ns2.HospitalBreach_Def)
                ns2.hospitalBreach_Dec.__bases__ = tuple(bases)

            ns2.HospitalBreach_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hospitalBreach_Dec_Holder"

    class treatFullPeriod_Dec(ElementDeclaration):
        literal = "treatFullPeriod"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"treatFullPeriod")
            kw["aname"] = "_treatFullPeriod"
            if ns3.TreatFullPeriodMo_Def not in ns2.treatFullPeriod_Dec.__bases__:
                bases = list(ns2.treatFullPeriod_Dec.__bases__)
                bases.insert(0, ns3.TreatFullPeriodMo_Def)
                ns2.treatFullPeriod_Dec.__bases__ = tuple(bases)

            ns3.TreatFullPeriodMo_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "treatFullPeriod_Dec_Holder"

    class lnResult_Dec(ElementDeclaration):
        literal = "lnResult"
        schema = FSSMO
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSMO,"lnResult")
            kw["aname"] = "_lnResult"
            if ns2.LnResult_Def not in ns2.lnResult_Dec.__bases__:
                bases = list(ns2.lnResult_Dec.__bases__)
                bases.insert(0, ns2.LnResult_Def)
                ns2.lnResult_Dec.__bases__ = tuple(bases)

            ns2.LnResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "lnResult_Dec_Holder"

# end class ns2 (tns: http://www.fss.ru/integration/types/eln/mo/v01)

##############################
# targetNamespace
# http://www.fss.ru/integration/types/eln/v01
##############################

class ns3:
    targetNamespace = FSSELN

    class TreatPeriod_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "TreatPeriod")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatPeriod_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"treatDt1"), aname="_treatDt1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"treatDt2"), aname="_treatDt2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"idDoctor"), aname="_idDoctor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"treatDoctorRole"), aname="_treatDoctorRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"treatDoctor"), aname="_treatDoctor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._treatDt1 = None
                    self._treatDt2 = None
                    self._idDoctor = None
                    self._treatDoctorRole = None
                    self._treatDoctor = None
                    return
            Holder.__name__ = "TreatPeriod_Holder"
            self.pyclass = Holder

    class TreatFullPeriod_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "TreatFullPeriod")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatFullPeriod_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"treatChairman"), aname="_treatChairman", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"treatChairmanRole"), aname="_treatChairmanRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(FSSELN,"TreatPeriod",lazy=False)(pname=(ns,"treatPeriod"), aname="_treatPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._treatChairman = None
                    self._treatChairmanRole = None
                    self._treatPeriod = None
                    return
            Holder.__name__ = "TreatFullPeriod_Holder"
            self.pyclass = Holder

    class TreatFullPeriodMo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "TreatFullPeriodMo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatFullPeriodMo_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"treatChairman"), aname="_treatChairman", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"treatChairmanRole"), aname="_treatChairmanRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(FSSELN,"TreatPeriod",lazy=False)(pname=(ns,"treatPeriod"), aname="_treatPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._treatChairman = None
                    self._treatChairmanRole = None
                    self._treatPeriod = None
                    return
            Holder.__name__ = "TreatFullPeriodMo_Holder"
            self.pyclass = Holder

    class ServFullData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "ServFullData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ServFullData_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"servRelationCode"), aname="_servRelationCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"servDt1"), aname="_servDt1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"servDt2"), aname="_servDt2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"treatmentType"), aname="_treatmentType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"surname"), aname="_surname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"patronymic"), aname="_patronymic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthday"), aname="_birthday", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason1"), aname="_reason1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._servRelationCode = None
                    self._servDt1 = None
                    self._servDt2 = None
                    self._treatmentType = None
                    self._surname = None
                    self._name = None
                    self._patronymic = None
                    self._birthday = None
                    self._reason1 = None
                    self._snils = None
                    return
            Holder.__name__ = "ServFullData_Holder"
            self.pyclass = Holder

    class LnResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "LnResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LnResult_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"returnDateLpu"), aname="_returnDateLpu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"mseResult"), aname="_mseResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"otherStateDt"), aname="_otherStateDt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"nextLnCode"), aname="_nextLnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnDateLpu = None
                    self._mseResult = None
                    self._otherStateDt = None
                    self._nextLnCode = None
                    return
            Holder.__name__ = "LnResult_Holder"
            self.pyclass = Holder

    class HospitalBreachInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "HospitalBreachInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.HospitalBreachInfo_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"hospitalBreachCode"), aname="_hospitalBreachCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"hospitalBreachDt"), aname="_hospitalBreachDt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hospitalBreachCode = None
                    self._hospitalBreachDt = None
                    return
            Holder.__name__ = "HospitalBreachInfo_Holder"
            self.pyclass = Holder

    class WSResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "WSResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.WSResult_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"requestId"), aname="_requestId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"mess"), aname="_mess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(FSSELN,"Info",lazy=False)(pname=(ns,"info"), aname="_info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._status = None
                    self._mess = None
                    self._info = None
                    return
            Holder.__name__ = "WSResult_Holder"
            self.pyclass = Holder

    class LnCodeList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "LnCodeList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LnCodeList_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lnCode = []
                    return
            Holder.__name__ = "LnCodeList_Holder"
            self.pyclass = Holder

    class Info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSELN
        type = (schema, "Info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Info_Def.schema
            TClist = [self.__class__.infoRowset_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infoRowset = None
                    return
            Holder.__name__ = "Info_Holder"
            self.pyclass = Holder


        class infoRowset_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "infoRowset"
            schema = FSSELN
            def __init__(self, **kw):
                ns = ns3.Info_Def.infoRowset_Dec.schema
                TClist = [self.__class__.infoRow_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (FSSELN,"infoRowset")
                kw["aname"] = "_infoRowset"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._infoRow = []
                        return
                Holder.__name__ = "infoRowset_Holder"
                self.pyclass = Holder


            class infoRow_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "infoRow"
                schema = FSSELN
                def __init__(self, **kw):
                    ns = ns3.Info_Def.infoRowset_Dec.infoRow_Dec.schema
                    TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"rowNo"), aname="_rowNo", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnHash"), aname="_lnHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnState"), aname="_lnState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.errors_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                    kw["pname"] = (FSSELN,"infoRow")
                    kw["aname"] = "_infoRow"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._rowNo = None
                            self._lnCode = None
                            self._lnHash = None
                            self._lnState = None
                            self._status = None
                            self._errors = None
                            return
                    Holder.__name__ = "infoRow_Holder"
                    self.pyclass = Holder


                class errors_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "errors"
                    schema = FSSELN
                    def __init__(self, **kw):
                        ns = ns3.Info_Def.infoRowset_Dec.infoRow_Dec.errors_Dec.schema
                        TClist = [self.__class__.error_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                        kw["pname"] = (FSSELN,"errors")
                        kw["aname"] = "_errors"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                self._error = []
                                return
                        Holder.__name__ = "errors_Holder"
                        self.pyclass = Holder


                    class error_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                        literal = "error"
                        schema = FSSELN
                        def __init__(self, **kw):
                            ns = ns3.Info_Def.infoRowset_Dec.infoRow_Dec.errors_Dec.error_Dec.schema
                            TClist = [ZSI.TC.String(strip=False, pname=(ns,"errCode"), aname="_errCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"errMess"), aname="_errMess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                            kw["pname"] = (FSSELN,"error")
                            kw["aname"] = "_error"
                            self.attribute_typecode_dict = {}
                            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                            class Holder:
                                __metaclass__ = pyclass_type
                                typecode = self
                                def __init__(self):
                                    # pyclass
                                    self._errCode = None
                                    self._errMess = None
                                    return
                            Holder.__name__ = "error_Holder"
                            self.pyclass = Holder













    class treatPeriod_Dec(ElementDeclaration):
        literal = "treatPeriod"
        schema = FSSELN
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSELN,"treatPeriod")
            kw["aname"] = "_treatPeriod"
            if ns3.TreatPeriod_Def not in ns3.treatPeriod_Dec.__bases__:
                bases = list(ns3.treatPeriod_Dec.__bases__)
                bases.insert(0, ns3.TreatPeriod_Def)
                ns3.treatPeriod_Dec.__bases__ = tuple(bases)

            ns3.TreatPeriod_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "treatPeriod_Dec_Holder"

# end class ns3 (tns: http://www.fss.ru/integration/types/eln/v01)

##############################
# targetNamespace
# http://www.fss.ru/integration/types/fault/v01
##############################

class ns4:
    targetNamespace = FSSFAULT

    class CommonFault_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = FSSFAULT
        type = (schema, "CommonFault")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.CommonFault_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"uuid"), aname="_uuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"code"), aname="_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._uuid = None
                    self._code = None
                    self._message = None
                    return
            Holder.__name__ = "CommonFault_Holder"
            self.pyclass = Holder

    class InternalFault_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = FSSFAULT
        type = (schema, "InternalFault")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.InternalFault_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns4.CommonFault_Def not in ns4.InternalFault_Def.__bases__:
                bases = list(ns4.InternalFault_Def.__bases__)
                bases.insert(0, ns4.CommonFault_Def)
                ns4.InternalFault_Def.__bases__ = tuple(bases)

            ns4.CommonFault_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class internalFault_Dec(ElementDeclaration):
        literal = "internalFault"
        schema = FSSFAULT
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (FSSFAULT,"internalFault")
            kw["aname"] = "_internalFault"
            if ns4.InternalFault_Def not in ns4.internalFault_Dec.__bases__:
                bases = list(ns4.internalFault_Dec.__bases__)
                bases.insert(0, ns4.InternalFault_Def)
                ns4.internalFault_Dec.__bases__ = tuple(bases)

            ns4.InternalFault_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "internalFault_Dec_Holder"

# end class ns4 (tns: http://www.fss.ru/integration/types/fault/v01)

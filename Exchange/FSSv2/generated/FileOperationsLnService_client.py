##################################################
# file: FileOperationsLnService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py -b ../wsdl/fixed/FileOperationsLnService.wsdl
# 
##################################################

from FileOperationsLnService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type
from fssns import FSSMO, FSSELN, FSSFAULT

# Locator
class FileOperationsLnServiceLocator:
    FileOperationsLnPort_address = "https://docs-test.fss.ru/WSLnV20_2/FileOperationsLnService"
    def getFileOperationsLnPortAddress(self):
        return FileOperationsLnServiceLocator.FileOperationsLnPort_address
    def getFileOperationsLnPort(self, url=None, **kw):
        return FileOperationsLnBindingSOAP(url or FileOperationsLnServiceLocator.FileOperationsLnPort_address, **kw)

# Methods
class FileOperationsLnBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: PrParseFilelnlpu
    def PrParseFilelnlpu(self, request, **kw):
        if isinstance(request, PrParseFilelnlpuRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/prParseFilelnlpu/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(PrParseFilelnlpuResponse.typecode)
        return response

    # op: PrParseFileNumberslpu
    def PrParseFileNumberslpu(self, request, **kw):
        if isinstance(request, PrParseFileNumberslpuRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/parseFileNumberslpu/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(PrParseFileNumberslpuResponse.typecode)
        return response

    # op: GetLNListByDate
    def GetLNListByDate(self, request, **kw):
        if isinstance(request, GetLNListByDateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getLNListByDate/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetLNListByDateResponse.typecode)
        return response

    # op: GetLNListBySnils
    def GetLNListBySnils(self, request, **kw):
        if isinstance(request, GetLNListBySnilsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getLNListBySnils/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetLNListBySnilsResponse.typecode)
        return response

    # op: GetExistingLNNumRange
    def GetExistingLNNumRange(self, request, **kw):
        if isinstance(request, GetExistingLNNumRangeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getExistingLNNumRange/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetExistingLNNumRangeResponse.typecode)
        return response

    # op: GetNewLNNum
    def GetNewLNNum(self, request, **kw):
        if isinstance(request, GetNewLNNumRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getNewLNNum/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetNewLNNumResponse.typecode)
        return response

    # op: GetNewLNNumRange
    def GetNewLNNumRange(self, request, **kw):
        if isinstance(request, GetNewLNNumRangeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getNewLNNumRange/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetNewLNNumRangeResponse.typecode)
        return response

    # op: GetLNData
    def GetLNData(self, request, **kw):
        if isinstance(request, GetLNDataRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/getLNData/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(GetLNDataResponse.typecode)
        return response

    # op: DisableLn
    def DisableLn(self, request, **kw):
        if isinstance(request, DisableLnRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.fss.ru/integration/ws/eln/mo/disableLn/v01", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableLnResponse.typecode)
        return response

PrParseFilelnlpuRequest = GED(FSSMO, "prParseFilelnlpuRequest").pyclass

PrParseFilelnlpuResponse = GED(FSSMO, "prParseFilelnlpuResponse").pyclass

PrParseFileNumberslpuRequest = GED(FSSMO, "prParseFileNumberslpuRequest").pyclass

PrParseFileNumberslpuResponse = GED(FSSMO, "prParseFileNumberslpuResponse").pyclass

GetLNListByDateRequest = GED(FSSMO, "getLNListByDateRequest").pyclass

GetLNListByDateResponse = GED(FSSMO, "getLNListByDateResponse").pyclass

GetLNListBySnilsRequest = GED(FSSMO, "getLNListBySnilsRequest").pyclass

GetLNListBySnilsResponse = GED(FSSMO, "getLNListBySnilsResponse").pyclass

GetExistingLNNumRangeRequest = GED(FSSMO, "getExistingLNNumRangeRequest").pyclass

GetExistingLNNumRangeResponse = GED(FSSMO, "getExistingLNNumRangeResponse").pyclass

GetNewLNNumRequest = GED(FSSMO, "getNewLNNumRequest").pyclass

GetNewLNNumResponse = GED(FSSMO, "getNewLNNumResponse").pyclass

GetNewLNNumRangeRequest = GED(FSSMO, "getNewLNNumRangeRequest").pyclass

GetNewLNNumRangeResponse = GED(FSSMO, "getNewLNNumRangeResponse").pyclass

GetLNDataRequest = GED(FSSMO, "getLNDataRequest").pyclass

GetLNDataResponse = GED(FSSMO, "getLNDataResponse").pyclass

DisableLnRequest = GED(FSSMO, "disableLnRequest").pyclass

DisableLnResponse = GED(FSSMO, "disableLnResponse").pyclass

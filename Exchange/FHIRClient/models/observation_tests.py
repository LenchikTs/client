#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 0.5.0.5149 on 2016-03-29.
#  2016, SMART Health IT.


import os
import io
import unittest
import json
import observation
from .fhirdate import FHIRDate


class ObservationTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Observation", js["resourceType"])
        return observation.Observation(js)
    
    def testObservation1(self):
        inst = self.instantiate_from("observation-example-f004-erythrocyte.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation1(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation1(inst2)
    
    def implObservation1(self, inst):
        self.assertEqual(inst.appliesPeriod.end.date, FHIRDate("2013-04-05T10:30:10+01:00").date)
        self.assertEqual(inst.appliesPeriod.end.as_json(), "2013-04-05T10:30:10+01:00")
        self.assertEqual(inst.appliesPeriod.start.date, FHIRDate("2013-04-02T10:30:10+01:00").date)
        self.assertEqual(inst.appliesPeriod.start.as_json(), "2013-04-02T10:30:10+01:00")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].code, "308046002")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].display, "Superficial forearm vein")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].system, "http://snomed.info/id")
        self.assertEqual(inst.code.coding[0].code, "789-8")
        self.assertEqual(inst.code.coding[0].display, "Erythrocytes [#/volume] in Blood by Automated count")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.id, "f004")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/zorgportal/identifiers/observations")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "6326")
        self.assertEqual(inst.interpretation.coding[0].code, "A")
        self.assertEqual(inst.interpretation.coding[0].display, "abnormal")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2013-04-03T15:30:10+01:00").date)
        self.assertEqual(inst.issued.as_json(), "2013-04-03T15:30:10+01:00")
        self.assertEqual(inst.method.coding[0].code, "120220003")
        self.assertEqual(inst.method.coding[0].display, "Injection to forearm")
        self.assertEqual(inst.method.coding[0].system, "http://snomed.info/id")
        self.assertEqual(inst.referenceRange[0].high.code, "10*12/L")
        self.assertEqual(inst.referenceRange[0].high.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].high.units, "10^12/L")
        self.assertEqual(inst.referenceRange[0].high.value, 5.8)
        self.assertEqual(inst.referenceRange[0].low.code, "10*12/L")
        self.assertEqual(inst.referenceRange[0].low.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].low.units, "10^12/L")
        self.assertEqual(inst.referenceRange[0].low.value, 4.4)
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "10*12/L")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.units, "10^12/L")
        self.assertEqual(inst.valueQuantity.value, 4.12)
    
    def testObservation2(self):
        inst = self.instantiate_from("obs-genetics-example1-somatic.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation2(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation2(inst2)
    
    def implObservation2(self, inst):
        self.assertEqual(inst.code.coding[0].code, "21665-5")
        self.assertEqual(inst.code.coding[0].display, "EGFR gene mutation analysis")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.comments, "The EGFR p.L858R mutation has been associated with response to anti-EGFR therapy")
        self.assertEqual(inst.contained[0].id, "c1")
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/geneticsGenomeBuild")
        self.assertEqual(inst.extension[0].valueString, "GRCh 37")
        self.assertEqual(inst.extension[1].url, "http://hl7.org/fhir/StructureDefinition/geneticsChromosome")
        self.assertEqual(inst.extension[1].valueString, "7")
        self.assertEqual(inst.extension[2].url, "http://hl7.org/fhir/StructureDefinition/geneticsGenomicReferenceSequenceId")
        self.assertEqual(inst.extension[2].valueCode, "NC_000007.13")
        self.assertEqual(inst.extension[3].url, "http://hl7.org/fhir/StructureDefinition/geneticsGenomicStart")
        self.assertEqual(inst.extension[3].valueInteger, 55259515)
        self.assertEqual(inst.extension[4].url, "http://hl7.org/fhir/StructureDefinition/geneticsGenomicStop")
        self.assertEqual(inst.extension[4].valueInteger, 55259515)
        self.assertEqual(inst.extension[5].url, "http://hl7.org/fhir/StructureDefinition/geneticsReferenceAllele")
        self.assertEqual(inst.extension[5].valueString, "T")
        self.assertEqual(inst.extension[6].url, "http://hl7.org/fhir/StructureDefinition/geneticsObservedAllele")
        self.assertEqual(inst.extension[6].valueString, "G")
        self.assertEqual(inst.extension[7].url, "http://hl7.org/fhir/StructureDefinition/geneticsGeneId")
        self.assertEqual(inst.extension[7].valueCodeableConcept.coding[0].code, "3236")
        self.assertEqual(inst.extension[7].valueCodeableConcept.coding[0].display, "EGFR")
        self.assertEqual(inst.extension[7].valueCodeableConcept.coding[0].system, "http://www.genenames.org")
        self.assertEqual(inst.extension[8].url, "http://hl7.org/fhir/StructureDefinition/geneticsTranscriptReferenceSequenseId")
        self.assertEqual(inst.extension[8].valueCode, "ENSESTT00000085772.1")
        self.assertEqual(inst.extension[9].url, "http://hl7.org/fhir/StructureDefinition/geneticsDNASequenceVariation")
        self.assertEqual(inst.extension[9].valueString, "c.2573T>G")
        self.assertEqual(inst.id, "genetics-example1-somatic")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
    
    def testObservation3(self):
        inst = self.instantiate_from("obs-uslab-example1.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation3(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation3(inst2)
    
    def implObservation3(self, inst):
        self.assertEqual(inst.appliesDateTime.date, FHIRDate("2014-12-03").date)
        self.assertEqual(inst.appliesDateTime.as_json(), "2014-12-03")
        self.assertEqual(inst.code.coding[0].code, "10368-9")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "CAPLD")
        self.assertEqual(inst.code.coding[1].display, "Blood Lead, Capillary")
        self.assertEqual(inst.code.coding[1].system, "urn:oid:2.16.840.1.113883.3.72.5.24")
        self.assertEqual(inst.code.text, "Capillary Blood Lead Screen")
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/uslabobservationkind")
        self.assertEqual(inst.extension[0].valueCode, "result")
        self.assertEqual(inst.id, "uslab-example1")
        self.assertEqual(inst.identifier[0].system, "http://lis.acmelabs.org/identifiers/labtestresult")
        self.assertEqual(inst.identifier[0].type.text, "lab test result ID")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "1234")
        self.assertEqual(inst.interpretation.coding[0].code, "H")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2014-12-04T15:42:15-08:00").date)
        self.assertEqual(inst.issued.as_json(), "2014-12-04T15:42:15-08:00")
        self.assertEqual(inst.referenceRange[0].high.code, "ug/dL")
        self.assertEqual(inst.referenceRange[0].high.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].high.units, "microgram per deciliter")
        self.assertEqual(inst.referenceRange[0].high.value, 5.0)
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "ug/dL")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.units, "microgram per deciliter")
        self.assertEqual(inst.valueQuantity.value, 65)
    
    def testObservation4(self):
        inst = self.instantiate_from("observation-example-f204-creatinine.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation4(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation4(inst2)
    
    def implObservation4(self, inst):
        self.assertEqual(inst.code.coding[0].code, "365756002")
        self.assertEqual(inst.code.coding[0].display, "Creatinine level")
        self.assertEqual(inst.code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f204")
        self.assertEqual(inst.identifier[0].system, "https://intranet.aumc.nl/labvalues")
        self.assertEqual(inst.identifier[0].value, "1304-03720-Creatinine")
        self.assertEqual(inst.interpretation.coding[0].code, "166717003")
        self.assertEqual(inst.interpretation.coding[0].display, "Serum creatinine raised")
        self.assertEqual(inst.interpretation.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.interpretation.coding[1].code, "H")
        self.assertEqual(inst.interpretation.coding[1].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2013-04-04T14:34:00+01:00").date)
        self.assertEqual(inst.issued.as_json(), "2013-04-04T14:34:00+01:00")
        self.assertEqual(inst.method.coding[0].code, "113075003")
        self.assertEqual(inst.method.coding[0].display, "Creatinine measurement, serum")
        self.assertEqual(inst.method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.referenceRange[0].high.value, 104)
        self.assertEqual(inst.referenceRange[0].low.value, 64)
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].code, "normal")
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].display, "Normal Range")
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].system, "http://hl7.org/fhir/referencerange-meaning")
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "258814008")
        self.assertEqual(inst.valueQuantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.valueQuantity.units, "umol/L")
        self.assertEqual(inst.valueQuantity.value, 122)
    
    def testObservation5(self):
        inst = self.instantiate_from("observation-example-satO2.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation5(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation5(inst2)
    
    def implObservation5(self, inst):
        self.assertEqual(inst.appliesDateTime.date, FHIRDate("2014-12-05T09:30:10+01:00").date)
        self.assertEqual(inst.appliesDateTime.as_json(), "2014-12-05T09:30:10+01:00")
        self.assertEqual(inst.code.coding[0].code, "150456")
        self.assertEqual(inst.code.coding[0].display, "MDC_PULS_OXIM_SAT_O2")
        self.assertEqual(inst.code.coding[0].system, "https://rtmms.nist.gov")
        self.assertEqual(inst.id, "satO2")
        self.assertEqual(inst.identifier[0].system, "http://goodcare.org/observation/id")
        self.assertEqual(inst.identifier[0].value, "o1223435-10")
        self.assertEqual(inst.interpretation.coding[0].code, "N")
        self.assertEqual(inst.interpretation.coding[0].display, "normal")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.referenceRange[0].high.code, "262688")
        self.assertEqual(inst.referenceRange[0].high.system, "https://rtmms.nist.gov")
        self.assertEqual(inst.referenceRange[0].high.units, "percent")
        self.assertEqual(inst.referenceRange[0].high.value, 99)
        self.assertEqual(inst.referenceRange[0].low.code, "262688")
        self.assertEqual(inst.referenceRange[0].low.system, "https://rtmms.nist.gov")
        self.assertEqual(inst.referenceRange[0].low.units, "percent")
        self.assertEqual(inst.referenceRange[0].low.value, 90)
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.div, "<div>Dec 04 2014: Oxygen saturation 95% (normal)</div>")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "262688")
        self.assertEqual(inst.valueQuantity.system, "https://rtmms.nist.gov")
        self.assertEqual(inst.valueQuantity.units, "percent")
        self.assertEqual(inst.valueQuantity.value, 95)
    
    def testObservation6(self):
        inst = self.instantiate_from("observation-example-f203-bicarbonate.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation6(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation6(inst2)
    
    def implObservation6(self, inst):
        self.assertEqual(inst.code.coding[0].code, "365722008")
        self.assertEqual(inst.code.coding[0].display, "Bicarbonate level")
        self.assertEqual(inst.code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f203")
        self.assertEqual(inst.identifier[0].system, "https://intranet.aumc.nl/labvalues")
        self.assertEqual(inst.identifier[0].value, "1304-03720-Bicarbonate")
        self.assertEqual(inst.interpretation.coding[0].code, "166698001")
        self.assertEqual(inst.interpretation.coding[0].display, "Serum bicarbonate level normal")
        self.assertEqual(inst.interpretation.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.interpretation.coding[1].code, "N")
        self.assertEqual(inst.interpretation.coding[1].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2013-04-04T14:34:00+01:00").date)
        self.assertEqual(inst.issued.as_json(), "2013-04-04T14:34:00+01:00")
        self.assertEqual(inst.method.coding[0].code, "271239003")
        self.assertEqual(inst.method.coding[0].display, "Serum bicarbonate measurement")
        self.assertEqual(inst.method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.referenceRange[0].high.value, 29)
        self.assertEqual(inst.referenceRange[0].low.value, 22)
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].code, "normal")
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].display, "Normal Range")
        self.assertEqual(inst.referenceRange[0].meaning.coding[0].system, "http://hl7.org/fhir/referencerange-meaning")
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "258813002")
        self.assertEqual(inst.valueQuantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.valueQuantity.units, "mmol/L")
        self.assertEqual(inst.valueQuantity.value, 28)
    
    def testObservation7(self):
        inst = self.instantiate_from("obs-uslab-example8.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation7(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation7(inst2)
    
    def implObservation7(self, inst):
        self.assertEqual(inst.appliesDateTime.date, FHIRDate("2014-12-03").date)
        self.assertEqual(inst.appliesDateTime.as_json(), "2014-12-03")
        self.assertEqual(inst.code.coding[0].code, "5821-4")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "WBCFLD")
        self.assertEqual(inst.code.coding[1].display, "White blood cells (WBC) in urine ")
        self.assertEqual(inst.code.coding[1].system, "urn:oid:2.16.840.1.113883.3.72.5.24")
        self.assertEqual(inst.code.text, "White blood cells (WBC) in urine")
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/uslabobservationkind")
        self.assertEqual(inst.extension[0].valueCode, "result")
        self.assertEqual(inst.id, "uslab-example8")
        self.assertEqual(inst.identifier[0].system, "http://lis.acmelabs.org/identifiers/labtestresult")
        self.assertEqual(inst.identifier[0].type.text, "lab test result ID")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "9099")
        self.assertEqual(inst.interpretation.coding[0].code, "H")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2014-12-04T15:42:15-08:00").date)
        self.assertEqual(inst.issued.as_json(), "2014-12-04T15:42:15-08:00")
        self.assertEqual(inst.referenceRange[0].high.code, "/[HPF]")
        self.assertEqual(inst.referenceRange[0].high.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].high.units, "WBC/HPF")
        self.assertEqual(inst.referenceRange[0].high.value, 5)
        self.assertEqual(inst.referenceRange[0].low.code, "/[HPF]")
        self.assertEqual(inst.referenceRange[0].low.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].low.units, "WBC/HPF")
        self.assertEqual(inst.referenceRange[0].low.value, 0)
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueRange.high.units, "WBC/HPF")
        self.assertEqual(inst.valueRange.high.value, 20)
        self.assertEqual(inst.valueRange.low.units, "WBC/HPF")
        self.assertEqual(inst.valueRange.low.value, 10)
    
    def testObservation8(self):
        inst = self.instantiate_from("observation-example-f202-temperature.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation8(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation8(inst2)
    
    def implObservation8(self, inst):
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].code, "38266002")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].display, "Entire body as a whole")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code, "415945006")
        self.assertEqual(inst.code.coding[0].display, "Oral temperature")
        self.assertEqual(inst.code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[1].code, "8310-5")
        self.assertEqual(inst.code.coding[1].display, "Body temperature")
        self.assertEqual(inst.code.coding[1].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "Body temperature")
        self.assertEqual(inst.id, "f202")
        self.assertEqual(inst.interpretation.coding[0].code, "H")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2013-04-04T13:27:00+01:00").date)
        self.assertEqual(inst.issued.as_json(), "2013-04-04T13:27:00+01:00")
        self.assertEqual(inst.method.coding[0].code, "89003005")
        self.assertEqual(inst.method.coding[0].display, "Oral temperature taking")
        self.assertEqual(inst.method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.referenceRange[0].low.units, "degrees C")
        self.assertEqual(inst.referenceRange[0].low.value, 37.5)
        self.assertEqual(inst.reliability, "questionable")
        self.assertEqual(inst.status, "entered-in-error")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "258710007")
        self.assertEqual(inst.valueQuantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.valueQuantity.units, "degrees C")
        self.assertEqual(inst.valueQuantity.value, 39)
    
    def testObservation9(self):
        inst = self.instantiate_from("observation-example-f003-co2.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation9(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation9(inst2)
    
    def implObservation9(self, inst):
        self.assertEqual(inst.appliesPeriod.end.date, FHIRDate("2013-04-05T10:30:10+01:00").date)
        self.assertEqual(inst.appliesPeriod.end.as_json(), "2013-04-05T10:30:10+01:00")
        self.assertEqual(inst.appliesPeriod.start.date, FHIRDate("2013-04-02T10:30:10+01:00").date)
        self.assertEqual(inst.appliesPeriod.start.as_json(), "2013-04-02T10:30:10+01:00")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].code, "308046002")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].display, "Superficial forearm vein")
        self.assertEqual(inst.bodySiteCodeableConcept.coding[0].system, "http://snomed.info/id")
        self.assertEqual(inst.code.coding[0].code, "11557-6")
        self.assertEqual(inst.code.coding[0].display, "Carbon dioxide in blood")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.id, "f003")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/zorgportal/identifiers/observations")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "6325")
        self.assertEqual(inst.interpretation.coding[0].code, "A")
        self.assertEqual(inst.interpretation.coding[0].display, "abnormal")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.issued.date, FHIRDate("2013-04-03T15:30:10+01:00").date)
        self.assertEqual(inst.issued.as_json(), "2013-04-03T15:30:10+01:00")
        self.assertEqual(inst.method.coding[0].code, "120220003")
        self.assertEqual(inst.method.coding[0].display, "Injection to forearm")
        self.assertEqual(inst.method.coding[0].system, "http://snomed.info/id")
        self.assertEqual(inst.referenceRange[0].high.code, "kPa")
        self.assertEqual(inst.referenceRange[0].high.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].high.units, "kPa")
        self.assertEqual(inst.referenceRange[0].high.value, 6.0)
        self.assertEqual(inst.referenceRange[0].low.code, "kPa")
        self.assertEqual(inst.referenceRange[0].low.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.referenceRange[0].low.units, "kPa")
        self.assertEqual(inst.referenceRange[0].low.value, 4.8)
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "kPa")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.units, "kPa")
        self.assertEqual(inst.valueQuantity.value, 6.2)
    
    def testObservation10(self):
        inst = self.instantiate_from("observation-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation10(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation10(inst2)
    
    def implObservation10(self, inst):
        self.assertEqual(inst.code.coding[0].code, "3141-9")
        self.assertEqual(inst.code.coding[0].display, "Weight Measured")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "27113001")
        self.assertEqual(inst.code.coding[1].display, "Body weight")
        self.assertEqual(inst.code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[2].code, "body-weight")
        self.assertEqual(inst.code.coding[2].display, "Body Weight")
        self.assertEqual(inst.code.coding[2].system, "http://acme.org/devices/clinical-codes")
        self.assertEqual(inst.id, "example")
        self.assertEqual(inst.reliability, "ok")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "[lb_av]")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.units, "lbs")
        self.assertEqual(inst.valueQuantity.value, 185)


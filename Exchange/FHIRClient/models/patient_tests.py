#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 0.5.0.5149 on 2016-03-29.
#  2016, SMART Health IT.


import os
import io
import unittest
import json
import patient
from .fhirdate import FHIRDate


class PatientTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Patient", js["resourceType"])
        return patient.Patient(js)
    
    def testPatient1(self):
        inst = self.instantiate_from("patient-example-xds.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient1(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient1(inst2)
    
    def implPatient1(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city, "Metropolis")
        self.assertEqual(inst.address[0].country, "USA")
        self.assertEqual(inst.address[0].line[0], "100 Main St")
        self.assertEqual(inst.address[0].postalCode, "44130")
        self.assertEqual(inst.address[0].state, "Il")
        self.assertEqual(inst.birthDate.date, FHIRDate("1956-05-27").date)
        self.assertEqual(inst.birthDate.as_json(), "1956-05-27")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "xds")
        self.assertEqual(inst.identifier[0].system, "urn:oid:1.2.3.4.5")
        self.assertEqual(inst.identifier[0].type.coding[0].code, "MRN")
        self.assertEqual(inst.identifier[0].type.coding[0].system, "http://hl7.org/fhir/v2/0203")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "89765a87b")
        self.assertEqual(inst.name[0].family[0], "Doe")
        self.assertEqual(inst.name[0].given[0], "John")
        self.assertEqual(inst.text.div, "<div>\n      \n      <p>Patient John Doe, M, 27-May 1956. ID: 89765a87b</p>\n    \n    </div>")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient2(self):
        inst = self.instantiate_from("patient-example-f001-pieter.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient2(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient2(inst2)
    
    def implPatient2(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city, "Amsterdam")
        self.assertEqual(inst.address[0].country, "NLD")
        self.assertEqual(inst.address[0].line[0], "Van Egmondkade 23")
        self.assertEqual(inst.address[0].postalCode, "1024 RJ")
        self.assertEqual(inst.address[0].use, "home")
        self.assertEqual(inst.birthDate.date, FHIRDate("1944-11-17").date)
        self.assertEqual(inst.birthDate.as_json(), "1944-11-17")
        self.assertEqual(inst.communication[0].language.coding[0].code, "nl")
        self.assertEqual(inst.communication[0].language.coding[0].display, "Dutch")
        self.assertEqual(inst.communication[0].language.coding[0].system, "urn:ietf:bcp:47")
        self.assertEqual(inst.communication[0].language.text, "Nederlands")
        self.assertTrue(inst.communication[0].preferred)
        self.assertEqual(inst.contact[0].name.family[0], "Abels")
        self.assertEqual(inst.contact[0].name.given[0], "Sarah")
        self.assertEqual(inst.contact[0].name.use, "usual")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code, "partner")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system, "http://hl7.org/fhir/patient-contact-relationship")
        self.assertEqual(inst.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contact[0].telecom[0].use, "mobile")
        self.assertEqual(inst.contact[0].telecom[0].value, "0690383372")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "f001")
        self.assertEqual(inst.identifier[0].system, "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "738472983")
        self.assertEqual(inst.identifier[1].system, "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use, "usual")
        self.assertEqual(inst.maritalStatus.coding[0].code, "M")
        self.assertEqual(inst.maritalStatus.coding[0].display, "Married")
        self.assertEqual(inst.maritalStatus.coding[0].system, "http://hl7.org/fhir/v3/MaritalStatus")
        self.assertEqual(inst.maritalStatus.text, "Getrouwd")
        self.assertTrue(inst.multipleBirthBoolean)
        self.assertEqual(inst.name[0].family[0], "van de Heuvel")
        self.assertEqual(inst.name[0].given[0], "Pieter")
        self.assertEqual(inst.name[0].suffix[0], "MSc")
        self.assertEqual(inst.name[0].use, "usual")
        self.assertEqual(inst.telecom[0].system, "phone")
        self.assertEqual(inst.telecom[0].use, "mobile")
        self.assertEqual(inst.telecom[0].value, "0648352638")
        self.assertEqual(inst.telecom[1].system, "email")
        self.assertEqual(inst.telecom[1].use, "home")
        self.assertEqual(inst.telecom[1].value, "p.heuvel@gmail.com")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient3(self):
        inst = self.instantiate_from("patient-uslab-example2.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient3(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient3(inst2)
    
    def implPatient3(self, inst):
        self.assertEqual(inst.address[0].city, "Harrisburg")
        self.assertEqual(inst.address[0].country, "USA")
        self.assertEqual(inst.address[0].extension[0].extension[0].url, "http://example.org//iso21090-SC-coding")
        self.assertEqual(inst.address[0].extension[0].extension[0].valueCoding.code, "42043")
        self.assertEqual(inst.address[0].extension[0].extension[0].valueCoding.system, "https://www.census.gov/geo/reference")
        self.assertEqual(inst.address[0].extension[0].url, "http://example.org/us-core-county")
        self.assertEqual(inst.address[0].line[0], "123 North 102nd Street")
        self.assertEqual(inst.address[0].line[1], "Apt 4d")
        self.assertEqual(inst.address[0].postalCode, "17102")
        self.assertEqual(inst.address[0].state, "PA")
        self.assertEqual(inst.address[0].use, "home")
        self.assertEqual(inst.birthDate.date, FHIRDate("2012-06-07").date)
        self.assertEqual(inst.birthDate.as_json(), "2012-06-07")
        self.assertEqual(inst.contact[0].address.city, "Harrisburg")
        self.assertEqual(inst.contact[0].address.country, "USA")
        self.assertEqual(inst.contact[0].address.extension[0].extension[0].url, "http://example.org//iso21090-SC-coding")
        self.assertEqual(inst.contact[0].address.extension[0].extension[0].valueCoding.code, "42043")
        self.assertEqual(inst.contact[0].address.extension[0].extension[0].valueCoding.system, "https://www.census.gov/geo/reference")
        self.assertEqual(inst.contact[0].address.extension[0].url, "http://example.org/us-core-county")
        self.assertEqual(inst.contact[0].address.line[0], "123 North 102nd Street")
        self.assertEqual(inst.contact[0].address.line[1], "Apt 4d")
        self.assertEqual(inst.contact[0].address.postalCode, "17102")
        self.assertEqual(inst.contact[0].address.state, "PA")
        self.assertEqual(inst.contact[0].address.use, "home")
        self.assertEqual(inst.contact[0].name.family[0], "Smith")
        self.assertEqual(inst.contact[0].name.given[0], "Bea")
        self.assertEqual(inst.contact[0].name.given[1], "G")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code, "guardian")
        self.assertEqual(inst.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contact[0].telecom[0].value, "(555)7259890")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-race")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].code, "2106-3")
        self.assertEqual(inst.extension[1].url, "http://hl7.org/fhir/StructureDefinition/us-core-ethnicity")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].code, "2135-2")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "uslab-example2")
        self.assertEqual(inst.identifier[0].system, "urn:oid:2.16.840.1.113883.3.72.5.30.2")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "18547545")
        self.assertEqual(inst.name[0].family[0], "Lerr")
        self.assertEqual(inst.name[0].given[0], "Todd")
        self.assertEqual(inst.name[0].given[1], "G.")
        self.assertEqual(inst.name[0].suffix[0], "Jr")
        self.assertEqual(inst.name[0].use, "official")
        self.assertEqual(inst.telecom[0].system, "phone")
        self.assertEqual(inst.telecom[0].use, "home")
        self.assertEqual(inst.telecom[0].value, "(555)7259890")
        self.assertEqual(inst.telecom[1].system, "phone")
        self.assertEqual(inst.telecom[1].use, "work")
        self.assertEqual(inst.telecom[1].value, "(555)7256030")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient4(self):
        inst = self.instantiate_from("patient-example-ihe-pcd.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient4(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient4(inst2)
    
    def implPatient4(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.id, "ihe-pcd")
        self.assertEqual(inst.identifier[0].type.text, "Internal Identifier")
        self.assertEqual(inst.identifier[0].value, "AB60001")
        self.assertEqual(inst.name[0].family[0], "BROOKS")
        self.assertEqual(inst.name[0].given[0], "ALBERT")
        self.assertEqual(inst.text.div, "<div>Albert Brooks, Id: AB60001</div>")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient5(self):
        inst = self.instantiate_from("patient-example-animal.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient5(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient5(inst2)
    
    def implPatient5(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.animal.breed.coding[0].code, "58108001")
        self.assertEqual(inst.animal.breed.coding[0].display, "Golden retriever")
        self.assertEqual(inst.animal.breed.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.animal.breed.coding[1].code, "gret")
        self.assertEqual(inst.animal.breed.coding[1].display, "Golden Retriever")
        self.assertEqual(inst.animal.breed.coding[1].system, "http://hl7.org/fhir/animal-breed")
        self.assertEqual(inst.animal.genderStatus.coding[0].code, "neutered")
        self.assertEqual(inst.animal.genderStatus.coding[0].system, "http://hl7.org/fhir/animal-genderstatus")
        self.assertEqual(inst.animal.species.coding[0].code, "canislf")
        self.assertEqual(inst.animal.species.coding[0].display, "Dog")
        self.assertEqual(inst.animal.species.coding[0].system, "http://hl7.org/fhir/animal-species")
        self.assertEqual(inst.birthDate.date, FHIRDate("2010-03-23").date)
        self.assertEqual(inst.birthDate.as_json(), "2010-03-23")
        self.assertEqual(inst.contact[0].name.family[0], "Chalmers")
        self.assertEqual(inst.contact[0].name.given[0], "Peter")
        self.assertEqual(inst.contact[0].name.given[1], "James")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code, "owner")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system, "http://hl7.org/fhir/patient-contact-relationship")
        self.assertEqual(inst.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contact[0].telecom[0].use, "work")
        self.assertEqual(inst.contact[0].telecom[0].value, "(03) 5555 6473")
        self.assertEqual(inst.gender, "female")
        self.assertEqual(inst.id, "animal")
        self.assertEqual(inst.identifier[0].period.start.date, FHIRDate("2010-05-31").date)
        self.assertEqual(inst.identifier[0].period.start.as_json(), "2010-05-31")
        self.assertEqual(inst.identifier[0].system, "http://www.maroondah.vic.gov.au/AnimalRegFees.aspx")
        self.assertEqual(inst.identifier[0].type.text, "Dog Tag")
        self.assertEqual(inst.identifier[0].value, "1234123")
        self.assertEqual(inst.name[0].given[0], "Kenzi")
        self.assertEqual(inst.name[0].use, "usual")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient6(self):
        inst = self.instantiate_from("patient-uslab-example1.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient6(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient6(inst2)
    
    def implPatient6(self, inst):
        self.assertEqual(inst.address[0].city, "Harrisburg")
        self.assertEqual(inst.address[0].country, "USA")
        self.assertEqual(inst.address[0].line[0], "123 North 102nd Street")
        self.assertEqual(inst.address[0].line[1], "Apt 4d")
        self.assertEqual(inst.address[0].postalCode, "17102")
        self.assertEqual(inst.address[0].state, "PA")
        self.assertEqual(inst.address[0].use, "home")
        self.assertEqual(inst.birthDate.date, FHIRDate("2012-06-07").date)
        self.assertEqual(inst.birthDate.as_json(), "2012-06-07")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-race")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].code, "2106-3")
        self.assertEqual(inst.extension[1].url, "http://hl7.org/fhir/StructureDefinition/us-core-ethnicity")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].code, "2135-2")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "uslab-example1")
        self.assertEqual(inst.identifier[0].system, "urn:oid:2.16.840.1.113883.3.72.5.30.2")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "18547545")
        self.assertEqual(inst.name[0].family[0], "Lerr")
        self.assertEqual(inst.name[0].given[0], "Todd")
        self.assertEqual(inst.name[0].given[1], "G.")
        self.assertEqual(inst.name[0].suffix[0], "Jr")
        self.assertEqual(inst.name[0].use, "official")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient7(self):
        inst = self.instantiate_from("patient-example-a.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient7(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient7(inst2)
    
    def implPatient7(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code, "owner")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system, "http://hl7.org/fhir/patient-contact-relationship")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "pat1")
        self.assertEqual(inst.identifier[0].system, "urn:oid:0.1.2.3.4.5.6.7")
        self.assertEqual(inst.identifier[0].type.coding[0].code, "MRN")
        self.assertEqual(inst.identifier[0].type.coding[0].system, "http://hl7.org/fhir/v2/0203")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "654321")
        self.assertEqual(inst.link[0].type, "seealso")
        self.assertEqual(inst.name[0].family[0], "Donald")
        self.assertEqual(inst.name[0].given[0], "Duck")
        self.assertEqual(inst.name[0].use, "official")
        self.assertEqual(inst.photo[0].contentType, "image/gif")
        self.assertEqual(inst.text.div, "<div>\n      \n      <p>Patient Donald DUCK @ Acme Healthcare, Inc. MR = 654321</p>\n    \n    </div>")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient8(self):
        inst = self.instantiate_from("patient-example-us-extensions.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient8(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient8(inst2)
    
    def implPatient8(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city, "PleasantVille")
        self.assertEqual(inst.address[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-county")
        self.assertEqual(inst.address[0].extension[0].valueString, "Orange County")
        self.assertEqual(inst.address[0].line[0], "534 Erewhon St")
        self.assertEqual(inst.address[0].postalCode, "3999")
        self.assertEqual(inst.address[0].state, "Vic")
        self.assertEqual(inst.address[0].use, "home")
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-race")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].code, "1096-7")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].system, "http://hl7.org/fhir/v3/Race")
        self.assertEqual(inst.extension[1].url, "http://hl7.org/fhir/StructureDefinition/us-core-ethnicity")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].code, "2162-6")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].system, "http://hl7.org/fhir/v3/Ethnicity")
        self.assertEqual(inst.id, "us01")
        self.assertEqual(inst.name[0].family[0], "Chalmers")
        self.assertEqual(inst.name[0].given[0], "Peter")
        self.assertEqual(inst.name[0].given[1], "James")
        self.assertEqual(inst.name[0].use, "official")
        self.assertEqual(inst.telecom[0].system, "phone")
        self.assertEqual(inst.telecom[0].use, "work")
        self.assertEqual(inst.telecom[0].value, "(03) 5555 6473")
        self.assertEqual(inst.telecom[1].extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-direct")
        self.assertTrue(inst.telecom[1].extension[0].valueBoolean)
        self.assertEqual(inst.telecom[1].system, "email")
        self.assertEqual(inst.telecom[1].use, "work")
        self.assertEqual(inst.telecom[1].value, "person@example.org")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient9(self):
        inst = self.instantiate_from("patient-qicore-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient9(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient9(inst2)
    
    def implPatient9(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city, "Harrisburg")
        self.assertEqual(inst.address[0].country, "USA")
        self.assertEqual(inst.address[0].line[0], "123 North 102nd Street")
        self.assertEqual(inst.address[0].line[1], "Apt 4d")
        self.assertEqual(inst.address[0].postalCode, "17102")
        self.assertEqual(inst.address[0].state, "PA")
        self.assertEqual(inst.address[0].use, "home")
        self.assertEqual(inst.birthDate.date, FHIRDate("2012-06-07").date)
        self.assertEqual(inst.birthDate.as_json(), "2012-06-07")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.extension[0].url, "http://hl7.org/fhir/StructureDefinition/us-core-race")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].code, "2106-3")
        self.assertEqual(inst.extension[0].valueCodeableConcept.coding[0].system, "http://hl7.org/fhir/v3/Race")
        self.assertEqual(inst.extension[1].url, "http://hl7.org/fhir/StructureDefinition/us-core-ethnicity")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].code, "2135-2")
        self.assertEqual(inst.extension[1].valueCodeableConcept.coding[0].system, "http://hl7.org/fhir/v3/Ethnicity")
        self.assertEqual(inst.extension[2].extension[0].url, "http://hl7.org/fhir/StructureDefinition/patient-clinicalTrialNCT")
        self.assertEqual(inst.extension[2].extension[0].valueString, "NCT01647425")
        self.assertEqual(inst.extension[2].extension[1].url, "http://hl7.org/fhir/StructureDefinition/patient-clinicalTrialPeriod")
        self.assertEqual(inst.extension[2].extension[1].valuePeriod.end.date, FHIRDate("2013-09-30").date)
        self.assertEqual(inst.extension[2].extension[1].valuePeriod.end.as_json(), "2013-09-30")
        self.assertEqual(inst.extension[2].extension[1].valuePeriod.start.date, FHIRDate("2012-04-01").date)
        self.assertEqual(inst.extension[2].extension[1].valuePeriod.start.as_json(), "2012-04-01")
        self.assertEqual(inst.extension[2].extension[2].url, "http://hl7.org/fhir/StructureDefinition/patient-clinicalTrialReason")
        self.assertEqual(inst.extension[2].extension[2].valueCodeableConcept.coding[0].code, "254637007")
        self.assertEqual(inst.extension[2].extension[2].valueCodeableConcept.coding[0].display, "NSCLC - Non-small cell lung cancer")
        self.assertEqual(inst.extension[2].extension[2].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.extension[2].url, "http://hl7.org/fhir/StructureDefinition/patient-clinicalTrial")
        self.assertEqual(inst.extension[3].url, "http://hl7.org/fhir/StructureDefinition/patient-birthTime")
        self.assertEqual(inst.extension[3].valueDateTime.date, FHIRDate("2012-06-07T06:12:45-05:00").date)
        self.assertEqual(inst.extension[3].valueDateTime.as_json(), "2012-06-07T06:12:45-05:00")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "qicore")
        self.assertEqual(inst.name[0].family[0], "Lerr")
        self.assertEqual(inst.name[0].given[0], "Todd")
        self.assertEqual(inst.name[0].given[1], "G.")
        self.assertEqual(inst.name[0].suffix[0], "Jr")
        self.assertEqual(inst.name[0].use, "official")
        self.assertEqual(inst.telecom[0].system, "phone")
        self.assertEqual(inst.telecom[0].use, "work")
        self.assertEqual(inst.telecom[0].value, "(555) 555 1212")
        self.assertEqual(inst.telecom[1].system, "email")
        self.assertEqual(inst.telecom[1].use, "work")
        self.assertEqual(inst.telecom[1].value, "person@example.org")
        self.assertEqual(inst.text.status, "generated")
    
    def testPatient10(self):
        inst = self.instantiate_from("patient-glossy-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Patient instance")
        self.implPatient10(inst)
        
        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient10(inst2)
    
    def implPatient10(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.birthDate.date, FHIRDate("1932-09-24").date)
        self.assertEqual(inst.birthDate.as_json(), "1932-09-24")
        self.assertEqual(inst.extension[0].url, "http://example.org/consent#trials")
        self.assertEqual(inst.extension[0].valueCode, "renal")
        self.assertEqual(inst.gender, "male")
        self.assertEqual(inst.id, "glossy")
        self.assertEqual(inst.identifier[0].system, "http://www.goodhealth.org/identifiers/mrn")
        self.assertEqual(inst.identifier[0].type.coding[0].code, "MRN")
        self.assertEqual(inst.identifier[0].type.coding[0].system, "http://hl7.org/fhir/v2/0203")
        self.assertEqual(inst.identifier[0].use, "usual")
        self.assertEqual(inst.identifier[0].value, "123456")
        self.assertEqual(inst.meta.lastUpdated.date, FHIRDate("2014-11-13T11:41:00+11:00").date)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2014-11-13T11:41:00+11:00")
        self.assertEqual(inst.name[0].family[0], "Levin")
        self.assertEqual(inst.name[0].given[0], "Henry")
        self.assertEqual(inst.name[0].suffix[0], "The 7th")
        self.assertEqual(inst.text.div, "<div>\n			\n      <p>Henry Levin the 7th</p>\n			\n      <p>MRN: 123456. Male, 24-Sept 1932</p>\n		\n    </div>")
        self.assertEqual(inst.text.status, "generated")


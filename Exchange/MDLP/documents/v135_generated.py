# ./v135_generated.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2020-11-18 16:03:42.365962 by PyXB version 1.2.4 using Python 2.7.11.final.0
# Namespace AbsentNamespace0

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer#
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:7b32d716-299e-11eb-b223-b42e99144061')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
#if pyxb.__version__ != _PyXBVersion:
#    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 90, 4)
    _Documentation = None
STD_ANON._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(7))
STD_ANON._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
STD_ANON._InitializeFacetMap(STD_ANON._CF_maxLength,
   STD_ANON._CF_minLength)

# Atomic simple type: datetimeoffset
class datetimeoffset (pyxb.binding.datatypes.dateTime):

    """Тип "Дата со временем" (с временной зоной)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datetimeoffset')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 4, 1)
    _Documentation = '\u0422\u0438\u043f "\u0414\u0430\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c" (\u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u043e\u0439)'
datetimeoffset._CF_pattern = pyxb.binding.facets.CF_pattern()
datetimeoffset._CF_pattern.addPattern(pattern='((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T(([01][0-9])|(2[0-3]))(:[0-5][0-9]){2}(\\.[0-9]+)?(([+-]((((0[0-9])|(1[0-3]))(:[0-5][0-9]))|14:00))|Z)')
datetimeoffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=datetimeoffset, value=pyxb.binding.datatypes.dateTime('0001-01-01T00:00:00Z'))
datetimeoffset._InitializeFacetMap(datetimeoffset._CF_pattern,
   datetimeoffset._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'datetimeoffset', datetimeoffset)

# Atomic simple type: contract_type_enum
class contract_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Тип договора при реализации
                1 - купли продажи
                2 - комиссия
                3 - агентский
                4 – передача на безвозмездной основе
                5 – возврат контрактному производителю
                6 – государственное лекарственное обеспечение
                7 - договор консигнации
                8 - собственные стредства
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'contract_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 13, 1)
    _Documentation = '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0440\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n                1 - \u043a\u0443\u043f\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438\n                2 - \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044f\n                3 - \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u0438\u0439\n                4 \u2013 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043d\u0430 \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435\n                5 \u2013 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e\n                6 \u2013 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\n                7 - \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u043a\u043e\u043d\u0441\u0438\u0433\u043d\u0430\u0446\u0438\u0438\n                8 - \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u0435\u0434\u0441\u0442\u0432\u0430\n            '
contract_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=contract_type_enum, enum_prefix=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='5', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='6', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='7', tag=None)
contract_type_enum._CF_enumeration.addEnumeration(unicode_value='8', tag=None)
contract_type_enum._InitializeFacetMap(contract_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'contract_type_enum', contract_type_enum)

# Atomic simple type: custom_procedure_code_enum
class custom_procedure_code_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Код таможенной процедуры
                40 - выпуск для внутреннего потребления
                93 - уничтожение
                94 - отказ в пользу государства
                31 - реэкспорт
                10 - экспорт
                80 - таможенный транзит
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'custom_procedure_code_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 37, 1)
    _Documentation = '\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\n                40 - \u0432\u044b\u043f\u0443\u0441\u043a \u0434\u043b\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f\n                93 - \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435\n                94 - \u043e\u0442\u043a\u0430\u0437 \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430\n                31 - \u0440\u0435\u044d\u043a\u0441\u043f\u043e\u0440\u0442\n                10 - \u044d\u043a\u0441\u043f\u043e\u0440\u0442\n                80 - \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0442\u0440\u0430\u043d\u0437\u0438\u0442\n            '
custom_procedure_code_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=custom_procedure_code_enum, enum_prefix=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='40', tag=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='93', tag=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='94', tag=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='31', tag=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='10', tag=None)
custom_procedure_code_enum._CF_enumeration.addEnumeration(unicode_value='80', tag=None)
custom_procedure_code_enum._InitializeFacetMap(custom_procedure_code_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'custom_procedure_code_enum', custom_procedure_code_enum)

# Atomic simple type: code_country_type
class code_country_type (pyxb.binding.datatypes.string):

    """Код страны"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'code_country_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 57, 1)
    _Documentation = '\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b'
code_country_type._CF_pattern = pyxb.binding.facets.CF_pattern()
code_country_type._CF_pattern.addPattern(pattern='[A-Z]{2}')
code_country_type._InitializeFacetMap(code_country_type._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'code_country_type', code_country_type)

# Atomic simple type: subject_id_type
class subject_id_type (pyxb.binding.datatypes.string):

    """Идентификатор субъекта обращения в ИС МДЛП"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'subject_id_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 65, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f'
subject_id_type._CF_pattern = pyxb.binding.facets.CF_pattern()
subject_id_type._CF_pattern.addPattern(pattern='[0-9]{14}')
subject_id_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(14))
subject_id_type._InitializeFacetMap(subject_id_type._CF_pattern,
   subject_id_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'subject_id_type', subject_id_type)

# Atomic simple type: subject_any_type
class subject_any_type (pyxb.binding.datatypes.string):

    """Идентификатор субъекта обращения в ИС МДЛП (14 или 36 знаков)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'subject_any_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 74, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f (14 \u0438\u043b\u0438 36 \u0437\u043d\u0430\u043a\u043e\u0432)'
subject_any_type._CF_pattern = pyxb.binding.facets.CF_pattern()
subject_any_type._CF_pattern.addPattern(pattern='[0-9]{14}|([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})')
subject_any_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(36))
subject_any_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(14))
subject_any_type._InitializeFacetMap(subject_any_type._CF_pattern,
   subject_any_type._CF_maxLength,
   subject_any_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'subject_any_type', subject_any_type)

# Atomic simple type: source_type
class source_type (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды источников финансирования
                1 - собственные средства
                2 - средства федерального бюджета
                3 - средства регионального бюджета
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'source_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 84, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n                1 - \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\n                2 - \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0431\u044e\u0434\u0436\u0435\u0442\u0430\n                3 - \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0431\u044e\u0434\u0436\u0435\u0442\u0430\n            '
source_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=source_type, enum_prefix=None)
source_type._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
source_type._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
source_type._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
source_type._InitializeFacetMap(source_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'source_type', source_type)

# Atomic simple type: order_type_enum
class order_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Типы производственного заказа
                1 - собственное производство
                2 - контрактное производство
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'order_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 98, 1)
    _Documentation = '\u0422\u0438\u043f\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430\n                1 - \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e\n                2 - \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e\n            '
order_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=order_type_enum, enum_prefix=None)
order_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
order_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
order_type_enum._InitializeFacetMap(order_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'order_type_enum', order_type_enum)

# Atomic simple type: operation_result_type_enum
class operation_result_type_enum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Результат операции фиксации"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'operation_result_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 110, 1)
    _Documentation = '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438'
operation_result_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=operation_result_type_enum, enum_prefix=None)
operation_result_type_enum.Accepted = operation_result_type_enum._CF_enumeration.addEnumeration(unicode_value='Accepted', tag='Accepted')
operation_result_type_enum.Rejected = operation_result_type_enum._CF_enumeration.addEnumeration(unicode_value='Rejected', tag='Rejected')
operation_result_type_enum.Partial = operation_result_type_enum._CF_enumeration.addEnumeration(unicode_value='Partial', tag='Partial')
operation_result_type_enum._InitializeFacetMap(operation_result_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'operation_result_type_enum', operation_result_type_enum)

# Atomic simple type: receive_type_enum
class receive_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды операций приемки
                1 - поступление
                2 - возврат от покупателя
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 120, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u0438\u0435\u043c\u043a\u0438\n                1 - \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435\n                2 - \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043e\u0442 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f\n            '
receive_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=receive_type_enum, enum_prefix=None)
receive_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
receive_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
receive_type_enum._InitializeFacetMap(receive_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'receive_type_enum', receive_type_enum)

# Atomic simple type: sale_doc_type_enum
class sale_doc_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды документов
                1 - чек
                2 - бланк строгой отчетности (БСО)
                3 - договор
                4 - прочее
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sale_doc_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 132, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n                1 - \u0447\u0435\u043a\n                2 - \u0431\u043b\u0430\u043d\u043a \u0441\u0442\u0440\u043e\u0433\u043e\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 (\u0411\u0421\u041e)\n                3 - \u0434\u043e\u0433\u043e\u0432\u043e\u0440\n                4 - \u043f\u0440\u043e\u0447\u0435\u0435\n            '
sale_doc_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=sale_doc_type_enum, enum_prefix=None)
sale_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
sale_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
sale_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
sale_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
sale_doc_type_enum._InitializeFacetMap(sale_doc_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'sale_doc_type_enum', sale_doc_type_enum)

# Atomic simple type: date_type
class date_type (pyxb.binding.datatypes.string):

    """Дата в формате ДД.ММ.ГГГГ"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'date_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 157, 1)
    _Documentation = '\u0414\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0414\u0414.\u041c\u041c.\u0413\u0413\u0413\u0413'
date_type._CF_pattern = pyxb.binding.facets.CF_pattern()
date_type._CF_pattern.addPattern(pattern='((((0[1-9]|1[0-9]|2[0-8])[\\.](0[1-9]|1[012]))|((29|30|31)[\\.](0[13578]|1[02]))|((29|30)[\\.](0[4,6,9]|11)))[\\.](19|[2-9][0-9])\\d\\d)|(29[\\.]02[\\.](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))')
date_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(10))
date_type._InitializeFacetMap(date_type._CF_pattern,
   date_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'date_type', date_type)

# Atomic simple type: inn_fl_type
class inn_fl_type (pyxb.binding.datatypes.string):

    """Идентификационный номер налогоплательщика - физического лица"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inn_fl_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 166, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043d\u0430\u043b\u043e\u0433\u043e\u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430 - \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043b\u0438\u0446\u0430'
inn_fl_type._CF_pattern = pyxb.binding.facets.CF_pattern()
inn_fl_type._CF_pattern.addPattern(pattern='([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}')
inn_fl_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(12))
inn_fl_type._InitializeFacetMap(inn_fl_type._CF_pattern,
   inn_fl_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'inn_fl_type', inn_fl_type)

# Atomic simple type: inn_ul_type
class inn_ul_type (pyxb.binding.datatypes.string):

    """Идентификационный номер налогоплательщика - юридического лица"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inn_ul_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 175, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043d\u0430\u043b\u043e\u0433\u043e\u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430 - \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043b\u0438\u0446\u0430'
inn_ul_type._CF_pattern = pyxb.binding.facets.CF_pattern()
inn_ul_type._CF_pattern.addPattern(pattern='([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{8}')
inn_ul_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(10))
inn_ul_type._InitializeFacetMap(inn_ul_type._CF_pattern,
   inn_ul_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'inn_ul_type', inn_ul_type)

# Atomic simple type: kpp_type
class kpp_type (pyxb.binding.datatypes.string):

    """Код причины постановки на учет (КПП)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'kpp_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 184, 1)
    _Documentation = '\u041a\u043e\u0434 \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0430 \u0443\u0447\u0435\u0442 (\u041a\u041f\u041f)'
kpp_type._CF_pattern = pyxb.binding.facets.CF_pattern()
kpp_type._CF_pattern.addPattern(pattern='([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{7}')
kpp_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(9))
kpp_type._InitializeFacetMap(kpp_type._CF_pattern,
   kpp_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'kpp_type', kpp_type)

# Atomic simple type: sign_sgtin_type
class sign_sgtin_type (pyxb.binding.datatypes.string):

    """Индивидуальный серийный номер вторичной упаковки"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sign_sgtin_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 193, 1)
    _Documentation = '\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438'
sign_sgtin_type._CF_pattern = pyxb.binding.facets.CF_pattern()
sign_sgtin_type._CF_pattern.addPattern(pattern='[0-9]{14}[!-"%-/0-9A-Z_a-z]{13}')
sign_sgtin_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(27))
sign_sgtin_type._InitializeFacetMap(sign_sgtin_type._CF_pattern,
   sign_sgtin_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'sign_sgtin_type', sign_sgtin_type)

# Atomic simple type: sscc_type
class sscc_type (pyxb.binding.datatypes.string):

    """Индивидуальный серийный номер третичной/транспортной упаковки"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sscc_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 202, 1)
    _Documentation = '\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439/\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438'
sscc_type._CF_pattern = pyxb.binding.facets.CF_pattern()
sscc_type._CF_pattern.addPattern(pattern='[0-9]{18}')
sscc_type._InitializeFacetMap(sscc_type._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'sscc_type', sscc_type)

# Atomic simple type: recall_type_enum
class recall_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Перечень операций, для которых применим отзыв / отмена
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recall_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 210, 1)
    _Documentation = '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432 / \u043e\u0442\u043c\u0435\u043d\u0430\n            '
recall_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=recall_type_enum, enum_prefix=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='313', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='333', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='334', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='335', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='341', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='342', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='360', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='363', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='431', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='470', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='541', tag=None)
recall_type_enum._CF_enumeration.addEnumeration(unicode_value='300', tag=None)
recall_type_enum._InitializeFacetMap(recall_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'recall_type_enum', recall_type_enum)

# Atomic simple type: confirm_doc_type_enum
class confirm_doc_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды документов подтверждения соответствия
                1 - сертификат соответствия
                2 - декларация о соответствии
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'confirm_doc_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 230, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f\n                1 - \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f\n                2 - \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438\n            '
confirm_doc_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=confirm_doc_type_enum, enum_prefix=None)
confirm_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
confirm_doc_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
confirm_doc_type_enum._InitializeFacetMap(confirm_doc_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'confirm_doc_type_enum', confirm_doc_type_enum)

# Atomic simple type: destruction_method_enum
class destruction_method_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Способы уничтожения
                1 – раздавливание ампулы, разведением содержимого и слив в промышленную канализацию
                2 – дробление, разведение и слив в промышленную канализацию
                3 – сжигание
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'destruction_method_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 242, 1)
    _Documentation = '\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f\n                1 \u2013 \u0440\u0430\u0437\u0434\u0430\u0432\u043b\u0438\u0432\u0430\u043d\u0438\u0435 \u0430\u043c\u043f\u0443\u043b\u044b, \u0440\u0430\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0438 \u0441\u043b\u0438\u0432 \u0432 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u0443\u044e \u043a\u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\n                2 \u2013 \u0434\u0440\u043e\u0431\u043b\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438 \u0441\u043b\u0438\u0432 \u0432 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u0443\u044e \u043a\u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\n                3 \u2013 \u0441\u0436\u0438\u0433\u0430\u043d\u0438\u0435\n            '
destruction_method_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=destruction_method_enum, enum_prefix=None)
destruction_method_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
destruction_method_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
destruction_method_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
destruction_method_enum._InitializeFacetMap(destruction_method_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'destruction_method_enum', destruction_method_enum)

# Atomic simple type: destruction_type_enum
class destruction_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Основания передачи на уничтожение
                1 – по решению владельца
                2 – по решению Росздравнадзора
                3 – по решению суда
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'destruction_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 256, 1)
    _Documentation = '\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435\n                1 \u2013 \u043f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\n                2 \u2013 \u043f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0420\u043e\u0441\u0437\u0434\u0440\u0430\u0432\u043d\u0430\u0434\u0437\u043e\u0440\u0430\n                3 \u2013 \u043f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0441\u0443\u0434\u0430\n            '
destruction_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=destruction_type_enum, enum_prefix=None)
destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
destruction_type_enum._InitializeFacetMap(destruction_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'destruction_type_enum', destruction_type_enum)

# Atomic simple type: withdrawal_reason_enum
class withdrawal_reason_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Причины вывода из оборота
                1 – выведен из оборота по причине списания
                2 – выведен из оборота в результате реэкспорта
                3 – выведен из оборота в результате отбора образцов
                4 - выведен из оборота в результате отпуска по льготному рецепту
                5 - выведен из оборота в результате выдачи для оказания мед. помощи
                6 - выведен из оборота в результате отгрузки незарегистрированному участнику
                7 - выведен из оборота в результате выборочного контроля
                8 - выведен из оборота в результате отгрузки в ЕАЭС
                9 - выведен из оборота в результате розничной продажи
                10 - выведен из оборота в результате экспорта
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'withdrawal_reason_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 270, 1)
    _Documentation = '\u041f\u0440\u0438\u0447\u0438\u043d\u044b \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430\n                1 \u2013 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n                2 \u2013 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u0435\u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0430\n                3 \u2013 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0442\u0431\u043e\u0440\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\n                4 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0442\u043f\u0443\u0441\u043a\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443\n                5 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0434. \u043f\u043e\u043c\u043e\u0449\u0438\n                6 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0443\n                7 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f\n                8 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 \u0415\u0410\u042d\u0421\n                9 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u043e\u0437\u043d\u0438\u0447\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0430\u0436\u0438\n                10 - \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0430\n            '
withdrawal_reason_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=withdrawal_reason_enum, enum_prefix=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='5', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='6', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='7', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='8', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='9', tag=None)
withdrawal_reason_enum._CF_enumeration.addEnumeration(unicode_value='10', tag=None)
withdrawal_reason_enum._InitializeFacetMap(withdrawal_reason_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'withdrawal_reason_enum', withdrawal_reason_enum)

# Atomic simple type: reason_return_type_enum
class reason_return_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Причины возврата
                1 – возврат надлежащего качества
                2 – возврат ненадлежащего качества
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'reason_return_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 298, 1)
    _Documentation = '\u041f\u0440\u0438\u0447\u0438\u043d\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\n                1 \u2013 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n                2 \u2013 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0435\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n            '
reason_return_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reason_return_type_enum, enum_prefix=None)
reason_return_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
reason_return_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
reason_return_type_enum._InitializeFacetMap(reason_return_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'reason_return_type_enum', reason_return_type_enum)

# Atomic simple type: withdrawal_type_enum
class withdrawal_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Типы вывода из оборота
                6 – выборочный контроль
                7 – таможенный контроль
                8 – федеральный надзор
                9 – в целях клинических исследований
                10 – в целях фармацевтической экспертизы
                11 – недостача
                12 – отбор демонстрационных образцов
                13 – списание без передачи на уничтожение
                14 – вывод из оборота КИЗ, накопленных в рамках эксперимента
                15 - производственный брак
                16 - списание разукомплектованной потребительской упаковки
                17 - производство медицинских изделий
                18 - производство медицинских препаратов
                19 - отбор контрольных образцов в рамках процесса контроля качества
                20 - отбор архивных образцов
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'withdrawal_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 310, 1)
    _Documentation = '\u0422\u0438\u043f\u044b \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430\n                6 \u2013 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\n                7 \u2013 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\n                8 \u2013 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0434\u0437\u043e\u0440\n                9 \u2013 \u0432 \u0446\u0435\u043b\u044f\u0445 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439\n                10 \u2013 \u0432 \u0446\u0435\u043b\u044f\u0445 \u0444\u0430\u0440\u043c\u0430\u0446\u0435\u0432\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0438\u0437\u044b\n                11 \u2013 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0447\u0430\n                12 \u2013 \u043e\u0442\u0431\u043e\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\n                13 \u2013 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435\n                14 \u2013 \u0432\u044b\u0432\u043e\u0434 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u041a\u0418\u0417, \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\n                15 - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0431\u0440\u0430\u043a\n                16 - \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u0443\u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438\n                17 - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0445 \u0438\u0437\u0434\u0435\u043b\u0438\u0439\n                18 - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432\n                19 - \u043e\u0442\u0431\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n                20 - \u043e\u0442\u0431\u043e\u0440 \u0430\u0440\u0445\u0438\u0432\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\n            '
withdrawal_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=withdrawal_type_enum, enum_prefix=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='6', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='7', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='8', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='9', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='10', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='11', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='12', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='13', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='14', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='15', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='16', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='17', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='18', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='19', tag=None)
withdrawal_type_enum._CF_enumeration.addEnumeration(unicode_value='20', tag=None)
withdrawal_type_enum._InitializeFacetMap(withdrawal_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'withdrawal_type_enum', withdrawal_type_enum)

# Atomic simple type: gs1_gtin_type
class gs1_gtin_type (pyxb.binding.datatypes.string):

    """Идентификационный номер GS1 для идентификации товаров (допускаются только цифры общей длины 14 символов)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gs1_gtin_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 348, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 GS1 \u0434\u043b\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 (\u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0446\u0438\u0444\u0440\u044b \u043e\u0431\u0449\u0435\u0439 \u0434\u043b\u0438\u043d\u044b 14 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432)'
gs1_gtin_type._CF_pattern = pyxb.binding.facets.CF_pattern()
gs1_gtin_type._CF_pattern.addPattern(pattern='[0-9]{14}')
gs1_gtin_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(14))
gs1_gtin_type._InitializeFacetMap(gs1_gtin_type._CF_pattern,
   gs1_gtin_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'gs1_gtin_type', gs1_gtin_type)

# Atomic simple type: price_type
class price_type (pyxb.binding.datatypes.decimal):

    """Стоимость"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'price_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 420, 1)
    _Documentation = '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'
price_type._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(16))
price_type._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(2))
price_type._InitializeFacetMap(price_type._CF_totalDigits,
   price_type._CF_fractionDigits)
Namespace.addCategoryObject('typeBinding', 'price_type', price_type)

# Atomic simple type: price_kkt_type
class price_kkt_type (pyxb.binding.datatypes.decimal):

    """Стоимость для ККТ, в копейках"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'price_kkt_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 429, 1)
    _Documentation = '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u041a\u041a\u0422, \u0432 \u043a\u043e\u043f\u0435\u0439\u043a\u0430\u0445'
price_kkt_type._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(16))
price_kkt_type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=price_kkt_type, value=pyxb.binding.datatypes.decimal('0.0'))
price_kkt_type._InitializeFacetMap(price_kkt_type._CF_totalDigits,
   price_kkt_type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'price_kkt_type', price_kkt_type)

# Atomic simple type: string_clear_at_begin_type
class string_clear_at_begin_type (pyxb.binding.datatypes.string):

    """Строка (не пустая в начале)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string_clear_at_begin_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 438, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 (\u043d\u0435 \u043f\u0443\u0441\u0442\u0430\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435)'
string_clear_at_begin_type._CF_pattern = pyxb.binding.facets.CF_pattern()
string_clear_at_begin_type._CF_pattern.addPattern(pattern='\\S.*')
string_clear_at_begin_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string_clear_at_begin_type._InitializeFacetMap(string_clear_at_begin_type._CF_pattern,
   string_clear_at_begin_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string_clear_at_begin_type', string_clear_at_begin_type)

# Atomic simple type: turnover_type_enum
class turnover_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды операции отгрузки
                1 – продажа
                2 – возврат
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'turnover_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 456, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438\n                1 \u2013 \u043f\u0440\u043e\u0434\u0430\u0436\u0430\n                2 \u2013 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\n            '
turnover_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=turnover_type_enum, enum_prefix=None)
turnover_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
turnover_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
turnover_type_enum._InitializeFacetMap(turnover_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'turnover_type_enum', turnover_type_enum)

# Atomic simple type: fts_customs_code_type
class fts_customs_code_type (pyxb.binding.datatypes.token):

    """Код таможенного органа. 2, 5 или 8 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fts_customs_code_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 468, 1)
    _Documentation = '\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0430. 2, 5 \u0438\u043b\u0438 8 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
fts_customs_code_type._CF_pattern = pyxb.binding.facets.CF_pattern()
fts_customs_code_type._CF_pattern.addPattern(pattern='[0-9]{2}|[0-9]{5}|[0-9]{8}')
fts_customs_code_type._InitializeFacetMap(fts_customs_code_type._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'fts_customs_code_type', fts_customs_code_type)

# Atomic simple type: system_subject_type
class system_subject_type (pyxb.binding.datatypes.string):

    """Идентификатор субъекта обращения (GUID)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'system_subject_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 476, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f (GUID)'
system_subject_type._CF_pattern = pyxb.binding.facets.CF_pattern()
system_subject_type._CF_pattern.addPattern(pattern='([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})')
system_subject_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(36))
system_subject_type._InitializeFacetMap(system_subject_type._CF_pattern,
   system_subject_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'system_subject_type', system_subject_type)

# Atomic simple type: guid_type
class guid_type (pyxb.binding.datatypes.string):

    """GUID"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'guid_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 485, 1)
    _Documentation = 'GUID'
guid_type._CF_pattern = pyxb.binding.facets.CF_pattern()
guid_type._CF_pattern.addPattern(pattern='([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})')
guid_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(36))
guid_type._InitializeFacetMap(guid_type._CF_pattern,
   guid_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'guid_type', guid_type)

# Atomic simple type: edit_type_enum
class edit_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Виды операции редактирования
                1 – добавление/бронирование/постановка
                2 – удаление/отмена бронирования/снятие
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'edit_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 494, 1)
    _Documentation = '\u0412\u0438\u0434\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n                1 \u2013 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435/\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435/\u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n                2 \u2013 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435/\u043e\u0442\u043c\u0435\u043d\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f/\u0441\u043d\u044f\u0442\u0438\u0435\n            '
edit_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=edit_type_enum, enum_prefix=None)
edit_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
edit_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
edit_type_enum._InitializeFacetMap(edit_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'edit_type_enum', edit_type_enum)

# Atomic simple type: skzkm_device_id_type
class skzkm_device_id_type (pyxb.binding.datatypes.string):

    """Идентификатор устройства СКЗКМ, 16 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_device_id_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 524, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0421\u041a\u0417\u041a\u041c, 16 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
skzkm_device_id_type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(16))
skzkm_device_id_type._InitializeFacetMap(skzkm_device_id_type._CF_length)
Namespace.addCategoryObject('typeBinding', 'skzkm_device_id_type', skzkm_device_id_type)

# Atomic simple type: part_type
class part_type (pyxb.binding.datatypes.string):

    """Доля первичной упаковки"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'part_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 532, 1)
    _Documentation = '\u0414\u043e\u043b\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438'
part_type._CF_pattern = pyxb.binding.facets.CF_pattern()
part_type._CF_pattern.addPattern(pattern='([1-9][0-9]*/[1-9][0-9]*)')
part_type._InitializeFacetMap(part_type._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'part_type', part_type)

# Atomic simple type: inn_type
class inn_type (pyxb.binding.datatypes.string):

    """ИНН"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inn_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 540, 1)
    _Documentation = '\u0418\u041d\u041d'
inn_type._CF_pattern = pyxb.binding.facets.CF_pattern()
inn_type._CF_pattern.addPattern(pattern='([0-9]{10}|[0-9]{12})')
inn_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
inn_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
inn_type._InitializeFacetMap(inn_type._CF_pattern,
   inn_type._CF_maxLength,
   inn_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'inn_type', inn_type)

# Atomic simple type: receipt_type_enum
class receipt_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Код формы фискального документа
                3 - чек
                31 - чек коррекции
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receipt_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 550, 1)
    _Documentation = '\u041a\u043e\u0434 \u0444\u043e\u0440\u043c\u044b \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\n                3 - \u0447\u0435\u043a\n                31 - \u0447\u0435\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438\n            '
receipt_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=receipt_type_enum, enum_prefix=None)
receipt_type_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
receipt_type_enum._CF_enumeration.addEnumeration(unicode_value='31', tag=None)
receipt_type_enum._InitializeFacetMap(receipt_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'receipt_type_enum', receipt_type_enum)

# Atomic simple type: dropout_reason_type_enum
class dropout_reason_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Причина списания
                1 - по причине закрытия заказа
                2 - по причине истечения срока годности КМ
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dropout_reason_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 562, 1)
    _Documentation = '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n                1 - \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0430\n                2 - \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u041a\u041c\n            '
dropout_reason_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=dropout_reason_type_enum, enum_prefix=None)
dropout_reason_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
dropout_reason_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
dropout_reason_type_enum._InitializeFacetMap(dropout_reason_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'dropout_reason_type_enum', dropout_reason_type_enum)

# Atomic simple type: action_id_type_enum
class action_id_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Перечень операций, для которых применима корректировка сведений
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'action_id_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 574, 1)
    _Documentation = '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439\n            '
action_id_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=action_id_type_enum, enum_prefix=None)
action_id_type_enum._CF_enumeration.addEnumeration(unicode_value='415', tag=None)
action_id_type_enum._CF_enumeration.addEnumeration(unicode_value='416', tag=None)
action_id_type_enum._CF_enumeration.addEnumeration(unicode_value='472', tag=None)
action_id_type_enum._CF_enumeration.addEnumeration(unicode_value='471', tag=None)
action_id_type_enum._CF_enumeration.addEnumeration(unicode_value='417', tag=None)
action_id_type_enum._InitializeFacetMap(action_id_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'action_id_type_enum', action_id_type_enum)

# Atomic simple type: reason_for_destruction_type_enum
class reason_for_destruction_type_enum (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """Причины передачи на уничтожение
			    1 - недоброкачественный ЛП
				2 - контрафактный ЛП
				3 - фальсифицированный ЛП
				4 - ЛП, утративший потребительские свойства
				5 - ЛП с истекшим сроком годности
				6 - ЛП, отозванный производителем/держателем регистрационного удостоверения
				7 - ЛП, исключенный из Государственного реестра лекарственных средств
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'reason_for_destruction_type_enum')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 587, 1)
    _Documentation = '\u041f\u0440\u0438\u0447\u0438\u043d\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435\n\t\t\t    1 - \u043d\u0435\u0434\u043e\u0431\u0440\u043e\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u041b\u041f\n\t\t\t\t2 - \u043a\u043e\u043d\u0442\u0440\u0430\u0444\u0430\u043a\u0442\u043d\u044b\u0439 \u041b\u041f\n\t\t\t\t3 - \u0444\u0430\u043b\u044c\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u041b\u041f\n\t\t\t\t4 - \u041b\u041f, \u0443\u0442\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\t\t\t\t5 - \u041b\u041f \u0441 \u0438\u0441\u0442\u0435\u043a\u0448\u0438\u043c \u0441\u0440\u043e\u043a\u043e\u043c \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438\n\t\t\t\t6 - \u041b\u041f, \u043e\u0442\u043e\u0437\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c/\u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f\n\t\t\t\t7 - \u041b\u041f, \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u0413\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0435\u0441\u0442\u0440\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\n            '
reason_for_destruction_type_enum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reason_for_destruction_type_enum, enum_prefix=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='5', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='6', tag=None)
reason_for_destruction_type_enum._CF_enumeration.addEnumeration(unicode_value='7', tag=None)
reason_for_destruction_type_enum._InitializeFacetMap(reason_for_destruction_type_enum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'reason_for_destruction_type_enum', reason_for_destruction_type_enum)

# Atomic simple type: [anonymous]
class STD_ANON_ (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 39, 16)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_2 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 39, 16)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_3 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 35, 4)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='7', tag=None)
STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='8', tag=None)
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_4 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 35, 4)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_5 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 25, 4)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='8', tag=None)
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_6 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 35, 4)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_7 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 35, 4)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_8 (source_type, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 40, 4)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_9 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 39, 16)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_10 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 39, 16)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_11 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 35, 4)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_12 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 35, 4)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_13 (contract_type_enum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 35, 4)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='4', tag=None)
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic simple type: string_clear_type
class string_clear_type (string_clear_at_begin_type):

    """Строка (без спецсимволов с обеих сторон)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string_clear_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 447, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 (\u0431\u0435\u0437 \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0441 \u043e\u0431\u0435\u0438\u0445 \u0441\u0442\u043e\u0440\u043e\u043d)'
string_clear_type._CF_pattern = pyxb.binding.facets.CF_pattern()
string_clear_type._CF_pattern.addPattern(pattern='.*\\S')
string_clear_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string_clear_type._InitializeFacetMap(string_clear_type._CF_pattern,
   string_clear_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string_clear_type', string_clear_type)

# Atomic simple type: series_number_type
class series_number_type (string_clear_type):

    """Номер производственной серии"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'series_number_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 148, 1)
    _Documentation = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438'
series_number_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
series_number_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
series_number_type._InitializeFacetMap(series_number_type._CF_maxLength,
   series_number_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'series_number_type', series_number_type)

# Atomic simple type: document_number_200_type
class document_number_200_type (string_clear_type):

    """Номер документа, но не более 200 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'document_number_200_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 357, 1)
    _Documentation = '\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 200 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
document_number_200_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(200))
document_number_200_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
document_number_200_type._InitializeFacetMap(document_number_200_type._CF_maxLength,
   document_number_200_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'document_number_200_type', document_number_200_type)

# Atomic simple type: string64_type
class string64_type (string_clear_type):

    """Строка произвольной длины, но не более 64 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string64_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 366, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 64 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string64_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(64))
string64_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string64_type._InitializeFacetMap(string64_type._CF_maxLength,
   string64_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string64_type', string64_type)

# Atomic simple type: string128_type
class string128_type (string_clear_type):

    """Строка произвольной длины, но не более 128 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string128_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 375, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 128 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string128_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(128))
string128_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string128_type._InitializeFacetMap(string128_type._CF_maxLength,
   string128_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string128_type', string128_type)

# Atomic simple type: string200_type
class string200_type (string_clear_type):

    """Строка произвольной длины, но не более 200 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string200_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 384, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 200 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string200_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(200))
string200_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string200_type._InitializeFacetMap(string200_type._CF_maxLength,
   string200_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string200_type', string200_type)

# Atomic simple type: string500_type
class string500_type (string_clear_type):

    """Строка произвольной длины, но не более 500 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string500_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 393, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 500 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string500_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(500))
string500_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string500_type._InitializeFacetMap(string500_type._CF_maxLength,
   string500_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string500_type', string500_type)

# Atomic simple type: string1000_type
class string1000_type (string_clear_type):

    """Строка произвольной длины, но не более 1000 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string1000_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 402, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 1000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string1000_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1000))
string1000_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string1000_type._InitializeFacetMap(string1000_type._CF_maxLength,
   string1000_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string1000_type', string1000_type)

# Atomic simple type: string4000_type
class string4000_type (string_clear_type):

    """Строка произвольной длины, но не более 4000 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string4000_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 411, 1)
    _Documentation = '\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 4000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
string4000_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4000))
string4000_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
string4000_type._InitializeFacetMap(string4000_type._CF_maxLength,
   string4000_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'string4000_type', string4000_type)

# Atomic simple type: skzkm_report_id_type
class skzkm_report_id_type (string_clear_type):

    """Идентификатор отчета об изменении статусов кодов маркировки, не более 255 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_report_id_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 506, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432 \u043a\u043e\u0434\u043e\u0432 \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
skzkm_report_id_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
skzkm_report_id_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
skzkm_report_id_type._InitializeFacetMap(skzkm_report_id_type._CF_maxLength,
   skzkm_report_id_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'skzkm_report_id_type', skzkm_report_id_type)

# Atomic simple type: skzkm_message_id_type
class skzkm_message_id_type (string_clear_type):

    """Идентификатор системы сформировавшей сообщение (СКЗКМ), не более 255 символов"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_message_id_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_types.xsd', 515, 1)
    _Documentation = '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0421\u041a\u0417\u041a\u041c), \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432'
skzkm_message_id_type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
skzkm_message_id_type._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
skzkm_message_id_type._InitializeFacetMap(skzkm_message_id_type._CF_maxLength,
   skzkm_message_id_type._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'skzkm_message_id_type', skzkm_message_id_type)

# Complex type code_emission with content type ELEMENT_ONLY
class code_emission (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об эмиссии (информация от СУЗ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'code_emission')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_code_emission_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_code_emission_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u044d\u043c\u0438\u0441\u0441\u0438\u0438')


    # Element oms_id uses Python identifier oms_id
    __oms_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'oms_id'), 'oms_id', '__AbsentNamespace0_code_emission_oms_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 20, 12), )


    oms_id = property(__oms_id.value, __oms_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0421\u0423\u0417')


    # Element oms_order_id uses Python identifier oms_order_id
    __oms_order_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'oms_order_id'), 'oms_order_id', '__AbsentNamespace0_code_emission_oms_order_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 25, 12), )


    oms_order_id = property(__oms_order_id.value, __oms_order_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043a\u0430\u0437\u0430 \u0421\u0423\u0417')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_code_emission_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 30, 12), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_code_emission_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 35, 12), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_code_emission_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10300', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 54, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 54, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __oms_id.name() : __oms_id,
        __oms_order_id.name() : __oms_order_id,
        __gtin.name() : __gtin,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'code_emission', code_emission)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type skzkm_report_of_dropout with content type ELEMENT_ONLY
class skzkm_report_of_dropout (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отбраковке (информация от СУЗ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_report_of_dropout')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_skzkm_report_of_dropout_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_skzkm_report_of_dropout_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element oms_id uses Python identifier oms_id
    __oms_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'oms_id'), 'oms_id', '__AbsentNamespace0_skzkm_report_of_dropout_oms_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 21, 3), )


    oms_id = property(__oms_id.value, __oms_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0421\u0423\u0417')


    # Element oms_order_id uses Python identifier oms_order_id
    __oms_order_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'oms_order_id'), 'oms_order_id', '__AbsentNamespace0_skzkm_report_of_dropout_oms_order_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 26, 3), )


    oms_order_id = property(__oms_order_id.value, __oms_order_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043a\u0430\u0437\u0430 \u0421\u0423\u0417')


    # Element dropout_reason uses Python identifier dropout_reason
    __dropout_reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dropout_reason'), 'dropout_reason', '__AbsentNamespace0_skzkm_report_of_dropout_dropout_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 31, 3), )


    dropout_reason = property(__dropout_reason.value, __dropout_reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_skzkm_report_of_dropout_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_skzkm_report_of_dropout_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 54, 3), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_skzkm_report_of_dropout_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10305', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 60, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 60, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __oms_id.name() : __oms_id,
        __oms_order_id.name() : __oms_order_id,
        __dropout_reason.name() : __dropout_reason,
        __order_details.name() : __order_details,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'skzkm_report_of_dropout', skzkm_report_of_dropout)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON__sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type skzkm_register_end_packing with content type ELEMENT_ONLY
class skzkm_register_end_packing (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о завершении этапа окончательной упаковки (информация с СКЗКМ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_register_end_packing')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_skzkm_register_end_packing_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_skzkm_register_end_packing_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element order_type uses Python identifier order_type
    __order_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_type'), 'order_type', '__AbsentNamespace0_skzkm_register_end_packing_order_type', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 20, 12), )


    order_type = property(__order_type.value, __order_type.set, None, '\u0422\u0438\u043f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_skzkm_register_end_packing_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 25, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_skzkm_register_end_packing_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 30, 12), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_skzkm_register_end_packing_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 35, 12), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_skzkm_register_end_packing_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 40, 12), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_skzkm_register_end_packing_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 45, 12), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_skzkm_register_end_packing_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 63, 12), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_skzkm_register_end_packing_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10311', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 69, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 69, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __order_type.name() : __order_type,
        __owner_id.name() : __owner_id,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date,
        __gtin.name() : __gtin,
        __signs.name() : __signs,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'skzkm_register_end_packing', skzkm_register_end_packing)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 49, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_2_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 51, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type skzkm_foreign_emission with content type ELEMENT_ONLY
class skzkm_foreign_emission (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об упаковке лекарственного препарата и нанесении средств идентификации за пределами территории РФ (информация с СКЗКМ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_foreign_emission')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_skzkm_foreign_emission_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_skzkm_foreign_emission_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element packing_id uses Python identifier packing_id
    __packing_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'packing_id'), 'packing_id', '__AbsentNamespace0_skzkm_foreign_emission_packing_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 21, 3), )


    packing_id = property(__packing_id.value, __packing_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443')


    # Element control_id uses Python identifier control_id
    __control_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'control_id'), 'control_id', '__AbsentNamespace0_skzkm_foreign_emission_control_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 26, 3), )


    control_id = property(__control_id.value, __control_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_skzkm_foreign_emission_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 31, 3), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_skzkm_foreign_emission_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 36, 3), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_skzkm_foreign_emission_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 41, 3), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_skzkm_foreign_emission_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 46, 3), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_skzkm_foreign_emission_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 51, 3), )


    signs = property(__signs.value, __signs.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_skzkm_foreign_emission_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 69, 3), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_skzkm_foreign_emission_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10319', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 75, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 75, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __packing_id.name() : __packing_id,
        __control_id.name() : __control_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date,
        __gtin.name() : __gtin,
        __signs.name() : __signs,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'skzkm_foreign_emission', skzkm_foreign_emission)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 55, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_3_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 57, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type retail_sell_kkt with content type ELEMENT_ONLY
class retail_sell_kkt (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о продаже лекарственного препарата в рамках розничной торговли с использованием ККТ"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'retail_sell_kkt')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_retail_sell_kkt_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_retail_sell_kkt_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 16, 3), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438')


    # Element sell_details uses Python identifier sell_details
    __sell_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sell_details'), 'sell_details', '__AbsentNamespace0_retail_sell_kkt_sell_details', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 21, 3), )


    sell_details = property(__sell_details.value, __sell_details.set, None, '\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_retail_sell_kkt_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10511', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 117, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 117, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __inn.name() : __inn,
        __sell_details.name() : __sell_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'retail_sell_kkt', retail_sell_kkt)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Детализация продажи"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element receipt uses Python identifier receipt
    __receipt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receipt'), 'receipt', '__AbsentNamespace0_CTD_ANON_4_receipt', True, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 27, 6), )


    receipt = property(__receipt.value, __receipt.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0435\u043a\u043e\u0432, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0430')

    _ElementMap.update({
        __receipt.name() : __receipt
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень фискальных чеков, по которым была произведена продажа"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 31, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_CTD_ANON_5_type', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 33, 9), )


    type = property(__type.value, __type.set, None, '\u0422\u0438\u043f \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 (3 - \u0447\u0435\u043a \u043f\u0440\u043e\u0434\u0430\u0436\u0438, 31 - \u0447\u0435\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438)')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_CTD_ANON_5_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 38, 9), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1012)')


    # Element prescription uses Python identifier prescription
    __prescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription'), 'prescription', '__AbsentNamespace0_CTD_ANON_5_prescription', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 43, 9), )


    prescription = property(__prescription.value, __prescription.set, None, '\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442')


    # Element items uses Python identifier items
    __items = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'items'), 'items', '__AbsentNamespace0_CTD_ANON_5_items', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 67, 9), )


    items = property(__items.value, __items.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0435\u043a\u0435')

    _ElementMap.update({
        __type.name() : __type,
        __operation_date.name() : __operation_date,
        __prescription.name() : __prescription,
        __items.name() : __items
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Льготный рецепт"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 47, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_6_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 49, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_series uses Python identifier doc_series
    __doc_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_series'), 'doc_series', '__AbsentNamespace0_CTD_ANON_6_doc_series', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 54, 12), )


    doc_series = property(__doc_series.value, __doc_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u0435\u043d)')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_6_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 59, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')

    _ElementMap.update({
        __doc_date.name() : __doc_date,
        __doc_series.name() : __doc_series,
        __doc_num.name() : __doc_num
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Список товарных позиций в фискальном чеке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 71, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element item uses Python identifier item
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'item'), 'item', '__AbsentNamespace0_CTD_ANON_7_item', True, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 73, 12), )


    item = property(__item.value, __item.set, None, '\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u043e\u0432\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438')

    _ElementMap.update({
        __item.name() : __item
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Параметры товарной позиции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 77, 13)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_8_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 79, 15), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_8_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 84, 15), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0441\u043a\u0438\u0434\u043e\u043a \u0438 \u043d\u0430\u0446\u0435\u043d\u043e\u043a (\u0442\u0435\u0433 1079)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_8_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 89, 15), )


    vat_value = property(__vat_value.value, __vat_value.set, None, '\u0421\u0443\u043c\u043c\u0430 \u041d\u0414\u0421 (\u0442\u0435\u0433 1200)')


    # Element discount uses Python identifier discount
    __discount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'discount'), 'discount', '__AbsentNamespace0_CTD_ANON_8_discount', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 94, 15), )


    discount = property(__discount.value, __discount.set, None, '\u0421\u0443\u043c\u043c\u0430 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0439 \u0441\u043a\u0438\u0434\u043a\u0438')


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_8_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 99, 15), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value,
        __discount.name() : __discount,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type skzkm_recipe with content type ELEMENT_ONLY
class skzkm_recipe (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отпуске лекарственного препарата по льготному рецепту (информация с СКЗКМ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_recipe')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_skzkm_recipe_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_skzkm_recipe_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_skzkm_recipe_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 20, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_series uses Python identifier doc_series
    __doc_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_series'), 'doc_series', '__AbsentNamespace0_skzkm_recipe_doc_series', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 25, 12), )


    doc_series = property(__doc_series.value, __doc_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_skzkm_recipe_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_skzkm_recipe_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_skzkm_recipe_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 60, 12), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_skzkm_recipe_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10521', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 66, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 66, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_series.name() : __doc_series,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'skzkm_recipe', skzkm_recipe)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_9_union', True, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 41, 24), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 42, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_10_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 44, 36), )


    sgtin = property(__sgtin.value, __sgtin.set, None, None)


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_10_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 45, 36), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type recipe_kkt with content type ELEMENT_ONLY
class recipe_kkt (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отпуске лекарственного препарата по льготному рецепту с использованием ККТ"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recipe_kkt')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_recipe_kkt_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_recipe_kkt_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 15, 12), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1018)')


    # Element recipe_details uses Python identifier recipe_details
    __recipe_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recipe_details'), 'recipe_details', '__AbsentNamespace0_recipe_kkt_recipe_details', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 20, 12), )


    recipe_details = property(__recipe_details.value, __recipe_details.set, None, '\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0442\u043f\u0443\u0441\u043a\u0430')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_recipe_kkt_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10522', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 105, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 105, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __inn.name() : __inn,
        __recipe_details.name() : __recipe_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'recipe_kkt', recipe_kkt)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Детализация отпуска"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 24, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element receipt uses Python identifier receipt
    __receipt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receipt'), 'receipt', '__AbsentNamespace0_CTD_ANON_11_receipt', True, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 26, 24), )


    receipt = property(__receipt.value, __receipt.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0435\u043a\u043e\u0432, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u043e\u0442\u043f\u0443\u0441\u043a')

    _ElementMap.update({
        __receipt.name() : __receipt
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень фискальных чеков, по которым был произведён отпуск"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 30, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_CTD_ANON_12_type', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 32, 36), )


    type = property(__type.value, __type.set, None, '\u0422\u0438\u043f \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 (3 - \u0447\u0435\u043a \u043f\u0440\u043e\u0434\u0430\u0436\u0438, 31 - \u0447\u0435\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438)')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_CTD_ANON_12_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 37, 36), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1012)')


    # Element prescription uses Python identifier prescription
    __prescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription'), 'prescription', '__AbsentNamespace0_CTD_ANON_12_prescription', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 42, 36), )


    prescription = property(__prescription.value, __prescription.set, None, '\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442')


    # Element items uses Python identifier items
    __items = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'items'), 'items', '__AbsentNamespace0_CTD_ANON_12_items', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 70, 36), )


    items = property(__items.value, __items.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0435\u043a\u0435')

    _ElementMap.update({
        __type.name() : __type,
        __operation_date.name() : __operation_date,
        __prescription.name() : __prescription,
        __items.name() : __items
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Льготный рецепт"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 46, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_13_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 48, 48), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_series uses Python identifier doc_series
    __doc_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_series'), 'doc_series', '__AbsentNamespace0_CTD_ANON_13_doc_series', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 53, 48), )


    doc_series = property(__doc_series.value, __doc_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u0435\u043d)')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_13_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 60, 48), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')

    _ElementMap.update({
        __doc_date.name() : __doc_date,
        __doc_series.name() : __doc_series,
        __doc_num.name() : __doc_num
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Список товарных позиций в фискальном чеке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 74, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element item uses Python identifier item
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'item'), 'item', '__AbsentNamespace0_CTD_ANON_14_item', True, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 76, 48), )


    item = property(__item.value, __item.set, None, '\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u043e\u0432\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438')

    _ElementMap.update({
        __item.name() : __item
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Параметры товарной позиции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 80, 52)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_15_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 82, 60), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_15_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 87, 60), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type skzkm_health_care with content type ELEMENT_ONLY
class skzkm_health_care (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о выдаче лекарственного препарата для оказания медицинской помощи (информация с СКЗКМ)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_health_care')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_skzkm_health_care_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_skzkm_health_care_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_skzkm_health_care_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 20, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_skzkm_health_care_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_skzkm_health_care_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 30, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_skzkm_health_care_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 55, 12), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_skzkm_health_care_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='10531', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 61, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 61, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'skzkm_health_care', skzkm_health_care)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 34, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_16_union', True, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 36, 24), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 37, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_17_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 39, 36), )


    sgtin = property(__sgtin.value, __sgtin.set, None, None)


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_17_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 40, 36), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type result with content type ELEMENT_ONLY
class result (pyxb.binding.basis.complexTypeDefinition):
    """Результат обработки направленного в систему запроса"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'result')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation'), 'operation', '__AbsentNamespace0_result_operation', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 9, 12), )


    operation = property(__operation.value, __operation.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_id uses Python identifier operation_id
    __operation_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_id'), 'operation_id', '__AbsentNamespace0_result_operation_id', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 18, 12), )


    operation_id = property(__operation_id.value, __operation_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0443')


    # Element operation_result uses Python identifier operation_result
    __operation_result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_result'), 'operation_result', '__AbsentNamespace0_result_operation_result', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 23, 12), )


    operation_result = property(__operation_result.value, __operation_result.set, None, '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438')


    # Element operation_comment uses Python identifier operation_comment
    __operation_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_comment'), 'operation_comment', '__AbsentNamespace0_result_operation_comment', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 28, 12), )


    operation_comment = property(__operation_comment.value, __operation_comment.set, None, '\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_warnings uses Python identifier operation_warnings
    __operation_warnings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warnings'), 'operation_warnings', '__AbsentNamespace0_result_operation_warnings', True, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 33, 12), )


    operation_warnings = property(__operation_warnings.value, __operation_warnings.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439')


    # Element errors uses Python identifier errors
    __errors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'errors'), 'errors', '__AbsentNamespace0_result_errors', True, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 47, 12), )


    errors = property(__errors.value, __errors.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_result_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='200', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 72, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 72, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)


    # Attribute accept_time uses Python identifier accept_time
    __accept_time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'accept_time'), 'accept_time', '__AbsentNamespace0_result_accept_time', pyxb.binding.datatypes.dateTime, required=True)
    __accept_time._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 73, 8)
    __accept_time._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 73, 8)

    accept_time = property(__accept_time.value, __accept_time.set, None, '\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0432\u043e\u0434\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430')

    _ElementMap.update({
        __operation.name() : __operation,
        __operation_id.name() : __operation_id,
        __operation_result.name() : __operation_result,
        __operation_comment.name() : __operation_comment,
        __operation_warnings.name() : __operation_warnings,
        __errors.name() : __errors
    })
    _AttributeMap.update({
        __action_id.name() : __action_id,
        __accept_time.name() : __accept_time
    })
Namespace.addCategoryObject('typeBinding', 'result', result)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Список предупреждений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 37, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation_warning uses Python identifier operation_warning
    __operation_warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warning'), 'operation_warning', '__AbsentNamespace0_CTD_ANON_18_operation_warning', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 39, 24), )


    operation_warning = property(__operation_warning.value, __operation_warning.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __operation_warning.name() : __operation_warning
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Список ошибок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 51, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element error_code uses Python identifier error_code
    __error_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_code'), 'error_code', '__AbsentNamespace0_CTD_ANON_19_error_code', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 53, 24), )


    error_code = property(__error_code.value, __error_code.set, None, '\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element error_desc uses Python identifier error_desc
    __error_desc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_desc'), 'error_desc', '__AbsentNamespace0_CTD_ANON_19_error_desc', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 58, 24), )


    error_desc = property(__error_desc.value, __error_desc.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element object_id uses Python identifier object_id
    __object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object_id'), 'object_id', '__AbsentNamespace0_CTD_ANON_19_object_id', False, pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 63, 24), )


    object_id = property(__object_id.value, __object_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438')

    _ElementMap.update({
        __error_code.name() : __error_code,
        __error_desc.name() : __error_desc,
        __object_id.name() : __object_id
    })
    _AttributeMap.update({

    })



# Complex type result_service with content type ELEMENT_ONLY
class result_service (pyxb.binding.basis.complexTypeDefinition):
    """Результат фиксации сведений о внесении изменений в ИС МДЛП"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'result_service')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation'), 'operation', '__AbsentNamespace0_result_service_operation', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 9, 12), )


    operation = property(__operation.value, __operation.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_id uses Python identifier operation_id
    __operation_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_id'), 'operation_id', '__AbsentNamespace0_result_service_operation_id', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 14, 12), )


    operation_id = property(__operation_id.value, __operation_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0443')


    # Element operation_result uses Python identifier operation_result
    __operation_result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_result'), 'operation_result', '__AbsentNamespace0_result_service_operation_result', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 19, 12), )


    operation_result = property(__operation_result.value, __operation_result.set, None, '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438')


    # Element operation_comment uses Python identifier operation_comment
    __operation_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_comment'), 'operation_comment', '__AbsentNamespace0_result_service_operation_comment', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 24, 12), )


    operation_comment = property(__operation_comment.value, __operation_comment.set, None, '\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_warnings uses Python identifier operation_warnings
    __operation_warnings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warnings'), 'operation_warnings', '__AbsentNamespace0_result_service_operation_warnings', True, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 29, 12), )


    operation_warnings = property(__operation_warnings.value, __operation_warnings.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439')


    # Element errors uses Python identifier errors
    __errors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'errors'), 'errors', '__AbsentNamespace0_result_service_errors', True, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 43, 12), )


    errors = property(__errors.value, __errors.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a')


    # Element success uses Python identifier success
    __success = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'success'), 'success', '__AbsentNamespace0_result_service_success', True, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 67, 12), )


    success = property(__success.value, __success.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_result_service_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='201', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 98, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 98, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)


    # Attribute accept_time uses Python identifier accept_time
    __accept_time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'accept_time'), 'accept_time', '__AbsentNamespace0_result_service_accept_time', pyxb.binding.datatypes.dateTime, required=True)
    __accept_time._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 99, 8)
    __accept_time._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 99, 8)

    accept_time = property(__accept_time.value, __accept_time.set, None, '\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0432\u043e\u0434\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430')

    _ElementMap.update({
        __operation.name() : __operation,
        __operation_id.name() : __operation_id,
        __operation_result.name() : __operation_result,
        __operation_comment.name() : __operation_comment,
        __operation_warnings.name() : __operation_warnings,
        __errors.name() : __errors,
        __success.name() : __success
    })
    _AttributeMap.update({
        __action_id.name() : __action_id,
        __accept_time.name() : __accept_time
    })
Namespace.addCategoryObject('typeBinding', 'result_service', result_service)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Список предупреждений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 33, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation_warning uses Python identifier operation_warning
    __operation_warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warning'), 'operation_warning', '__AbsentNamespace0_CTD_ANON_20_operation_warning', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 35, 24), )


    operation_warning = property(__operation_warning.value, __operation_warning.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __operation_warning.name() : __operation_warning
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Список ошибок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 47, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element error_code uses Python identifier error_code
    __error_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_code'), 'error_code', '__AbsentNamespace0_CTD_ANON_21_error_code', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 49, 24), )


    error_code = property(__error_code.value, __error_code.set, None, '\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element error_desc uses Python identifier error_desc
    __error_desc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_desc'), 'error_desc', '__AbsentNamespace0_CTD_ANON_21_error_desc', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 54, 24), )


    error_desc = property(__error_desc.value, __error_desc.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element object_id uses Python identifier object_id
    __object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object_id'), 'object_id', '__AbsentNamespace0_CTD_ANON_21_object_id', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 59, 24), )


    object_id = property(__object_id.value, __object_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438')

    _ElementMap.update({
        __error_code.name() : __error_code,
        __error_desc.name() : __error_desc,
        __object_id.name() : __object_id
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Список зарегистрированных контрагентов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 71, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element success_desc uses Python identifier success_desc
    __success_desc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'success_desc'), 'success_desc', '__AbsentNamespace0_CTD_ANON_22_success_desc', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 73, 24), )


    success_desc = property(__success_desc.value, __success_desc.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0432\u0435\u0442\u0430')


    # Element object_id uses Python identifier object_id
    __object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object_id'), 'object_id', '__AbsentNamespace0_CTD_ANON_22_object_id', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 78, 24), )


    object_id = property(__object_id.value, __object_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438')


    # Element object_info uses Python identifier object_info
    __object_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object_info'), 'object_info', '__AbsentNamespace0_CTD_ANON_22_object_info', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 83, 24), )


    object_info = property(__object_info.value, __object_info.set, None, '\u0418\u041d\u041d \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')

    _ElementMap.update({
        __success_desc.name() : __success_desc,
        __object_id.name() : __object_id,
        __object_info.name() : __object_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """ИНН добавленного контрагента"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 87, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn_ul uses Python identifier inn_ul
    __inn_ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn_ul'), 'inn_ul', '__AbsentNamespace0_CTD_ANON_23_inn_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 89, 36), )


    inn_ul = property(__inn_ul.value, __inn_ul.set, None, None)


    # Element inn_fl uses Python identifier inn_fl
    __inn_fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn_fl'), 'inn_fl', '__AbsentNamespace0_CTD_ANON_23_inn_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 90, 36), )


    inn_fl = property(__inn_fl.value, __inn_fl.set, None, None)

    _ElementMap.update({
        __inn_ul.name() : __inn_ul,
        __inn_fl.name() : __inn_fl
    })
    _AttributeMap.update({

    })



# Complex type service_disposal_registrar with content type ELEMENT_ONLY
class service_disposal_registrar (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о подключении регистратора выбытия"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'service_disposal_registrar')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_service_disposal_registrar_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_service_disposal_registrar_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_service_disposal_registrar_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 20, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_series uses Python identifier doc_series
    __doc_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_series'), 'doc_series', '__AbsentNamespace0_service_disposal_registrar_doc_series', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 25, 12), )


    doc_series = property(__doc_series.value, __doc_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_service_disposal_registrar_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_service_disposal_registrar_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element device_info uses Python identifier device_info
    __device_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_info'), 'device_info', '__AbsentNamespace0_service_disposal_registrar_device_info', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 60, 12), )


    device_info = property(__device_info.value, __device_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_service_disposal_registrar_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='20521', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 66, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 66, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_series.name() : __doc_series,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details,
        __device_info.name() : __device_info
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'service_disposal_registrar', service_disposal_registrar)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_24_union', True, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 41, 24), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 42, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_25_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 44, 36), )


    sgtin = property(__sgtin.value, __sgtin.set, None, None)


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_25_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 45, 36), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type query_kiz_info with content type ELEMENT_ONLY
class query_kiz_info (pyxb.binding.basis.complexTypeDefinition):
    """Запрос информации по номеру SGTIN/SSCC"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'query_kiz_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_query_kiz_info_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 9, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_query_kiz_info_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 15, 16), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 SGTIN')


    # Element sscc_down uses Python identifier sscc_down
    __sscc_down = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_down'), 'sscc_down', '__AbsentNamespace0_query_kiz_info_sscc_down', False, pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 20, 16), )


    sscc_down = property(__sscc_down.value, __sscc_down.set, None, '\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)')


    # Element sscc_up uses Python identifier sscc_up
    __sscc_up = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_up'), 'sscc_up', '__AbsentNamespace0_query_kiz_info_sscc_up', False, pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 25, 16), )


    sscc_up = property(__sscc_up.value, __sscc_up.set, None, '\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_query_kiz_info_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='210', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 32, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 32, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __sgtin.name() : __sgtin,
        __sscc_down.name() : __sscc_down,
        __sscc_up.name() : __sscc_up
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'query_kiz_info', query_kiz_info)


# Complex type kiz_info with content type ELEMENT_ONLY
class kiz_info (pyxb.binding.basis.complexTypeDefinition):
    """Результат обработки сведений по номеру SGTIN/SSCC"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'kiz_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element result uses Python identifier result
    __result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result'), 'result', '__AbsentNamespace0_kiz_info_result', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 9, 12), )


    result = property(__result.value, __result.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_warnings uses Python identifier operation_warnings
    __operation_warnings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warnings'), 'operation_warnings', '__AbsentNamespace0_kiz_info_operation_warnings', True, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 38, 12), )


    operation_warnings = property(__operation_warnings.value, __operation_warnings.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439')


    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_kiz_info_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 53, 16), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 SGTIN')


    # Element sscc_down uses Python identifier sscc_down
    __sscc_down = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_down'), 'sscc_down', '__AbsentNamespace0_kiz_info_sscc_down', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 120, 16), )


    sscc_down = property(__sscc_down.value, __sscc_down.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)')


    # Element sscc_up uses Python identifier sscc_up
    __sscc_up = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_up'), 'sscc_up', '__AbsentNamespace0_kiz_info_sscc_up', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 234, 16), )


    sscc_up = property(__sscc_up.value, __sscc_up.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_kiz_info_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='211', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 272, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 272, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __result.name() : __result,
        __operation_warnings.name() : __operation_warnings,
        __sgtin.name() : __sgtin,
        __sscc_down.name() : __sscc_down,
        __sscc_up.name() : __sscc_up
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'kiz_info', kiz_info)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о результате операции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 13, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element found uses Python identifier found
    __found = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'found'), 'found', '__AbsentNamespace0_CTD_ANON_26_found', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 15, 24), )


    found = property(__found.value, __found.set, None, '\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_26_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 24, 28), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_26_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 29, 28), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')

    _ElementMap.update({
        __found.name() : __found,
        __sscc.name() : __sscc,
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Список предупреждений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 42, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation_warning uses Python identifier operation_warning
    __operation_warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warning'), 'operation_warning', '__AbsentNamespace0_CTD_ANON_27_operation_warning', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 44, 24), )


    operation_warning = property(__operation_warning.value, __operation_warning.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __operation_warning.name() : __operation_warning
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Информация об SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 57, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element info_sgtin uses Python identifier info_sgtin
    __info_sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_sgtin'), 'info_sgtin', '__AbsentNamespace0_CTD_ANON_28_info_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 59, 28), )


    info_sgtin = property(__info_sgtin.value, __info_sgtin.set, None, '\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SGTIN')


    # Element info_decision uses Python identifier info_decision
    __info_decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_decision'), 'info_decision', '__AbsentNamespace0_CTD_ANON_28_info_decision', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 93, 28), )


    info_decision = property(__info_decision.value, __info_decision.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438')

    _ElementMap.update({
        __info_sgtin.name() : __info_sgtin,
        __info_decision.name() : __info_decision
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Детальная информация по SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 63, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__AbsentNamespace0_CTD_ANON_29_status', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 65, 40), )


    status = property(__status.value, __status.set, None, '\u0441\u0442\u0430\u0442\u0443\u0441 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_29_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 70, 40), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041a\u043e\u0434 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_29_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 75, 40), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_29_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 80, 40), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_CTD_ANON_29_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 85, 40), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')

    _ElementMap.update({
        __status.name() : __status,
        __sscc.name() : __sscc,
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о решении"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 97, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element id_decision uses Python identifier id_decision
    __id_decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'id_decision'), 'id_decision', '__AbsentNamespace0_CTD_ANON_30_id_decision', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 99, 40), )


    id_decision = property(__id_decision.value, __id_decision.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_30_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 104, 40), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_30_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 109, 40), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __id_decision.name() : __id_decision,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Информация по SSCC (что находится в данной упаковке)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 124, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element tree uses Python identifier tree
    __tree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tree'), 'tree', '__AbsentNamespace0_CTD_ANON_31_tree', True, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 126, 28), )


    tree = property(__tree.value, __tree.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u0445')

    _ElementMap.update({
        __tree.name() : __tree
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о вложенных объектах"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 130, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_32_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 133, 44), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_32_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 138, 44), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 SGTIN')


    # Element parent_sscc uses Python identifier parent_sscc
    __parent_sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parent_sscc'), 'parent_sscc', '__AbsentNamespace0_CTD_ANON_32_parent_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 215, 40), )


    parent_sscc = property(__parent_sscc.value, __parent_sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __sgtin.name() : __sgtin,
        __parent_sscc.name() : __parent_sscc
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Информация об SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 142, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element info_sgtin uses Python identifier info_sgtin
    __info_sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_sgtin'), 'info_sgtin', '__AbsentNamespace0_CTD_ANON_33_info_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 144, 56), )


    info_sgtin = property(__info_sgtin.value, __info_sgtin.set, None, '\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SGTIN')


    # Element info_decision uses Python identifier info_decision
    __info_decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_decision'), 'info_decision', '__AbsentNamespace0_CTD_ANON_33_info_decision', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 186, 56), )


    info_decision = property(__info_decision.value, __info_decision.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438')

    _ElementMap.update({
        __info_sgtin.name() : __info_sgtin,
        __info_decision.name() : __info_decision
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Детальная информация по SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 148, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_34_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 150, 68), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__AbsentNamespace0_CTD_ANON_34_status', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 155, 68), )


    status = property(__status.value, __status.set, None, '\u0441\u0442\u0430\u0442\u0443\u0441 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_34_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 160, 68), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041a\u043e\u0434 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_34_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 167, 68), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_34_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 172, 68), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_CTD_ANON_34_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 178, 68), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __status.name() : __status,
        __sscc.name() : __sscc,
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о решении"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 190, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element id_decision uses Python identifier id_decision
    __id_decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'id_decision'), 'id_decision', '__AbsentNamespace0_CTD_ANON_35_id_decision', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 192, 68), )


    id_decision = property(__id_decision.value, __id_decision.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_35_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 197, 68), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_35_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 203, 68), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __id_decision.name() : __id_decision,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Информация по SSCC (где находится данная упаковка)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 238, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element info uses Python identifier info
    __info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info'), 'info', '__AbsentNamespace0_CTD_ANON_36_info', True, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 240, 28), )


    info = property(__info.value, __info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430\u0445')

    _ElementMap.update({
        __info.name() : __info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о вышестоящих упаковках"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 244, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_37_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 246, 40), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_CTD_ANON_37_level', False, pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 251, 40), )


    level = property(__level.value, __level.set, None, '\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __level.name() : __level
    })
    _AttributeMap.update({

    })



# Complex type edit_counterparty_list with content type ELEMENT_ONLY
class edit_counterparty_list (pyxb.binding.basis.complexTypeDefinition):
    """Изменение списка доверенных контрагентов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'edit_counterparty_list')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_edit_counterparty_list_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element edit_type uses Python identifier edit_type
    __edit_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edit_type'), 'edit_type', '__AbsentNamespace0_edit_counterparty_list_edit_type', False, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 15, 12), )


    edit_type = property(__edit_type.value, __edit_type.set, None, '\u0412\u0438\u0434 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element counterparty uses Python identifier counterparty
    __counterparty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty'), 'counterparty', '__AbsentNamespace0_edit_counterparty_list_counterparty', False, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 20, 12), )


    counterparty = property(__counterparty.value, __counterparty.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445/\u0443\u0434\u0430\u043b\u044f\u0435\u043c\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_edit_counterparty_list_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='212', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 58, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 58, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __edit_type.name() : __edit_type,
        __counterparty.name() : __counterparty
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'edit_counterparty_list', edit_counterparty_list)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Список добавляемых/удаляемых контрагентов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 24, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_CTD_ANON_38_counterparty_id', True, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 26, 24), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element counterparty_info uses Python identifier counterparty_info
    __counterparty_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_info'), 'counterparty_info', '__AbsentNamespace0_CTD_ANON_38_counterparty_info', True, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 31, 24), )


    counterparty_info = property(__counterparty_info.value, __counterparty_info.set, None, '\u0418\u041d\u041d \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432')

    _ElementMap.update({
        __counterparty_id.name() : __counterparty_id,
        __counterparty_info.name() : __counterparty_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """ИНН доверенных контрагентов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 35, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn_ul uses Python identifier inn_ul
    __inn_ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn_ul'), 'inn_ul', '__AbsentNamespace0_CTD_ANON_39_inn_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 37, 36), )


    inn_ul = property(__inn_ul.value, __inn_ul.set, None, None)


    # Element inn_fl uses Python identifier inn_fl
    __inn_fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn_fl'), 'inn_fl', '__AbsentNamespace0_CTD_ANON_39_inn_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 38, 36), )


    inn_fl = property(__inn_fl.value, __inn_fl.set, None, None)

    _ElementMap.update({
        __inn_ul.name() : __inn_ul,
        __inn_fl.name() : __inn_fl
    })
    _AttributeMap.update({

    })



# Complex type booking_sscc with content type ELEMENT_ONLY
class booking_sscc (pyxb.binding.basis.complexTypeDefinition):
    """Бронирование (отмена бронирования) номеров транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'booking_sscc')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_booking_sscc_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_type uses Python identifier operation_type
    __operation_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_type'), 'operation_type', '__AbsentNamespace0_booking_sscc_operation_type', False, pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 15, 12), )


    operation_type = property(__operation_type.value, __operation_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_booking_sscc_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 20, 12), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_booking_sscc_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='213', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 39, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 39, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_type.name() : __operation_type,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'booking_sscc', booking_sscc)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень номеров транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 24, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_40_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 26, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')

    _ElementMap.update({
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type query_hierarchy_info with content type ELEMENT_ONLY
class query_hierarchy_info (pyxb.binding.basis.complexTypeDefinition):
    """Запрос информации об иерархии вложенности SSCC"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'query_hierarchy_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_query_hierarchy_info_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 10, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_query_hierarchy_info_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 15, 3), )


    sscc = property(__sscc.value, __sscc.set, None, 'SSCC, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_query_hierarchy_info_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='220', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 21, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 21, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'query_hierarchy_info', query_hierarchy_info)


# Complex type hierarchy_sgtin_info with content type ELEMENT_ONLY
class hierarchy_sgtin_info (pyxb.binding.basis.complexTypeDefinition):
    """Детальная информация по SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hierarchy_sgtin_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_hierarchy_sgtin_info_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 10, 3), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_hierarchy_sgtin_info_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 15, 3), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__AbsentNamespace0_hierarchy_sgtin_info_status', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 20, 3), )


    status = property(__status.value, __status.set, None, '\u0421\u0442\u0430\u0442\u0443\u0441 SGTIN')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_hierarchy_sgtin_info_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 25, 3), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_hierarchy_sgtin_info_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 30, 3), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_hierarchy_sgtin_info_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 35, 3), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element pause_decision_info uses Python identifier pause_decision_info
    __pause_decision_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pause_decision_info'), 'pause_decision_info', '__AbsentNamespace0_hierarchy_sgtin_info_pause_decision_info', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 40, 3), )


    pause_decision_info = property(__pause_decision_info.value, __pause_decision_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc,
        __status.name() : __status,
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date,
        __pause_decision_info.name() : __pause_decision_info
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'hierarchy_sgtin_info', hierarchy_sgtin_info)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Информация о решении о приостановке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 44, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element id uses Python identifier id
    __id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_CTD_ANON_41_id', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 46, 6), )


    id = property(__id.value, __id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_CTD_ANON_41_number', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 51, 6), )


    number = property(__number.value, __number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')


    # Element date uses Python identifier date
    __date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'date'), 'date', '__AbsentNamespace0_CTD_ANON_41_date', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 56, 6), )


    date = property(__date.value, __date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __id.name() : __id,
        __number.name() : __number,
        __date.name() : __date
    })
    _AttributeMap.update({

    })



# Complex type hierarchy_sscc_info with content type ELEMENT_ONLY
class hierarchy_sscc_info (pyxb.binding.basis.complexTypeDefinition):
    """Детальная информация о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hierarchy_sscc_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 66, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_hierarchy_sscc_info_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 71, 3), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element packing_date uses Python identifier packing_date
    __packing_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'packing_date'), 'packing_date', '__AbsentNamespace0_hierarchy_sscc_info_packing_date', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 76, 3), )


    packing_date = property(__packing_date.value, __packing_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element childs uses Python identifier childs
    __childs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'childs'), 'childs', '__AbsentNamespace0_hierarchy_sscc_info_childs', True, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 81, 3), )


    childs = property(__childs.value, __childs.set, None, None)

    _ElementMap.update({
        __sscc.name() : __sscc,
        __packing_date.name() : __packing_date,
        __childs.name() : __childs
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'hierarchy_sscc_info', hierarchy_sscc_info)


# Complex type hierarchy_sscc_child with content type ELEMENT_ONLY
class hierarchy_sscc_child (pyxb.binding.basis.complexTypeDefinition):
    """Детальная информация о вложенных элементах"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hierarchy_sscc_child')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 84, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin_info uses Python identifier sgtin_info
    __sgtin_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin_info'), 'sgtin_info', '__AbsentNamespace0_hierarchy_sscc_child_sgtin_info', True, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 89, 3), )


    sgtin_info = property(__sgtin_info.value, __sgtin_info.set, None, None)


    # Element sscc_info uses Python identifier sscc_info
    __sscc_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_info'), 'sscc_info', '__AbsentNamespace0_hierarchy_sscc_child_sscc_info', True, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 90, 3), )


    sscc_info = property(__sscc_info.value, __sscc_info.set, None, None)

    _ElementMap.update({
        __sgtin_info.name() : __sgtin_info,
        __sscc_info.name() : __sscc_info
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'hierarchy_sscc_child', hierarchy_sscc_child)


# Complex type hierarchy_info with content type ELEMENT_ONLY
class hierarchy_info (pyxb.binding.basis.complexTypeDefinition):
    """Результат запроса информации об иерархии вложенности SSCC"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hierarchy_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 94, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc_up uses Python identifier sscc_up
    __sscc_up = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_up'), 'sscc_up', '__AbsentNamespace0_hierarchy_info_sscc_up', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 99, 3), )


    sscc_up = property(__sscc_up.value, __sscc_up.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)')


    # Element sscc_down uses Python identifier sscc_down
    __sscc_down = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_down'), 'sscc_down', '__AbsentNamespace0_hierarchy_info_sscc_down', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 109, 3), )


    sscc_down = property(__sscc_down.value, __sscc_down.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)')


    # Element operation_warnings uses Python identifier operation_warnings
    __operation_warnings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warnings'), 'operation_warnings', '__AbsentNamespace0_hierarchy_info_operation_warnings', True, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 119, 3), )


    operation_warnings = property(__operation_warnings.value, __operation_warnings.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_hierarchy_info_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='221', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 134, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 134, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __sscc_up.name() : __sscc_up,
        __sscc_down.name() : __sscc_down,
        __operation_warnings.name() : __operation_warnings
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'hierarchy_info', hierarchy_info)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Информация по SSCC (где находится данная упаковка)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 103, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc_info uses Python identifier sscc_info
    __sscc_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_info'), 'sscc_info', '__AbsentNamespace0_CTD_ANON_42_sscc_info', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 105, 6), )


    sscc_info = property(__sscc_info.value, __sscc_info.set, None, None)

    _ElementMap.update({
        __sscc_info.name() : __sscc_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Информация по SSCC (что находится в данной упаковке)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 113, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc_info uses Python identifier sscc_info
    __sscc_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_info'), 'sscc_info', '__AbsentNamespace0_CTD_ANON_43_sscc_info', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 115, 6), )


    sscc_info = property(__sscc_info.value, __sscc_info.set, None, None)

    _ElementMap.update({
        __sscc_info.name() : __sscc_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Список предупреждений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 123, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element operation_warning uses Python identifier operation_warning
    __operation_warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_warning'), 'operation_warning', '__AbsentNamespace0_CTD_ANON_44_operation_warning', False, pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 125, 6), )


    operation_warning = property(__operation_warning.value, __operation_warning.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f')

    _ElementMap.update({
        __operation_warning.name() : __operation_warning
    })
    _AttributeMap.update({

    })



# Complex type recall with content type ELEMENT_ONLY
class recall (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отмене ранее зарегистрированной собственной операции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recall')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_recall_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_recall_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element operation_id uses Python identifier operation_id
    __operation_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_id'), 'operation_id', '__AbsentNamespace0_recall_operation_id', False, pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 20, 12), )


    operation_id = property(__operation_id.value, __operation_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043e\u0442\u043c\u0435\u043d\u0435')


    # Element recall_action_id uses Python identifier recall_action_id
    __recall_action_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recall_action_id'), 'recall_action_id', '__AbsentNamespace0_recall_recall_action_id', False, pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 25, 12), )


    recall_action_id = property(__recall_action_id.value, __recall_action_id.set, None, '\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason'), 'reason', '__AbsentNamespace0_recall_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 30, 12), )


    reason = property(__reason.value, __reason.set, None, '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043e\u0442\u0437\u044b\u0432\u0430')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_recall_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='250', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 36, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 36, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __operation_id.name() : __operation_id,
        __recall_action_id.name() : __recall_action_id,
        __reason.name() : __reason
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'recall', recall)


# Complex type refusal_sender with content type ELEMENT_ONLY
class refusal_sender (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отзыве отправителем переданных получателю лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'refusal_sender')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_refusal_sender_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_refusal_sender_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_refusal_sender_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 20, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 - \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason'), 'reason', '__AbsentNamespace0_refusal_sender_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 25, 12), )


    reason = property(__reason.value, __reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_refusal_sender_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 30, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_refusal_sender_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_refusal_sender_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='251', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __receiver_id.name() : __receiver_id,
        __reason.name() : __reason,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'refusal_sender', refusal_sender)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Список отзываемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_45_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_45_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type refusal_receiver with content type ELEMENT_ONLY
class refusal_receiver (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отказе получателя от приемки лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'refusal_receiver')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_refusal_receiver_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_refusal_receiver_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_refusal_receiver_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 20, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason'), 'reason', '__AbsentNamespace0_refusal_receiver_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 25, 12), )


    reason = property(__reason.value, __reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_refusal_receiver_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 30, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u0432 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_refusal_receiver_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_refusal_receiver_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='252', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __shipper_id.name() : __shipper_id,
        __reason.name() : __reason,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'refusal_receiver', refusal_receiver)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Список не принятой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_46_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_46_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type change_information with content type ELEMENT_ONLY
class change_information (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о корректировке ранее направленных реквизитов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'change_information')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_change_information_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_change_information_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__AbsentNamespace0_change_information_details', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 20, 12), )


    details = property(__details.value, __details.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_change_information_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 54, 12), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_change_information_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='253', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 73, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 73, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __details.name() : __details,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'change_information', change_information)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения подлежащие корректировке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 24, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_CTD_ANON_47_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 26, 24), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_47_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 31, 24), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_CTD_ANON_47_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 36, 24), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)')


    # Element packing_id uses Python identifier packing_id
    __packing_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'packing_id'), 'packing_id', '__AbsentNamespace0_CTD_ANON_47_packing_id', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 41, 24), )


    packing_id = property(__packing_id.value, __packing_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443')


    # Element control_id uses Python identifier control_id
    __control_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'control_id'), 'control_id', '__AbsentNamespace0_CTD_ANON_47_control_id', False, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 46, 24), )


    control_id = property(__control_id.value, __control_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430')

    _ElementMap.update({
        __expiration_date.name() : __expiration_date,
        __series_number.name() : __series_number,
        __owner_id.name() : __owner_id,
        __packing_id.name() : __packing_id,
        __control_id.name() : __control_id
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 58, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_48_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 60, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type change_property with content type ELEMENT_ONLY
class change_property (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о корректировке """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'change_property')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_change_property_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_change_property_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 16, 3), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_change_property_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element action_id_type uses Python identifier action_id_type
    __action_id_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'action_id_type'), 'action_id_type', '__AbsentNamespace0_change_property_action_id_type', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 26, 3), )


    action_id_type = property(__action_id_type.value, __action_id_type.set, None, '\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ')


    # Element operation_id uses Python identifier operation_id
    __operation_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_id'), 'operation_id', '__AbsentNamespace0_change_property_operation_id', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 31, 3), )


    operation_id = property(__operation_id.value, __operation_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__AbsentNamespace0_change_property_details', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 36, 3), )


    details = property(__details.value, __details.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_change_property_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='254', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 154, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 154, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __action_id_type.name() : __action_id_type,
        __operation_id.name() : __operation_id,
        __details.name() : __details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'change_property', change_property)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения подлежащие корректировке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_49_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 42, 6), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_49_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 47, 6), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_CTD_ANON_49_source', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 52, 6), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_CTD_ANON_49_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 57, 6), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_CTD_ANON_49_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 62, 6), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_CTD_ANON_49_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 67, 6), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')

    _ElementMap.update({
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __source.name() : __source,
        __contract_num.name() : __contract_num,
        __contract_type.name() : __contract_type,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 71, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_50_union', True, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 73, 9), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 74, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_51_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 77, 13), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_51_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 82, 13), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_51_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 126, 12), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_51_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 131, 12), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_52_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 88, 16), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_52_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 93, 16), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 97, 17)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_53_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 99, 19), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_53_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 104, 19), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_53_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 109, 19), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_53_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 114, 19), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type transfer_code_to_custom with content type ELEMENT_ONLY
class transfer_code_to_custom (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация держателем РУ (или его представительством) сведений о передаче кодов маркировки таможенному складу в ИС МДЛП"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transfer_code_to_custom')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_transfer_code_to_custom_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_transfer_code_to_custom_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_transfer_code_to_custom_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 21, 3), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_transfer_code_to_custom_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 26, 3), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_transfer_code_to_custom_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 31, 3), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_transfer_code_to_custom_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='300', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 50, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 50, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __custom_receiver_id.name() : __custom_receiver_id,
        __gtin.name() : __gtin,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'transfer_code_to_custom', transfer_code_to_custom)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 35, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_54_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 37, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type register_end_packing with content type ELEMENT_ONLY
class register_end_packing (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о завершении этапа окончательной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'register_end_packing')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_register_end_packing_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_register_end_packing_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element order_type uses Python identifier order_type
    __order_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_type'), 'order_type', '__AbsentNamespace0_register_end_packing_order_type', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 20, 12), )


    order_type = property(__order_type.value, __order_type.set, None, '\u0422\u0438\u043f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_register_end_packing_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 25, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_register_end_packing_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 30, 12), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_register_end_packing_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 35, 12), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_register_end_packing_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 40, 12), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_register_end_packing_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 45, 12), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_register_end_packing_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='311', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 64, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 64, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __order_type.name() : __order_type,
        __owner_id.name() : __owner_id,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date,
        __gtin.name() : __gtin,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'register_end_packing', register_end_packing)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 49, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_55_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 51, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type register_product_emission with content type ELEMENT_ONLY
class register_product_emission (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о выпуске готовой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'register_product_emission')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_register_product_emission_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_register_product_emission_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element release_info uses Python identifier release_info
    __release_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'release_info'), 'release_info', '__AbsentNamespace0_register_product_emission_release_info', False, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 21, 3), )


    release_info = property(__release_info.value, __release_info.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_register_product_emission_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 26, 3), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_register_product_emission_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='313', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 54, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 54, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __release_info.name() : __release_info,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'register_product_emission', register_product_emission)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 30, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_56_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 32, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_56_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 37, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_to_release with content type ELEMENT_ONLY
class move_to_release (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов для выпуска готовой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_to_release')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_to_release_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_move_to_release_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 15, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_to_release_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_to_release_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 25, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_to_release_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_to_release_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_to_release_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='314', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_to_release', move_to_release)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_57_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_57_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type return_contract_production with content type ELEMENT_ONLY
class return_contract_production (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о возврате лекарственных препаратов контрактному производителю"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'return_contract_production')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_return_contract_production_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_return_contract_production_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_return_contract_production_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_return_contract_production_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_return_contract_production_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_return_contract_production_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_return_contract_production_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='315', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'return_contract_production', return_contract_production)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_58_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_58_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type foreign_emission with content type ELEMENT_ONLY
class foreign_emission (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о выпуске готовой продукции за пределами территории Российской Федерации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_emission')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_emission_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_emission_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element packing_id uses Python identifier packing_id
    __packing_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'packing_id'), 'packing_id', '__AbsentNamespace0_foreign_emission_packing_id', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 20, 12), )


    packing_id = property(__packing_id.value, __packing_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443')


    # Element control_id uses Python identifier control_id
    __control_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'control_id'), 'control_id', '__AbsentNamespace0_foreign_emission_control_id', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 25, 12), )


    control_id = property(__control_id.value, __control_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_foreign_emission_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 30, 12), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element expiration_date uses Python identifier expiration_date
    __expiration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'expiration_date'), 'expiration_date', '__AbsentNamespace0_foreign_emission_expiration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 35, 12), )


    expiration_date = property(__expiration_date.value, __expiration_date.set, None, '\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430')


    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_foreign_emission_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 40, 12), )


    gtin = property(__gtin.value, __gtin.set, None, '\u041a\u043e\u0434 GTIN')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_foreign_emission_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 45, 12), )


    signs = property(__signs.value, __signs.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_emission_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='321', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 64, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 64, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __packing_id.name() : __packing_id,
        __control_id.name() : __control_id,
        __series_number.name() : __series_number,
        __expiration_date.name() : __expiration_date,
        __gtin.name() : __gtin,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_emission', foreign_emission)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 49, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_59_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 51, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type foreign_shipment with content type ELEMENT_ONLY
class foreign_shipment (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов в Российскую Федерацию"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_shipment')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_shipment_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_foreign_shipment_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 15, 12), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_foreign_shipment_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 20, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_foreign_shipment_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 25, 12), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_shipment_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 30, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_foreign_shipment_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 35, 12), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_foreign_shipment_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 48, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_foreign_shipment_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 53, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_foreign_shipment_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 58, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_shipment_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='331', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 86, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 86, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_shipment', foreign_shipment)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 62, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_60_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 64, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_60_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 69, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type foreign_import with content type ELEMENT_ONLY
class foreign_import (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о ввозе лекарственных препаратов в Российскую Федерацию"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_import')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_import_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_foreign_import_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 15, 12), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_foreign_import_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 20, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_foreign_import_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 25, 12), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_import_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 30, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_foreign_import_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 35, 12), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_foreign_import_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 48, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_foreign_import_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 53, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_foreign_import_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 58, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_import_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='332', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 86, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 86, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __shipper_id.name() : __shipper_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_import', foreign_import)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 62, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_61_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 64, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_61_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 69, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type foreign_import_owner with content type ELEMENT_ONLY
class foreign_import_owner (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о ввозе лекарственных препаратов в Российскую Федерацию без импортера"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_import_owner')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_import_owner_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_foreign_import_owner_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_foreign_import_owner_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 21, 3), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_import_owner_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_foreign_import_owner_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_foreign_import_owner_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 42, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_foreign_import_owner_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 47, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_foreign_import_owner_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 52, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_import_owner_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='333', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 80, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 80, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_import_owner', foreign_import_owner)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 56, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_62_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 58, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_62_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 63, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type custom_move with content type ELEMENT_ONLY
class custom_move (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о перемещении лекарственных препаратов между зонами таможенного контроля"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'custom_move')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_custom_move_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 9, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element custom_shipper_id uses Python identifier custom_shipper_id
    __custom_shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_shipper_id'), 'custom_shipper_id', '__AbsentNamespace0_custom_move_custom_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 14, 12), )


    custom_shipper_id = property(__custom_shipper_id.value, __custom_shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_custom_move_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 19, 12), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_custom_move_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 24, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_custom_move_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 29, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_custom_move_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='334', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 57, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 57, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __custom_shipper_id.name() : __custom_shipper_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'custom_move', custom_move)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Список перемещаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 33, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_63_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 35, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_63_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 40, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type fts_data with content type ELEMENT_ONLY
class fts_data (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о результатах таможенного оформления"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fts_data')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_fts_data_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_fts_data_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element fts_info uses Python identifier fts_info
    __fts_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fts_info'), 'fts_info', '__AbsentNamespace0_fts_data_fts_info', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 21, 3), )


    fts_info = property(__fts_info.value, __fts_info.set, None, '\u0421\u043e\u0441\u0442\u0430\u0432 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u0434\u0430\u0447\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438')


    # Element custom_procedure_code uses Python identifier custom_procedure_code
    __custom_procedure_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_procedure_code'), 'custom_procedure_code', '__AbsentNamespace0_fts_data_custom_procedure_code', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 26, 3), )


    custom_procedure_code = property(__custom_procedure_code.value, __custom_procedure_code.set, None, '\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_fts_data_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 31, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_fts_data_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='335', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 115, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 115, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __fts_info.name() : __fts_info,
        __custom_procedure_code.name() : __custom_procedure_code,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'fts_data', fts_data)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 35, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_64_union', True, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 37, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 38, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_65_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 41, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_65_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 46, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element customs_value uses Python identifier customs_value
    __customs_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'customs_value'), 'customs_value', '__AbsentNamespace0_CTD_ANON_65_customs_value', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 90, 9), )


    customs_value = property(__customs_value.value, __customs_value.set, None, '\u0422\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c')


    # Element confnum_info uses Python identifier confnum_info
    __confnum_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confnum_info'), 'confnum_info', '__AbsentNamespace0_CTD_ANON_65_confnum_info', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 95, 9), )


    confnum_info = property(__confnum_info.value, __confnum_info.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 ')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __customs_value.name() : __customs_value,
        __confnum_info.name() : __confnum_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 50, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_66_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 52, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_66_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 57, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 61, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_67_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 63, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_67_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 68, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element customs_value uses Python identifier customs_value
    __customs_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'customs_value'), 'customs_value', '__AbsentNamespace0_CTD_ANON_67_customs_value', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 73, 16), )


    customs_value = property(__customs_value.value, __customs_value.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element confnum_info uses Python identifier confnum_info
    __confnum_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confnum_info'), 'confnum_info', '__AbsentNamespace0_CTD_ANON_67_confnum_info', False, pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 78, 16), )


    confnum_info = property(__confnum_info.value, __confnum_info.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 ')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __customs_value.name() : __customs_value,
        __confnum_info.name() : __confnum_info
    })
    _AttributeMap.update({

    })



# Complex type import_info with content type ELEMENT_ONLY
class import_info (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация держателем РУ (или его представительством) сведений об условиях ввоза в Российскую Федерацию ЛП, маркированных на таможенном складе, в ИС МДЛП"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'import_info')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_import_info_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_import_info_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_import_info_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 21, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_import_info_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_import_info_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_import_info_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_import_info_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_import_info_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_import_info_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='336', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 82, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 82, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'import_info', import_info)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_68_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 60, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_68_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 65, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type receive_importer with content type ELEMENT_ONLY
class receive_importer (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о приемке лекарственных препаратов на склад импортера"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_importer')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_importer_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element custom_shipper_id uses Python identifier custom_shipper_id
    __custom_shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_shipper_id'), 'custom_shipper_id', '__AbsentNamespace0_receive_importer_custom_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 16, 3), )


    custom_shipper_id = property(__custom_shipper_id.value, __custom_shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_importer_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_receive_importer_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_receive_importer_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_importer_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_importer_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='341', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 120, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 120, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __custom_shipper_id.name() : __custom_shipper_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_importer', receive_importer)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_69_union', True, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 42, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 43, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_70_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 46, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_70_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 51, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost_taxes uses Python identifier cost_taxes
    __cost_taxes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost_taxes'), 'cost_taxes', '__AbsentNamespace0_CTD_ANON_70_cost_taxes', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 95, 9), )


    cost_taxes = property(__cost_taxes.value, __cost_taxes.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0441\u0431\u043e\u0440\u043e\u0432')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_70_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 100, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost_taxes.name() : __cost_taxes,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 55, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_71_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 57, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_71_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 62, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 66, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_72_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 68, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_72_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 73, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost_taxes uses Python identifier cost_taxes
    __cost_taxes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost_taxes'), 'cost_taxes', '__AbsentNamespace0_CTD_ANON_72_cost_taxes', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 78, 16), )


    cost_taxes = property(__cost_taxes.value, __cost_taxes.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u041b\u041f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0441\u0431\u043e\u0440\u043e\u0432')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_72_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 83, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost_taxes.name() : __cost_taxes,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type release_in_circulation with content type ELEMENT_ONLY
class release_in_circulation (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о вводе ЛП в оборот на территории РФ"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'release_in_circulation')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_release_in_circulation_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_release_in_circulation_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element release_info uses Python identifier release_info
    __release_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'release_info'), 'release_info', '__AbsentNamespace0_release_in_circulation_release_info', False, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 21, 3), )


    release_info = property(__release_info.value, __release_info.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')


    # Element signs uses Python identifier signs
    __signs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'signs'), 'signs', '__AbsentNamespace0_release_in_circulation_signs', False, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 26, 3), )


    signs = property(__signs.value, __signs.set, None, '\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_release_in_circulation_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='342', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 54, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 54, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __release_info.name() : __release_info,
        __signs.name() : __signs
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'release_in_circulation', release_in_circulation)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень идентификационных кодов потребительских упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 30, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_73_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 32, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_73_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 37, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type change_owner with content type ELEMENT_ONLY
class change_owner (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о смене собственника лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'change_owner')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_change_owner_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_change_owner_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 15, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_change_owner_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_change_owner_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_change_owner_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_change_owner_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_change_owner_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='351', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'change_owner', change_owner)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_74_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_74_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type eeu_owner with content type ELEMENT_ONLY
class eeu_owner (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о ввозе собственных лекарственных препаратов в Российскую Федерацию из стран ЕАЭС"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_owner')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_owner_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_owner_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_eeu_owner_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 21, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_eeu_owner_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_eeu_owner_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 36, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_owner_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_owner_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='360', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_owner', eeu_owner)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_75_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_75_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 52, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type eeu_shipment with content type ELEMENT_ONLY
class eeu_shipment (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов в Российскую Федерацию из стран ЕАЭС"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_shipment')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_shipment_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_eeu_shipment_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_eeu_shipment_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 21, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_shipment_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_eeu_shipment_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_eeu_shipment_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_eeu_shipment_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_shipment_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_shipment_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='361', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 138, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 138, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_shipment', eeu_shipment)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_76_union', True, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 60, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 61, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_77_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 64, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_77_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 69, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_77_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 113, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_77_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 118, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 73, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_78_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 75, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_78_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 80, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 84, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_79_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 86, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_79_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 91, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_79_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 96, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_79_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 101, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type eeu_import with content type ELEMENT_ONLY
class eeu_import (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о ввозе из ЕАЭС и приемке лекарственных препаратов на склад покупателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_import')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_import_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_eeu_import_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_import_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_eeu_import_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 26, 3), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_eeu_import_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_eeu_import_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_eeu_import_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_import_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_import_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='362', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 138, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 138, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __operation_date.name() : __operation_date,
        __shipper_id.name() : __shipper_id,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_import', eeu_import)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_80_union', True, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 60, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 61, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_81_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 64, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_81_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 69, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_81_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 113, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_81_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 118, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 73, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_82_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 75, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_82_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 80, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 84, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_83_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 86, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_83_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 91, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_83_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 96, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_83_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 101, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type eeu_release with content type ELEMENT_ONLY
class eeu_release (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о вводе лекарственных препаратов в оборот на территории Российской Федерации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_release')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_release_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_release_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_release_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 21, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0439 \u0432\u0432\u043e\u0434\u0443 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_release_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='363', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 95, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 95, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_release', eeu_release)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции, подлежащей вводу в оборот"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_84_union', True, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 27, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 28, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_85_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 31, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_85_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 36, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element release_info uses Python identifier release_info
    __release_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'release_info'), 'release_info', '__AbsentNamespace0_CTD_ANON_85_release_info', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 75, 9), )


    release_info = property(__release_info.value, __release_info.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __release_info.name() : __release_info
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 40, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_86_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 42, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_86_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 47, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u0434\u043b\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о документах, подтверждающих соответствие, для содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 51, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_87_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 53, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_87_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 58, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element release_info uses Python identifier release_info
    __release_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'release_info'), 'release_info', '__AbsentNamespace0_CTD_ANON_87_release_info', False, pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 63, 16), )


    release_info = property(__release_info.value, __release_info.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __release_info.name() : __release_info
    })
    _AttributeMap.update({

    })



# Complex type move_owner with content type ELEMENT_ONLY
class move_owner (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов собственнику"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_owner')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_owner_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_move_owner_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 15, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_owner_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_owner_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 25, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_owner_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_owner_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_owner_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='381', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_owner', move_owner)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_88_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_88_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type return_to_circulation with content type ELEMENT_ONLY
class return_to_circulation (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о повторном вводе лекарственного препарата в оборот"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'return_to_circulation')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_return_to_circulation_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_return_to_circulation_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element withdrawal_reason uses Python identifier withdrawal_reason
    __withdrawal_reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'withdrawal_reason'), 'withdrawal_reason', '__AbsentNamespace0_return_to_circulation_withdrawal_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 21, 3), )


    withdrawal_reason = property(__withdrawal_reason.value, __withdrawal_reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_return_to_circulation_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_return_to_circulation_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440')


    # Element reason_return uses Python identifier reason_return
    __reason_return = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason_return'), 'reason_return', '__AbsentNamespace0_return_to_circulation_reason_return', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 36, 3), )


    reason_return = property(__reason_return.value, __reason_return.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_return_to_circulation_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_return_to_circulation_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='391', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 60, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 60, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __withdrawal_reason.name() : __withdrawal_reason,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __reason_return.name() : __reason_return,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'return_to_circulation', return_to_circulation)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_89_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type move_order with content type ELEMENT_ONLY
class move_order (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов со склада отправителя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_order')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_order_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_order_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_order_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_order_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_order_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element turnover_type uses Python identifier turnover_type
    __turnover_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'turnover_type'), 'turnover_type', '__AbsentNamespace0_move_order_turnover_type', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 36, 3), )


    turnover_type = property(__turnover_type.value, __turnover_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_move_order_source', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 41, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_move_order_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 46, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_move_order_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 51, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_order_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 56, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_order_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='415', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 140, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 140, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __turnover_type.name() : __turnover_type,
        __source.name() : __source,
        __contract_type.name() : __contract_type,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_order', move_order)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 60, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_90_union', True, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 62, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 63, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_91_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 66, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_91_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 71, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_91_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 115, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_91_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 120, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 75, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_92_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 77, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_92_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 82, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_93_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 88, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_93_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 93, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_93_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 98, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_93_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 103, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type receive_order with content type ELEMENT_ONLY
class receive_order (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация ИС МДЛП сведений о приемке лекарственных препаратов на склад получателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_order')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_order_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_receive_order_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 16, 3), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_order_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_receive_order_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_receive_order_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element receive_type uses Python identifier receive_type
    __receive_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_type'), 'receive_type', '__AbsentNamespace0_receive_order_receive_type', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 36, 3), )


    receive_type = property(__receive_type.value, __receive_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_receive_order_source', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 41, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_receive_order_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 46, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_receive_order_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 51, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_order_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 56, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_order_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='416', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 140, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 140, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_id.name() : __shipper_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __receive_type.name() : __receive_type,
        __source.name() : __source,
        __contract_type.name() : __contract_type,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_order', receive_order)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 60, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_94_union', True, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 62, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 63, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_95_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 66, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_95_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 71, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_95_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 115, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_95_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 120, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 75, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_96_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 77, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_96_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 82, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_97_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 88, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_97_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 93, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_97_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 98, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_97_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 103, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type move_return with content type ELEMENT_ONLY
class move_return (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о возврате приостановленных лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_return')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_return_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_return_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_return_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_return_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_return_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_return_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_return_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='417', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_return', move_return)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_98_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_98_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_place with content type ELEMENT_ONLY
class move_place (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о перемещении лекарственных препаратов между различными адресами осуществления деятельности"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_place')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_place_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_place_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 15, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_place_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_place_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_place_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_place_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_place_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='431', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_place', move_place)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Список перемещаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_99_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_99_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_unregistered_order with content type ELEMENT_ONLY
class move_unregistered_order (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов на незарегистрированное место деятельности"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_unregistered_order')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_unregistered_order_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_unregistered_order_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element receiver_info uses Python identifier receiver_info
    __receiver_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_info'), 'receiver_info', '__AbsentNamespace0_move_unregistered_order_receiver_info', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 21, 3), )


    receiver_info = property(__receiver_info.value, __receiver_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_move_unregistered_order_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 59, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_unregistered_order_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 64, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_unregistered_order_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 69, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_unregistered_order_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 74, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_unregistered_order_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='441', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 158, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 158, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __receiver_info.name() : __receiver_info,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_unregistered_order', move_unregistered_order)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Информация об организации-получателе"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element receiver_inn uses Python identifier receiver_inn
    __receiver_inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_inn'), 'receiver_inn', '__AbsentNamespace0_CTD_ANON_100_receiver_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 27, 6), )


    receiver_inn = property(__receiver_inn.value, __receiver_inn.set, None, '\u0418\u041d\u041d/\u041a\u041f\u041f \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_CTD_ANON_100_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 51, 6), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')

    _ElementMap.update({
        __receiver_inn.name() : __receiver_inn,
        __receiver_id.name() : __receiver_id
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """ИНН/КПП получателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 31, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ul'), 'ul', '__AbsentNamespace0_CTD_ANON_101_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 33, 9), )


    ul = property(__ul.value, __ul.set, None, None)


    # Element fl uses Python identifier fl
    __fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fl'), 'fl', '__AbsentNamespace0_CTD_ANON_101_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 41, 9), )


    fl = property(__fl.value, __fl.set, None, None)

    _ElementMap.update({
        __ul.name() : __ul,
        __fl.name() : __fl
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 34, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_102_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 36, 12), )


    inn = property(__inn.value, __inn.set, None, None)


    # Element kpp uses Python identifier kpp
    __kpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kpp'), 'kpp', '__AbsentNamespace0_CTD_ANON_102_kpp', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 37, 12), )


    kpp = property(__kpp.value, __kpp.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn,
        __kpp.name() : __kpp
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 42, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_103_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 44, 12), )


    inn = property(__inn.value, __inn.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 78, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_104_union', True, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 80, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 81, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_105_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 84, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_105_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 89, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_105_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 133, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_105_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 138, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 93, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_106_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 95, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_106_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 100, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 104, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_107_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 106, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_107_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 111, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_107_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 116, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_107_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 121, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type receive_unregistered_order with content type ELEMENT_ONLY
class receive_unregistered_order (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о приемке на склад лекарственных препаратов, ранее отгруженных на незарегистрированное место деятельности"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_unregistered_order')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_unregistered_order_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_receive_unregistered_order_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 15, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_unregistered_order_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_receive_unregistered_order_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_receive_unregistered_order_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_unregistered_order_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_unregistered_order_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='442', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_id.name() : __shipper_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_unregistered_order', receive_unregistered_order)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_108_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_108_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_eeu with content type ELEMENT_ONLY
class move_eeu (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о вывозе лекарственных препаратов с территории Российской Федерации на территорию государства-члена ЕАЭС"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_eeu')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_eeu_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_eeu_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element info_org_eeu uses Python identifier info_org_eeu
    __info_org_eeu = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_org_eeu'), 'info_org_eeu', '__AbsentNamespace0_move_eeu_info_org_eeu', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 21, 3), )


    info_org_eeu = property(__info_org_eeu.value, __info_org_eeu.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b (\u0418\u0422\u0418\u041d/\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b) \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_eeu_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_eeu_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_move_eeu_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 36, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_eeu_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_eeu_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='461', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 125, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 125, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __info_org_eeu.name() : __info_org_eeu,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __contract_type.name() : __contract_type,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_eeu', move_eeu)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_109_union', True, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 47, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 48, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_110_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 51, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_110_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 56, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_110_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 100, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_110_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 105, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 60, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_111_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 62, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_111_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 67, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 71, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_112_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 73, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_112_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 78, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_112_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 83, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_112_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 88, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type move_state_dispatch with content type ELEMENT_ONLY
class move_state_dispatch (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о перемещении лекарственных препаратов между различными адресами осуществления деятельности в рамках государственного лекарственного обеспечения"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_state_dispatch')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_state_dispatch_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_state_dispatch_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_state_dispatch_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_state_dispatch_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_state_dispatch_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_move_state_dispatch_source', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 36, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_move_state_dispatch_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 47, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_state_dispatch_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 52, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_state_dispatch_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='470', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 136, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 136, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __source.name() : __source,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_state_dispatch', move_state_dispatch)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Список перемещаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 56, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_113_union', True, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 58, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 59, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_114_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 62, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_114_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 67, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_114_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 111, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_114_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 116, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 71, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_115_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 73, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_115_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 78, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 82, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_116_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 84, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_116_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 89, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_116_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 94, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_116_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 99, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type state_dispatch with content type ELEMENT_ONLY
class state_dispatch (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о смене владельца лекарственных препаратов в рамках государственного лекарственного обеспечения"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'state_dispatch')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_state_dispatch_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_state_dispatch_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_state_dispatch_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_state_dispatch_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_state_dispatch_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_state_dispatch_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_state_dispatch_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='471', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'state_dispatch', state_dispatch)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_117_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_117_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type agent_dispatch with content type ELEMENT_ONLY
class agent_dispatch (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отгрузке лекарственных препаратов со склада отправителя в рамках агентского договора"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'agent_dispatch')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_agent_dispatch_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_agent_dispatch_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_agent_dispatch_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element turnover_type uses Python identifier turnover_type
    __turnover_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'turnover_type'), 'turnover_type', '__AbsentNamespace0_agent_dispatch_turnover_type', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 26, 3), )


    turnover_type = property(__turnover_type.value, __turnover_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_agent_dispatch_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_agent_dispatch_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 36, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_agent_dispatch_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_agent_dispatch_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='472', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __turnover_type.name() : __turnover_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'agent_dispatch', agent_dispatch)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_118_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_118_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 52, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type arbitration with content type ELEMENT_ONLY
class arbitration (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о постановке в арбитраж/снятие арбитража"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'arbitration')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_arbitration_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_arbitration_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 16, 3), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_arbitration_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_arbitration_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_arbitration_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440')


    # Element sign_arbitration uses Python identifier sign_arbitration
    __sign_arbitration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sign_arbitration'), 'sign_arbitration', '__AbsentNamespace0_arbitration_sign_arbitration', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 36, 3), )


    sign_arbitration = property(__sign_arbitration.value, __sign_arbitration.set, None, '\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_arbitration_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_arbitration_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='481', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __sign_arbitration.name() : __sign_arbitration,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'arbitration', arbitration)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_119_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_119_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 52, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type retail_sale with content type ELEMENT_ONLY
class retail_sale (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о продаже лекарственного препарата в рамках розничной торговли"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'retail_sale')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_retail_sale_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_retail_sale_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element sales uses Python identifier sales
    __sales = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sales'), 'sales', '__AbsentNamespace0_retail_sale_sales', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 21, 3), )


    sales = property(__sales.value, __sales.set, None, '\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_retail_sale_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='511', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 133, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 133, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __sales.name() : __sales
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'retail_sale', retail_sale)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """Детализация продажи"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_120_union', True, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 27, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 28, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_121_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 30, 9), )


    detail = property(__detail.value, __detail.set, None, '\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element sale_docs uses Python identifier sale_docs
    __sale_docs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sale_docs'), 'sale_docs', '__AbsentNamespace0_CTD_ANON_121_sale_docs', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 68, 9), )


    sale_docs = property(__sale_docs.value, __sale_docs.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b')

    _ElementMap.update({
        __detail.name() : __detail,
        __sale_docs.name() : __sale_docs
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """Детализация продажи по каждой единице продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 34, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_122_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 36, 12), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440\xa0SGTIN')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_122_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 41, 12), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_122_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 46, 12), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_122_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 51, 12), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element discount uses Python identifier discount
    __discount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'discount'), 'discount', '__AbsentNamespace0_CTD_ANON_122_discount', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 56, 12), )


    discount = property(__discount.value, __discount.set, None, '\u0421\u0443\u043c\u043c\u0430 \u0441\u043a\u0438\u0434\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value,
        __sold_part.name() : __sold_part,
        __discount.name() : __discount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """Документы"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 72, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_type uses Python identifier doc_type
    __doc_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_type'), 'doc_type', '__AbsentNamespace0_CTD_ANON_123_doc_type', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 74, 12), )


    doc_type = property(__doc_type.value, __doc_type.set, None, '\u0412\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (1 - \u0447\u0435\u043a, 2 - \u0431\u043b\u0430\u043d\u043a \u0441\u0442\u0440\u043e\u0433\u043e\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 (\u0411\u0421\u041e), 3 - \u0434\u043e\u0433\u043e\u0432\u043e\u0440, 4 - \u043f\u0440\u043e\u0447\u0435\u0435)\n                                                                    ')


    # Element doc_name uses Python identifier doc_name
    __doc_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_name'), 'doc_name', '__AbsentNamespace0_CTD_ANON_123_doc_name', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 80, 12), )


    doc_name = property(__doc_name.value, __doc_name.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0432\u0438\u0434\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c "\u043f\u0440\u043e\u0447\u0435\u0435")\n                                                                    ')


    # Element doc_number uses Python identifier doc_number
    __doc_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_number'), 'doc_number', '__AbsentNamespace0_CTD_ANON_123_doc_number', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 86, 12), )


    doc_number = property(__doc_number.value, __doc_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f "\u0431/\u043d")')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_123_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 91, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element prescription uses Python identifier prescription
    __prescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription'), 'prescription', '__AbsentNamespace0_CTD_ANON_123_prescription', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 96, 12), )


    prescription = property(__prescription.value, __prescription.set, None, '\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442')

    _ElementMap.update({
        __doc_type.name() : __doc_type,
        __doc_name.name() : __doc_name,
        __doc_number.name() : __doc_number,
        __doc_date.name() : __doc_date,
        __prescription.name() : __prescription
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (pyxb.binding.basis.complexTypeDefinition):
    """Льготный рецепт"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 100, 13)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element prescription_num uses Python identifier prescription_num
    __prescription_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription_num'), 'prescription_num', '__AbsentNamespace0_CTD_ANON_124_prescription_num', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 102, 15), )


    prescription_num = property(__prescription_num.value, __prescription_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ')


    # Element prescription_date uses Python identifier prescription_date
    __prescription_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription_date'), 'prescription_date', '__AbsentNamespace0_CTD_ANON_124_prescription_date', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 108, 15), )


    prescription_date = property(__prescription_date.value, __prescription_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ')


    # Element prescription_series uses Python identifier prescription_series
    __prescription_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prescription_series'), 'prescription_series', '__AbsentNamespace0_CTD_ANON_124_prescription_series', False, pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 114, 15), )


    prescription_series = property(__prescription_series.value, __prescription_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ')

    _ElementMap.update({
        __prescription_num.name() : __prescription_num,
        __prescription_date.name() : __prescription_date,
        __prescription_series.name() : __prescription_series
    })
    _AttributeMap.update({

    })



# Complex type recipe with content type ELEMENT_ONLY
class recipe (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об отпуске лекарственного препарата по льготному рецепту"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recipe')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_recipe_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_recipe_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_recipe_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 20, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_series uses Python identifier doc_series
    __doc_series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_series'), 'doc_series', '__AbsentNamespace0_recipe_doc_series', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 25, 12), )


    doc_series = property(__doc_series.value, __doc_series.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_recipe_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_recipe_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_recipe_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='521', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 61, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 61, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_series.name() : __doc_series,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'recipe', recipe)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_125_union', True, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 41, 24), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 42, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_126_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 44, 36), )


    sgtin = property(__sgtin.value, __sgtin.set, None, None)


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_126_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 45, 36), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type health_care with content type ELEMENT_ONLY
class health_care (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о выдаче лекарственного препарата для оказания медицинской помощи"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'health_care')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_health_care_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_health_care_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_health_care_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 20, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_health_care_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_health_care_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 30, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_health_care_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='531', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 56, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 56, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'health_care', health_care)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 34, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_127_union', True, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 36, 24), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 37, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_128_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 39, 36), )


    sgtin = property(__sgtin.value, __sgtin.set, None, None)


    # Element sold_part uses Python identifier sold_part
    __sold_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sold_part'), 'sold_part', '__AbsentNamespace0_CTD_ANON_128_sold_part', False, pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 40, 36), )


    sold_part = property(__sold_part.value, __sold_part.set, None, '\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sold_part.name() : __sold_part
    })
    _AttributeMap.update({

    })



# Complex type move_destruction with content type ELEMENT_ONLY
class move_destruction (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о передаче лекарственных препаратов на уничтожение"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_destruction')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_destruction_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_destruction_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element destruction_org uses Python identifier destruction_org
    __destruction_org = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destruction_org'), 'destruction_org', '__AbsentNamespace0_move_destruction_destruction_org', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 21, 3), )


    destruction_org = property(__destruction_org.value, __destruction_org.set, None, '\u0418\u041d\u041d/\u041a\u041f\u041f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_destruction_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_destruction_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element act_number uses Python identifier act_number
    __act_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'act_number'), 'act_number', '__AbsentNamespace0_move_destruction_act_number', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 36, 3), )


    act_number = property(__act_number.value, __act_number.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element act_date uses Python identifier act_date
    __act_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'act_date'), 'act_date', '__AbsentNamespace0_move_destruction_act_date', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 41, 3), )


    act_date = property(__act_date.value, __act_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_destruction_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 46, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_destruction_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='541', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 97, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 97, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __destruction_org.name() : __destruction_org,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __act_number.name() : __act_number,
        __act_date.name() : __act_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_destruction', move_destruction)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 50, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_129_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 52, 6), )


    detail = property(__detail.value, __detail.set, None, None)

    _ElementMap.update({
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 53, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_130_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 56, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_130_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 61, 10), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element decision uses Python identifier decision
    __decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'decision'), 'decision', '__AbsentNamespace0_CTD_ANON_130_decision', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 67, 9), )


    decision = property(__decision.value, __decision.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0420\u043e\u0441\u0437\u0434\u0440\u0430\u0432\u043d\u0430\u0434\u0437\u043e\u0440\u0430 \u043e \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430. \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0420\u043e\u0441\u0437\u0434\u0440\u0430\u0432\u043d\u0430\u0434\u0437\u043e\u0440\u0430.')


    # Element destruction_type uses Python identifier destruction_type
    __destruction_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destruction_type'), 'destruction_type', '__AbsentNamespace0_CTD_ANON_130_destruction_type', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 72, 9), )


    destruction_type = property(__destruction_type.value, __destruction_type.set, None, '\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435')


    # Element reason_for_destruction uses Python identifier reason_for_destruction
    __reason_for_destruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason_for_destruction'), 'reason_for_destruction', '__AbsentNamespace0_CTD_ANON_130_reason_for_destruction', False, pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 77, 9), )


    reason_for_destruction = property(__reason_for_destruction.value, __reason_for_destruction.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc,
        __decision.name() : __decision,
        __destruction_type.name() : __destruction_type,
        __reason_for_destruction.name() : __reason_for_destruction
    })
    _AttributeMap.update({

    })



# Complex type destruction with content type ELEMENT_ONLY
class destruction (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о факте уничтожения лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'destruction')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_destruction_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_destruction_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element destruction_method uses Python identifier destruction_method
    __destruction_method = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destruction_method'), 'destruction_method', '__AbsentNamespace0_destruction_destruction_method', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 20, 12), )


    destruction_method = property(__destruction_method.value, __destruction_method.set, None, '\u0421\u043f\u043e\u0441\u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f')


    # Element destruction_org uses Python identifier destruction_org
    __destruction_org = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destruction_org'), 'destruction_org', '__AbsentNamespace0_destruction_destruction_org', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 25, 12), )


    destruction_org = property(__destruction_org.value, __destruction_org.set, None, '\u0418\u041d\u041d/\u041a\u041f\u041f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_destruction_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 49, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_destruction_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 54, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_destruction_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 59, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_destruction_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='542', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 87, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 87, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __destruction_method.name() : __destruction_method,
        __destruction_org.name() : __destruction_org,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'destruction', destruction)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """ИНН/КПП организации, осуществляющей уничтожение"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 29, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ul'), 'ul', '__AbsentNamespace0_CTD_ANON_131_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 31, 24), )


    ul = property(__ul.value, __ul.set, None, None)


    # Element fl uses Python identifier fl
    __fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fl'), 'fl', '__AbsentNamespace0_CTD_ANON_131_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 39, 24), )


    fl = property(__fl.value, __fl.set, None, None)

    _ElementMap.update({
        __ul.name() : __ul,
        __fl.name() : __fl
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 32, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_132_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 34, 36), )


    inn = property(__inn.value, __inn.set, None, None)


    # Element kpp uses Python identifier kpp
    __kpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kpp'), 'kpp', '__AbsentNamespace0_CTD_ANON_132_kpp', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 35, 36), )


    kpp = property(__kpp.value, __kpp.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn,
        __kpp.name() : __kpp
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 40, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_133_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 42, 36), )


    inn = property(__inn.value, __inn.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 63, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_134_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 65, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_134_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 70, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type withdrawal with content type ELEMENT_ONLY
class withdrawal (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о выводе из оборота лекарственных препаратов по различным причинам"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'withdrawal')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_withdrawal_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_withdrawal_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_withdrawal_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 21, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_withdrawal_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element withdrawal_type uses Python identifier withdrawal_type
    __withdrawal_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'withdrawal_type'), 'withdrawal_type', '__AbsentNamespace0_withdrawal_withdrawal_type', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 31, 3), )


    withdrawal_type = property(__withdrawal_type.value, __withdrawal_type.set, None, '\u0422\u0438\u043f \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_withdrawal_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_withdrawal_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='552', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __withdrawal_type.name() : __withdrawal_type,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'withdrawal', withdrawal)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_135_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_135_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_order_notification with content type ELEMENT_ONLY
class move_order_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление получателя об отгрузке лекарственных препаратов со склада отправителя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_order_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_order_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_order_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_order_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_order_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_order_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element turnover_type uses Python identifier turnover_type
    __turnover_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'turnover_type'), 'turnover_type', '__AbsentNamespace0_move_order_notification_turnover_type', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 36, 3), )


    turnover_type = property(__turnover_type.value, __turnover_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_move_order_notification_source', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 41, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_move_order_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 46, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_move_order_notification_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 51, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_order_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 56, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_order_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='601', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 140, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 140, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __turnover_type.name() : __turnover_type,
        __source.name() : __source,
        __contract_type.name() : __contract_type,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_order_notification', move_order_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 60, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_136_union', True, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 62, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 63, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_137_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 66, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_137_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 71, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_137_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 115, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_137_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 120, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 75, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_138_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 77, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_138_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 82, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_139_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 88, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_139_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 93, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_139_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 98, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_139_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 103, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type receive_order_notification with content type ELEMENT_ONLY
class receive_order_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление отправителя о приемке лекарственных препаратов на склад получателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_order_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_order_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_receive_order_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 16, 3), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_order_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_receive_order_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 26, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_receive_order_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 31, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element receive_type uses Python identifier receive_type
    __receive_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_type'), 'receive_type', '__AbsentNamespace0_receive_order_notification_receive_type', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 36, 3), )


    receive_type = property(__receive_type.value, __receive_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_receive_order_notification_source', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 41, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_receive_order_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 46, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_receive_order_notification_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 51, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_order_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 56, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_order_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='602', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 140, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 140, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_id.name() : __shipper_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __receive_type.name() : __receive_type,
        __source.name() : __source,
        __contract_type.name() : __contract_type,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_order_notification', receive_order_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 60, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_140_union', True, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 62, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 63, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_141_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 66, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_141_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 71, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_141_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 115, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_141_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 120, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 75, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_142_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 77, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_142_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 82, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_143 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_143_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 88, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_143_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 93, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_143_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 98, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_143_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 103, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type move_owner_notification with content type ELEMENT_ONLY
class move_owner_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление собственника об отгрузке лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_owner_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_owner_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_move_owner_notification_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 15, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_owner_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_owner_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 25, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_owner_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_owner_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_owner_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='603', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_owner_notification', move_owner_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_144 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_144_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_144_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type refusal_sender_notification with content type ELEMENT_ONLY
class refusal_sender_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление получателя об отзыве отправителем переданных лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'refusal_sender_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_refusal_sender_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_refusal_sender_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_refusal_sender_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 20, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 - \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason'), 'reason', '__AbsentNamespace0_refusal_sender_notification_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 25, 12), )


    reason = property(__reason.value, __reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_refusal_sender_notification_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 30, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_refusal_sender_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_refusal_sender_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='605', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __receiver_id.name() : __receiver_id,
        __reason.name() : __reason,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'refusal_sender_notification', refusal_sender_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_145 (pyxb.binding.basis.complexTypeDefinition):
    """Список отзываемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_145_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_145_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type refusal_receiver_notification with content type ELEMENT_ONLY
class refusal_receiver_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление отправителя об отказе получателя от приемки лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'refusal_receiver_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_refusal_receiver_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_refusal_receiver_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_refusal_receiver_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 20, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reason'), 'reason', '__AbsentNamespace0_refusal_receiver_notification_reason', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 25, 12), )


    reason = property(__reason.value, __reason.set, None, '\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043a\u0430\u0437\u0430')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_refusal_receiver_notification_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 30, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u0432 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_refusal_receiver_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_refusal_receiver_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='606', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __shipper_id.name() : __shipper_id,
        __reason.name() : __reason,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'refusal_receiver_notification', refusal_receiver_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_146 (pyxb.binding.basis.complexTypeDefinition):
    """Список не принятой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_146_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_146_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type accept_notification with content type ELEMENT_ONLY
class accept_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о подтверждении (акцептовании) сведений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accept_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_accept_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_accept_notification_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 15, 12), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_accept_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_accept_notification_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 25, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_accept_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 30, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_accept_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='607', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 58, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 58, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'accept_notification', accept_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_147 (pyxb.binding.basis.complexTypeDefinition):
    """Список подтверждаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 34, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_147_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 36, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_147_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 41, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type change_owner_notification with content type ELEMENT_ONLY
class change_owner_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление нового собственника о смене собственника лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'change_owner_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_change_owner_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_change_owner_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 15, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_change_owner_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_change_owner_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_change_owner_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_change_owner_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_change_owner_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='609', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'change_owner_notification', change_owner_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_148 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_148_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_148_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type move_return_notification with content type ELEMENT_ONLY
class move_return_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление получателя о возврате приостановленных лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_return_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_return_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 10, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_move_return_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 15, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_return_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 20, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_return_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 25, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_return_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 30, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_return_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 35, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_return_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='610', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 63, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 63, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_return_notification', move_return_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_149 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 39, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_149_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 41, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_149_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 46, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type receive_unregistered_notification with content type ELEMENT_ONLY
class receive_unregistered_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление отправителя о регистрации получателя в ИС МДЛП и приемке на склад лекарственных препаратов, ранее отгруженных на незарегистрированное место деятельности"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_unregistered_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_unregistered_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_receive_unregistered_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 15, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_unregistered_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_receive_unregistered_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_receive_unregistered_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_unregistered_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_unregistered_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='611', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_id.name() : __shipper_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_unregistered_notification', receive_unregistered_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_150 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_150_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_150_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type state_dispatch_notification with content type ELEMENT_ONLY
class state_dispatch_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление Получателя об отгрузке лекарственных препаратов со склада Отправителя в рамках смены владельца лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'state_dispatch_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_state_dispatch_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_state_dispatch_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 15, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_state_dispatch_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_state_dispatch_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 25, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_state_dispatch_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 30, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_state_dispatch_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_state_dispatch_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='612', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'state_dispatch_notification', state_dispatch_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_151 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_151_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_151_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type foreign_shipment_notification with content type ELEMENT_ONLY
class foreign_shipment_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление об отгрузке лекарственных препаратов в Российскую Федерацию"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_shipment_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_shipment_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_foreign_shipment_notification_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 15, 12), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_foreign_shipment_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 20, 12), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_foreign_shipment_notification_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 25, 12), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_shipment_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 30, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_foreign_shipment_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 35, 12), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_foreign_shipment_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 48, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_foreign_shipment_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 53, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_foreign_shipment_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 58, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_shipment_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='613', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 86, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 86, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_shipment_notification', foreign_shipment_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_152 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 62, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_152_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 64, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_152_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 69, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type foreign_import_notification with content type ELEMENT_ONLY
class foreign_import_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о ввозе лекарственных препаратов в Российскую Федерацию"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'foreign_import_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_foreign_import_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_foreign_import_notification_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 15, 12), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_foreign_import_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 20, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_foreign_import_notification_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 25, 12), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_foreign_import_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 30, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_foreign_import_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 35, 12), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_foreign_import_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 48, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_foreign_import_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 53, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_foreign_import_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 58, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_foreign_import_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='614', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 86, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 86, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __shipper_id.name() : __shipper_id,
        __custom_receiver_id.name() : __custom_receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'foreign_import_notification', foreign_import_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_153 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 62, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_153_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 64, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_153_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 69, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type eeu_shipment_notification with content type ELEMENT_ONLY
class eeu_shipment_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление об отгрузке лекарственных препаратов в Российскую Федерацию из стран ЕАЭС"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_shipment_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_shipment_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_eeu_shipment_notification_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_eeu_shipment_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 21, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_shipment_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_eeu_shipment_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_eeu_shipment_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_eeu_shipment_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_shipment_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_shipment_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='615', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 138, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 138, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_shipment_notification', eeu_shipment_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_154 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_154_union', True, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 60, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_155 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 61, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_155_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 64, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_155_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 69, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_155_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 113, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_155_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 118, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_156 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 73, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_156_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 75, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_156_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 80, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_157 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 84, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_157_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 86, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_157_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 91, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_157_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 96, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_157_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 101, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type eeu_import_notification with content type ELEMENT_ONLY
class eeu_import_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о ввозе из ЕАЭС и приемке лекарственных препаратов на склад покупателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eeu_import_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_eeu_import_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_eeu_import_notification_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_eeu_import_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_eeu_import_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 26, 3), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_eeu_import_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_eeu_import_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_eeu_import_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_eeu_import_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_eeu_import_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='616', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 138, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 138, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __operation_date.name() : __operation_date,
        __shipper_id.name() : __shipper_id,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'eeu_import_notification', eeu_import_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_158 (pyxb.binding.basis.complexTypeDefinition):
    """Список принимаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_158_union', True, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 60, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_159 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 61, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_159_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 64, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_159_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 69, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_159_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 113, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_159_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 118, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_160 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 73, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_160_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 75, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_160_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 80, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_161 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 84, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_161_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 86, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_161_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 91, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_161_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 96, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_161_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 101, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type receive_order_errors_notification with content type ELEMENT_ONLY
class receive_order_errors_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление отправителя об ошибках при приемке лекарственных препаратов на склад получателя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'receive_order_errors_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_receive_order_errors_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 9, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element shipper_id uses Python identifier shipper_id
    __shipper_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_id'), 'shipper_id', '__AbsentNamespace0_receive_order_errors_notification_shipper_id', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 14, 12), )


    shipper_id = property(__shipper_id.value, __shipper_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_receive_order_errors_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 19, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_receive_order_errors_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 24, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a\xa0\u043f\u0440\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_receive_order_errors_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='617', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 58, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 58, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_id.name() : __shipper_id,
        __operation_date.name() : __operation_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'receive_order_errors_notification', receive_order_errors_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_162 (pyxb.binding.basis.complexTypeDefinition):
    """Список ошибок при приемке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 28, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element errors uses Python identifier errors
    __errors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'errors'), 'errors', '__AbsentNamespace0_CTD_ANON_162_errors', True, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 30, 24), )


    errors = property(__errors.value, __errors.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a')

    _ElementMap.update({
        __errors.name() : __errors
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_163 (pyxb.binding.basis.complexTypeDefinition):
    """Список ошибок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 34, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element error_code uses Python identifier error_code
    __error_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_code'), 'error_code', '__AbsentNamespace0_CTD_ANON_163_error_code', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 36, 36), )


    error_code = property(__error_code.value, __error_code.set, None, '\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element error_desc uses Python identifier error_desc
    __error_desc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error_desc'), 'error_desc', '__AbsentNamespace0_CTD_ANON_163_error_desc', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 41, 36), )


    error_desc = property(__error_desc.value, __error_desc.set, None, '\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438')


    # Element object_id uses Python identifier object_id
    __object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object_id'), 'object_id', '__AbsentNamespace0_CTD_ANON_163_object_id', False, pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 46, 36), )


    object_id = property(__object_id.value, __object_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438')

    _ElementMap.update({
        __error_code.name() : __error_code,
        __error_desc.name() : __error_desc,
        __object_id.name() : __object_id
    })
    _AttributeMap.update({

    })



# Complex type move_to_release_notification with content type ELEMENT_ONLY
class move_to_release_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление собственника об отгрузке лекарственных препаратов для выпуска готовой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'move_to_release_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_move_to_release_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_move_to_release_notification_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 15, 12), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_move_to_release_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_move_to_release_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 25, 12), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_move_to_release_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 30, 12), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_move_to_release_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 35, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_move_to_release_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='618', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 63, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 63, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'move_to_release_notification', move_to_release_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_164 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_164_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 41, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_164_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 46, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type agent_dispatch_notification with content type ELEMENT_ONLY
class agent_dispatch_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление получателя об отгрузке лекарственных препаратов со склада отправителя в рамках агентского договора"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'agent_dispatch_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_agent_dispatch_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_agent_dispatch_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_agent_dispatch_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element turnover_type uses Python identifier turnover_type
    __turnover_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'turnover_type'), 'turnover_type', '__AbsentNamespace0_agent_dispatch_notification_turnover_type', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 26, 3), )


    turnover_type = property(__turnover_type.value, __turnover_type.set, None, '\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_agent_dispatch_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_agent_dispatch_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 36, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_agent_dispatch_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_agent_dispatch_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='619', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __turnover_type.name() : __turnover_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'agent_dispatch_notification', agent_dispatch_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_165 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_165_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_165_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 52, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type import_info_notification with content type ELEMENT_ONLY
class import_info_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление импортера о регистрации в ИС МДЛП сведений об условиях ввоза ЛП держателем РУ (или его представительством)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'import_info_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_import_info_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element seller_id uses Python identifier seller_id
    __seller_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'seller_id'), 'seller_id', '__AbsentNamespace0_import_info_notification_seller_id', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 16, 3), )


    seller_id = property(__seller_id.value, __seller_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_import_info_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 21, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_import_info_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_import_info_notification_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 31, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_import_info_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 44, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_import_info_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 49, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_import_info_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 54, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_import_info_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='620', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 82, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 82, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __seller_id.name() : __seller_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __contract_type.name() : __contract_type,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'import_info_notification', import_info_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_166 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_166_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 60, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_166_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 65, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type arbitration_notification with content type ELEMENT_ONLY
class arbitration_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о регистрации в ИС МДЛП сведений о постановке в арбитраж/снятие арбитража"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'arbitration_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_arbitration_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_arbitration_notification_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 16, 3), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_arbitration_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_arbitration_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_arbitration_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440')


    # Element sign_arbitration uses Python identifier sign_arbitration
    __sign_arbitration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sign_arbitration'), 'sign_arbitration', '__AbsentNamespace0_arbitration_notification_sign_arbitration', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 36, 3), )


    sign_arbitration = property(__sign_arbitration.value, __sign_arbitration.set, None, '\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_arbitration_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 41, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_arbitration_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='621', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __sign_arbitration.name() : __sign_arbitration,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'arbitration_notification', arbitration_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_167 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_167_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 47, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_167_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 52, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type return_contract_production_notification with content type ELEMENT_ONLY
class return_contract_production_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о регистрации в ИС МДЛП сведений о возврате лекарственных препаратов контрактному производителю"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'return_contract_production_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_return_contract_production_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receiver_id uses Python identifier receiver_id
    __receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receiver_id'), 'receiver_id', '__AbsentNamespace0_return_contract_production_notification_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 16, 3), )


    receiver_id = property(__receiver_id.value, __receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_return_contract_production_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_return_contract_production_notification_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 26, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_return_contract_production_notification_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_return_contract_production_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_return_contract_production_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='622', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __receiver_id.name() : __receiver_id,
        __operation_date.name() : __operation_date,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'return_contract_production_notification', return_contract_production_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_168 (pyxb.binding.basis.complexTypeDefinition):
    """Список передаваемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_168_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_168_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type change_property_notification with content type ELEMENT_ONLY
class change_property_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление о регистрация в ИС МДЛП сведений о корректировке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'change_property_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_change_property_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_change_property_notification_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 16, 3), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_change_property_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 21, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element action_id_type uses Python identifier action_id_type
    __action_id_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'action_id_type'), 'action_id_type', '__AbsentNamespace0_change_property_notification_action_id_type', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 26, 3), )


    action_id_type = property(__action_id_type.value, __action_id_type.set, None, '\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ')


    # Element operation_id uses Python identifier operation_id
    __operation_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_id'), 'operation_id', '__AbsentNamespace0_change_property_notification_operation_id', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 31, 3), )


    operation_id = property(__operation_id.value, __operation_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__AbsentNamespace0_change_property_notification_details', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 36, 3), )


    details = property(__details.value, __details.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_change_property_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='623', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 154, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 154, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __action_id_type.name() : __action_id_type,
        __operation_id.name() : __operation_id,
        __details.name() : __details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'change_property_notification', change_property_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_169 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения подлежащие корректировке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_CTD_ANON_169_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 42, 6), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_CTD_ANON_169_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 47, 6), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_CTD_ANON_169_source', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 52, 6), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_CTD_ANON_169_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 57, 6), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_CTD_ANON_169_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 62, 6), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_CTD_ANON_169_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 67, 6), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')

    _ElementMap.update({
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __source.name() : __source,
        __contract_num.name() : __contract_num,
        __contract_type.name() : __contract_type,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_170 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 71, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_170_union', True, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 73, 9), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_171 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 74, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_171_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 77, 13), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_171_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 82, 13), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_171_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 126, 12), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_171_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 131, 12), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_172 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_172_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 88, 16), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_172_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 93, 16), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_173 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 97, 17)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_173_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 99, 19), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_173_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 104, 19), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_173_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 109, 19), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_173_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 114, 19), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type posting_notification with content type ELEMENT_ONLY
class posting_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление владельца о регистрация в ИС МДЛП сведений об оприходовании"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posting_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_posting_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_posting_notification_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 16, 3), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d  \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element organisation_name uses Python identifier organisation_name
    __organisation_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'organisation_name'), 'organisation_name', '__AbsentNamespace0_posting_notification_organisation_name', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 21, 3), )


    organisation_name = property(__organisation_name.value, __organisation_name.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 -\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_posting_notification_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 26, 3), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_posting_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 31, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_posting_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_posting_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='627', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __inn.name() : __inn,
        __organisation_name.name() : __organisation_name,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'posting_notification', posting_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_174 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_174_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_174_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type posting_import_notification with content type ELEMENT_ONLY
class posting_import_notification (pyxb.binding.basis.complexTypeDefinition):
    """Уведомление владельца о регистрация в ИС МДЛП сведений об оприходовании (импорт)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posting_import_notification')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_posting_import_notification_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_posting_import_notification_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 16, 3), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d/\u0418\u0422\u0418\u041d  \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element organisation_name uses Python identifier organisation_name
    __organisation_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'organisation_name'), 'organisation_name', '__AbsentNamespace0_posting_import_notification_organisation_name', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 21, 3), )


    organisation_name = property(__organisation_name.value, __organisation_name.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 -\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element owner_id uses Python identifier owner_id
    __owner_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'owner_id'), 'owner_id', '__AbsentNamespace0_posting_import_notification_owner_id', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 26, 3), )


    owner_id = property(__owner_id.value, __owner_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_posting_import_notification_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 31, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_posting_import_notification_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 36, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_posting_import_notification_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='628', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 64, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 64, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __inn.name() : __inn,
        __organisation_name.name() : __organisation_name,
        __owner_id.name() : __owner_id,
        __operation_date.name() : __operation_date,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'posting_import_notification', posting_import_notification)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_175 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_175_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 42, 6), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_175_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 47, 6), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type accept with content type ELEMENT_ONLY
class accept (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП подтверждения (акцептования) сведений"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accept')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_accept_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element counterparty_id uses Python identifier counterparty_id
    __counterparty_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'counterparty_id'), 'counterparty_id', '__AbsentNamespace0_accept_counterparty_id', False, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 15, 12), )


    counterparty_id = property(__counterparty_id.value, __counterparty_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_accept_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element confirm_paused uses Python identifier confirm_paused
    __confirm_paused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_paused'), 'confirm_paused', '__AbsentNamespace0_accept_confirm_paused', False, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 25, 12), )


    confirm_paused = property(__confirm_paused.value, __confirm_paused.set, None, '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_accept_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 30, 12), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_accept_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='701', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 58, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 58, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __counterparty_id.name() : __counterparty_id,
        __operation_date.name() : __operation_date,
        __confirm_paused.name() : __confirm_paused,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'accept', accept)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_176 (pyxb.binding.basis.complexTypeDefinition):
    """Список подтверждаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 34, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_176_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 36, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_176_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 41, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type posting with content type ELEMENT_ONLY
class posting (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об оприходовании"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posting')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_posting_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 10, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element shipper_info uses Python identifier shipper_info
    __shipper_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shipper_info'), 'shipper_info', '__AbsentNamespace0_posting_shipper_info', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 15, 3), )


    shipper_info = property(__shipper_info.value, __shipper_info.set, None, '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_posting_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 26, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_posting_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 31, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_posting_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 36, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_posting_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 41, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_posting_source', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 46, 3), )


    source = property(__source.value, __source.set, None, '\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element contract_num uses Python identifier contract_num
    __contract_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_num'), 'contract_num', '__AbsentNamespace0_posting_contract_num', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 51, 3), )


    contract_num = property(__contract_num.value, __contract_num.set, None, '\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_posting_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 56, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_posting_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='702', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 136, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 136, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __shipper_info.name() : __shipper_info,
        __operation_date.name() : __operation_date,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __contract_type.name() : __contract_type,
        __source.name() : __source,
        __contract_num.name() : __contract_num,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'posting', posting)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_177 (pyxb.binding.basis.complexTypeDefinition):
    """Информация об организации-грузоотправителя"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 19, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_177_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 21, 6), )


    inn = property(__inn.value, __inn.set, None, None)


    # Element kpp uses Python identifier kpp
    __kpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kpp'), 'kpp', '__AbsentNamespace0_CTD_ANON_177_kpp', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 22, 6), )


    kpp = property(__kpp.value, __kpp.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn,
        __kpp.name() : __kpp
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_178 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 60, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_178_union', True, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 62, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_179 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 63, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_179_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 66, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_179_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 71, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_179_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 115, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_179_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 120, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_180 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 75, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_180_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 77, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_180_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 82, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_181 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 86, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_181_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 88, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_181_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 93, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_181_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 98, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_181_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 103, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type posting_import with content type ELEMENT_ONLY
class posting_import (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об оприходовании (импорт)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posting_import')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_posting_import_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 10, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_posting_import_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 15, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element custom_receiver_id uses Python identifier custom_receiver_id
    __custom_receiver_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), 'custom_receiver_id', '__AbsentNamespace0_posting_import_custom_receiver_id', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 20, 3), )


    custom_receiver_id = property(__custom_receiver_id.value, __custom_receiver_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_posting_import_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 25, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_posting_import_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 30, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430')


    # Element contract_type uses Python identifier contract_type
    __contract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contract_type'), 'contract_type', '__AbsentNamespace0_posting_import_contract_type', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 35, 3), )


    contract_type = property(__contract_type.value, __contract_type.set, None, '\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element order_details uses Python identifier order_details
    __order_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order_details'), 'order_details', '__AbsentNamespace0_posting_import_order_details', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 40, 3), )


    order_details = property(__order_details.value, __order_details.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_posting_import_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='703', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 120, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 120, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __custom_receiver_id.name() : __custom_receiver_id,
        __doc_num.name() : __doc_num,
        __doc_date.name() : __doc_date,
        __contract_type.name() : __contract_type,
        __order_details.name() : __order_details
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'posting_import', posting_import)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_182 (pyxb.binding.basis.complexTypeDefinition):
    """Список отгружаемой продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 44, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element union uses Python identifier union
    __union = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'union'), 'union', '__AbsentNamespace0_CTD_ANON_182_union', True, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 46, 6), )


    union = property(__union.value, __union.set, None, None)

    _ElementMap.update({
        __union.name() : __union
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_183 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 47, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_183_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 50, 10), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 SGTIN')


    # Element sscc_detail uses Python identifier sscc_detail
    __sscc_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc_detail'), 'sscc_detail', '__AbsentNamespace0_CTD_ANON_183_sscc_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 55, 10), )


    sscc_detail = property(__sscc_detail.value, __sscc_detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_183_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 99, 9), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_183_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 104, 9), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc_detail.name() : __sscc_detail,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_184 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о транспортной упаковке"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 59, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_184_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 61, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_184_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 66, 13), )


    detail = property(__detail.value, __detail.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sscc.name() : __sscc,
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_185 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о цене содержимого транспортной упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 70, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element gtin uses Python identifier gtin
    __gtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtin'), 'gtin', '__AbsentNamespace0_CTD_ANON_185_gtin', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 72, 16), )


    gtin = property(__gtin.value, __gtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)')


    # Element series_number uses Python identifier series_number
    __series_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series_number'), 'series_number', '__AbsentNamespace0_CTD_ANON_185_series_number', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 77, 16), )


    series_number = property(__series_number.value, __series_number.set, None, '\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438')


    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__AbsentNamespace0_CTD_ANON_185_cost', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 82, 16), )


    cost = property(__cost.value, __cost.set, None, '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)')


    # Element vat_value uses Python identifier vat_value
    __vat_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vat_value'), 'vat_value', '__AbsentNamespace0_CTD_ANON_185_vat_value', False, pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 87, 16), )


    vat_value = property(__vat_value.value, __vat_value.set, None, 'C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431')

    _ElementMap.update({
        __gtin.name() : __gtin,
        __series_number.name() : __series_number,
        __cost.name() : __cost,
        __vat_value.name() : __vat_value
    })
    _AttributeMap.update({

    })



# Complex type relabeling with content type ELEMENT_ONLY
class relabeling (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о переупаковке и перемаркировке лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'relabeling')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_relabeling_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 9, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_relabeling_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 14, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element relabeling_detail uses Python identifier relabeling_detail
    __relabeling_detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relabeling_detail'), 'relabeling_detail', '__AbsentNamespace0_relabeling_relabeling_detail', False, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 19, 12), )


    relabeling_detail = property(__relabeling_detail.value, __relabeling_detail.set, None, '\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_relabeling_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='811', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 53, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 53, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __relabeling_detail.name() : __relabeling_detail
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'relabeling', relabeling)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_186 (pyxb.binding.basis.complexTypeDefinition):
    """Список продукции"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 23, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_186_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 25, 24), )


    detail = property(__detail.value, __detail.set, None, None)

    _ElementMap.update({
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_187 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 26, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element new_sgtin uses Python identifier new_sgtin
    __new_sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'new_sgtin'), 'new_sgtin', '__AbsentNamespace0_CTD_ANON_187_new_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 28, 36), )


    new_sgtin = property(__new_sgtin.value, __new_sgtin.set, None, 'SGTIN \u043d\u043e\u0432\u043e\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element old_sgtin uses Python identifier old_sgtin
    __old_sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'old_sgtin'), 'old_sgtin', '__AbsentNamespace0_CTD_ANON_187_old_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 33, 36), )


    old_sgtin = property(__old_sgtin.value, __old_sgtin.set, None, 'SGTIN \u0441\u0442\u0430\u0440\u043e\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __new_sgtin.name() : __new_sgtin,
        __old_sgtin.name() : __old_sgtin
    })
    _AttributeMap.update({

    })



# Complex type unit_pack with content type ELEMENT_ONLY
class unit_pack (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об агрегировании упаковок лекарственных препаратов в третичную (заводскую, транспортную) упаковку"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unit_pack')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_unit_pack_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_unit_pack_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 15, 12), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_unit_pack_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 20, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_unit_pack_content', False, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 25, 12), )


    content_ = property(__content.value, __content.set, None, '\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_unit_pack_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='911', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 53, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 53, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __sscc.name() : __sscc,
        __operation_date.name() : __operation_date,
        __content.name() : __content
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'unit_pack', unit_pack)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_188 (pyxb.binding.basis.complexTypeDefinition):
    """Содержимое упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 29, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_188_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 31, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_188_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 36, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type unit_unpack with content type ELEMENT_ONLY
class unit_unpack (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о расформировании третичной (заводской, транспортной) упаковки лекарственных препаратов"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unit_unpack')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_unit_unpack_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_unit_unpack_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_unit_unpack_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 21, 3), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element is_recursive uses Python identifier is_recursive
    __is_recursive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'is_recursive'), 'is_recursive', '__AbsentNamespace0_unit_unpack_is_recursive', False, pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 31, 3), )


    is_recursive = property(__is_recursive.value, __is_recursive.set, None, '\u0422\u0438\u043f \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0434\u0438\u043d \u0443\u0440\u043e\u0432\u0435\u043d\u044c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e). \u041f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0434\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_unit_unpack_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='912', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 37, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 37, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __sscc.name() : __sscc,
        __is_recursive.name() : __is_recursive
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'unit_unpack', unit_unpack)


# Complex type unit_extract with content type ELEMENT_ONLY
class unit_extract (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об изъятии упаковок лекарственных препаратов из третичной (заводской, транспортной) упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unit_extract')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_unit_extract_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_unit_extract_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0438\u0437\u044a\u044f\u0442\u0438\u044f')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_unit_extract_content', False, pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 20, 12), )


    content_ = property(__content.value, __content.set, None, '\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_unit_extract_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='913', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 48, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 48, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __content.name() : __content
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'unit_extract', unit_extract)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_189 (pyxb.binding.basis.complexTypeDefinition):
    """Содержимое упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 24, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_189_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 26, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_189_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 31, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type unit_append with content type ELEMENT_ONLY
class unit_append (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о дополнительном вложении упаковок в третичную (заводскую, транспортную) упаковку"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unit_append')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_unit_append_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 10, 12), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_unit_append_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 15, 12), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_unit_append_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 20, 12), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_unit_append_content', False, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 25, 12), )


    content_ = property(__content.value, __content.set, None, '\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_unit_append_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='914', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 53, 8)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 53, 8)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __sscc.name() : __sscc,
        __content.name() : __content
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'unit_append', unit_append)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_190 (pyxb.binding.basis.complexTypeDefinition):
    """Содержимое упаковки"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 29, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_190_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 31, 24), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_190_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 36, 24), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type multi_pack with content type ELEMENT_ONLY
class multi_pack (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений об агрегировании во множество третичных (заводских, транспортных) упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'multi_pack')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_multi_pack_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_multi_pack_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element by_sgtin uses Python identifier by_sgtin
    __by_sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'by_sgtin'), 'by_sgtin', '__AbsentNamespace0_multi_pack_by_sgtin', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 22, 4), )


    by_sgtin = property(__by_sgtin.value, __by_sgtin.set, None, '\u0412\u043b\u043e\u0436\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e SGTIN')


    # Element by_sscc uses Python identifier by_sscc
    __by_sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'by_sscc'), 'by_sscc', '__AbsentNamespace0_multi_pack_by_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 64, 4), )


    by_sscc = property(__by_sscc.value, __by_sscc.set, None, '\u0412\u043b\u043e\u0436\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e SSCC')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_multi_pack_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='915', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 104, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 104, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __by_sgtin.name() : __by_sgtin,
        __by_sscc.name() : __by_sscc
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'multi_pack', multi_pack)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_191 (pyxb.binding.basis.complexTypeDefinition):
    """Вложены только SGTIN"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 26, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_191_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 28, 7), )


    detail = property(__detail.value, __detail.set, None, '\u0414\u0430\u043d\u043d\u044b\u0435')

    _ElementMap.update({
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_192 (pyxb.binding.basis.complexTypeDefinition):
    """Данные"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 32, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_192_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 34, 10), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_CTD_ANON_192_content', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 39, 10), )


    content_ = property(__content.value, __content.set, None, None)

    _ElementMap.update({
        __sscc.name() : __sscc,
        __content.name() : __content
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_193 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 40, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_193_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 42, 13), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b SGTIN')

    _ElementMap.update({
        __sgtin.name() : __sgtin
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_194 (pyxb.binding.basis.complexTypeDefinition):
    """Вложены только SSCC"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 68, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_194_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 70, 7), )


    detail = property(__detail.value, __detail.set, None, '\u0414\u0430\u043d\u043d\u044b\u0435')

    _ElementMap.update({
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_195 (pyxb.binding.basis.complexTypeDefinition):
    """Данные"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 74, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_195_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 76, 10), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_CTD_ANON_195_content', False, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 81, 10), )


    content_ = property(__content.value, __content.set, None, None)

    _ElementMap.update({
        __sscc.name() : __sscc,
        __content.name() : __content
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_196 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 82, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_196_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 84, 13), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b SSCC')

    _ElementMap.update({
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type multi_unit_append with content type ELEMENT_ONLY
class multi_unit_append (pyxb.binding.basis.complexTypeDefinition):
    """Регистрация в ИС МДЛП сведений о дополнительном вложении во множество третичных (заводских, транспортных) упаковок"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'multi_unit_append')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 6, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element subject_id uses Python identifier subject_id
    __subject_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subject_id'), 'subject_id', '__AbsentNamespace0_multi_unit_append_subject_id', False, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 11, 3), )


    subject_id = property(__subject_id.value, __subject_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element operation_date uses Python identifier operation_date
    __operation_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operation_date'), 'operation_date', '__AbsentNamespace0_multi_unit_append_operation_date', False, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 16, 3), )


    operation_date = property(__operation_date.value, __operation_date.set, None, '\u0414\u0430\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f')


    # Element info_append uses Python identifier info_append
    __info_append = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info_append'), 'info_append', '__AbsentNamespace0_multi_unit_append_info_append', False, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 21, 3), )


    info_append = property(__info_append.value, __info_append.set, None, '\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438')


    # Attribute action_id uses Python identifier action_id
    __action_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'action_id'), 'action_id', '__AbsentNamespace0_multi_unit_append_action_id', pyxb.binding.datatypes.int, fixed=True, unicode_default='916', required=True)
    __action_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 69, 2)
    __action_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 69, 2)

    action_id = property(__action_id.value, __action_id.set, None, None)

    _ElementMap.update({
        __subject_id.name() : __subject_id,
        __operation_date.name() : __operation_date,
        __info_append.name() : __info_append
    })
    _AttributeMap.update({
        __action_id.name() : __action_id
    })
Namespace.addCategoryObject('typeBinding', 'multi_unit_append', multi_unit_append)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_197 (pyxb.binding.basis.complexTypeDefinition):
    """Сведения о дополнительном вложении"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element detail uses Python identifier detail
    __detail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detail'), 'detail', '__AbsentNamespace0_CTD_ANON_197_detail', True, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 27, 6), )


    detail = property(__detail.value, __detail.set, None, '\u0414\u0430\u043d\u043d\u044b\u0435')

    _ElementMap.update({
        __detail.name() : __detail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_198 (pyxb.binding.basis.complexTypeDefinition):
    """Данные"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 31, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_198_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 33, 9), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')


    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__AbsentNamespace0_CTD_ANON_198_content', False, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 38, 9), )


    content_ = property(__content.value, __content.set, None, None)

    _ElementMap.update({
        __sscc.name() : __sscc,
        __content.name() : __content
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_199 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 39, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_CTD_ANON_199_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 41, 12), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_CTD_ANON_199_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 46, 12), )


    sscc = property(__sscc.value, __sscc.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })



# Complex type short_org_info_type with content type ELEMENT_ONLY
class short_org_info_type (pyxb.binding.basis.complexTypeDefinition):
    """Описание организации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'short_org_info_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 5, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element organisation_name uses Python identifier organisation_name
    __organisation_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'organisation_name'), 'organisation_name', '__AbsentNamespace0_short_org_info_type_organisation_name', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 10, 3), )


    organisation_name = property(__organisation_name.value, __organisation_name.set, None, '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 / \u0418\u041f')


    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ul'), 'ul', '__AbsentNamespace0_short_org_info_type_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 16, 4), )


    ul = property(__ul.value, __ul.set, None, '\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f - \u044e\u0440. \u043b\u0438\u0446\u043e')


    # Element fl uses Python identifier fl
    __fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fl'), 'fl', '__AbsentNamespace0_short_org_info_type_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 35, 4), )


    fl = property(__fl.value, __fl.set, None, '\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f - \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e')

    _ElementMap.update({
        __organisation_name.name() : __organisation_name,
        __ul.name() : __ul,
        __fl.name() : __fl
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'short_org_info_type', short_org_info_type)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_200 (pyxb.binding.basis.complexTypeDefinition):
    """Организация - юр. лицо"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 20, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_200_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 22, 7), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d \u042e\u041b')


    # Element kpp uses Python identifier kpp
    __kpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kpp'), 'kpp', '__AbsentNamespace0_CTD_ANON_200_kpp', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 27, 7), )


    kpp = property(__kpp.value, __kpp.set, None, '\u041a\u041f\u041f')

    _ElementMap.update({
        __inn.name() : __inn,
        __kpp.name() : __kpp
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_201 (pyxb.binding.basis.complexTypeDefinition):
    """Организация - физическое лицо"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 39, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_201_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 41, 7), )


    inn = property(__inn.value, __inn.set, None, '\u0418\u041d\u041d \u0424\u041b')

    _ElementMap.update({
        __inn.name() : __inn
    })
    _AttributeMap.update({

    })



# Complex type sign_ids_type with content type ELEMENT_ONLY
class sign_ids_type (pyxb.binding.basis.complexTypeDefinition):
    """Идентификаторы знака"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sign_ids_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 52, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element sgtin uses Python identifier sgtin
    __sgtin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sgtin'), 'sgtin', '__AbsentNamespace0_sign_ids_type_sgtin', True, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 58, 4), )


    sgtin = property(__sgtin.value, __sgtin.set, None, '\u041d\u043e\u043c\u0435\u0440 \u041a\u0438\u0417')


    # Element sscc uses Python identifier sscc
    __sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sscc'), 'sscc', '__AbsentNamespace0_sign_ids_type_sscc', True, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 63, 4), )


    sscc = property(__sscc.value, __sscc.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439/\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')

    _ElementMap.update({
        __sgtin.name() : __sgtin,
        __sscc.name() : __sscc
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'sign_ids_type', sign_ids_type)


# Complex type fts_gtd_info_type with content type ELEMENT_ONLY
class fts_gtd_info_type (pyxb.binding.basis.complexTypeDefinition):
    """Состав сведений, передаваемых при подаче таможенной декларации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fts_gtd_info_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 71, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element customs_code uses Python identifier customs_code
    __customs_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'customs_code'), 'customs_code', '__AbsentNamespace0_fts_gtd_info_type_customs_code', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 76, 3), )


    customs_code = property(__customs_code.value, __customs_code.set, None, '\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0430')


    # Element registration_date uses Python identifier registration_date
    __registration_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'registration_date'), 'registration_date', '__AbsentNamespace0_fts_gtd_info_type_registration_date', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 81, 3), )


    registration_date = property(__registration_date.value, __registration_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u044b')


    # Element gtd_number uses Python identifier gtd_number
    __gtd_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gtd_number'), 'gtd_number', '__AbsentNamespace0_fts_gtd_info_type_gtd_number', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 86, 3), )


    gtd_number = property(__gtd_number.value, __gtd_number.set, None, '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u044b')

    _ElementMap.update({
        __customs_code.name() : __customs_code,
        __registration_date.name() : __registration_date,
        __gtd_number.name() : __gtd_number
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'fts_gtd_info_type', fts_gtd_info_type)


# Complex type org_address_type with content type ELEMENT_ONLY
class org_address_type (pyxb.binding.basis.complexTypeDefinition):
    """Адрес и реквизиты (ИНН/КПП) организации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'org_address_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element fias_addr uses Python identifier fias_addr
    __fias_addr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fias_addr'), 'fias_addr', '__AbsentNamespace0_org_address_type_fias_addr', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 104, 3), )


    fias_addr = property(__fias_addr.value, __fias_addr.set, None, '\u0410\u0434\u0440\u0435\u0441 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (\u043f\u043e \u0424\u0418\u0410\u0421)')


    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ul'), 'ul', '__AbsentNamespace0_org_address_type_ul', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 110, 4), )


    ul = property(__ul.value, __ul.set, None, '\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u2013 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e')


    # Element fl uses Python identifier fl
    __fl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fl'), 'fl', '__AbsentNamespace0_org_address_type_fl', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 121, 4), )


    fl = property(__fl.value, __fl.set, None, '\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f-\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e')

    _ElementMap.update({
        __fias_addr.name() : __fias_addr,
        __ul.name() : __ul,
        __fl.name() : __fl
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'org_address_type', org_address_type)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_202 (pyxb.binding.basis.complexTypeDefinition):
    """Организация – юридическое лицо"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 114, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_202_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 116, 7), )


    inn = property(__inn.value, __inn.set, None, None)


    # Element kpp uses Python identifier kpp
    __kpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kpp'), 'kpp', '__AbsentNamespace0_CTD_ANON_202_kpp', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 117, 7), )


    kpp = property(__kpp.value, __kpp.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn,
        __kpp.name() : __kpp
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_203 (pyxb.binding.basis.complexTypeDefinition):
    """Организация-физическое лицо"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 125, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element inn uses Python identifier inn
    __inn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inn'), 'inn', '__AbsentNamespace0_CTD_ANON_203_inn', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 127, 7), )


    inn = property(__inn.value, __inn.set, None, None)

    _ElementMap.update({
        __inn.name() : __inn
    })
    _AttributeMap.update({

    })



# Complex type info_org_eeu_type with content type ELEMENT_ONLY
class info_org_eeu_type (pyxb.binding.basis.complexTypeDefinition):
    """Реквизиты (ИТИН/Код страны) организации"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'info_org_eeu_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 134, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element itin uses Python identifier itin
    __itin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'itin'), 'itin', '__AbsentNamespace0_info_org_eeu_type_itin', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 139, 3), )


    itin = property(__itin.value, __itin.set, None, '\u0410\u043d\u0430\u043b\u043e\u0433 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430\u043b\u043e\u0433\u043e\u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430')


    # Element code_country uses Python identifier code_country
    __code_country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code_country'), 'code_country', '__AbsentNamespace0_info_org_eeu_type_code_country', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 144, 3), )


    code_country = property(__code_country.value, __code_country.set, None, '\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b')

    _ElementMap.update({
        __itin.name() : __itin,
        __code_country.name() : __code_country
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'info_org_eeu_type', info_org_eeu_type)


# Complex type confnum_info_type with content type ELEMENT_ONLY
class confnum_info_type (pyxb.binding.basis.complexTypeDefinition):
    """Документы подтверждающие соответствие"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'confnum_info_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element confirm_doc uses Python identifier confirm_doc
    __confirm_doc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirm_doc'), 'confirm_doc', '__AbsentNamespace0_confnum_info_type_confirm_doc', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 156, 3), )


    confirm_doc = property(__confirm_doc.value, __confirm_doc.set, None, '\u0412\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435')


    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_confnum_info_type_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 161, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_confnum_info_type_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 166, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f')

    _ElementMap.update({
        __confirm_doc.name() : __confirm_doc,
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'confnum_info_type', confnum_info_type)


# Complex type skzkm_info_type with content type ELEMENT_ONLY
class skzkm_info_type (pyxb.binding.basis.complexTypeDefinition):
    """Информация СКЗКМ"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'skzkm_info_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 173, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element device_id uses Python identifier device_id
    __device_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device_id'), 'device_id', '__AbsentNamespace0_skzkm_info_type_device_id', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 178, 3), )


    device_id = property(__device_id.value, __device_id.set, None, '\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412 \u0441\u0442\u0440\u043e\u043a\u0430, 16 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432')


    # Element skzkm_origin_msg_id uses Python identifier skzkm_origin_msg_id
    __skzkm_origin_msg_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_origin_msg_id'), 'skzkm_origin_msg_id', '__AbsentNamespace0_skzkm_info_type_skzkm_origin_msg_id', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 183, 3), )


    skzkm_origin_msg_id = property(__skzkm_origin_msg_id.value, __skzkm_origin_msg_id.set, None, '\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432')


    # Element skzkm_report_id uses Python identifier skzkm_report_id
    __skzkm_report_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_report_id'), 'skzkm_report_id', '__AbsentNamespace0_skzkm_info_type_skzkm_report_id', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 188, 3), )


    skzkm_report_id = property(__skzkm_report_id.value, __skzkm_report_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432 \u043a\u043e\u0434\u043e\u0432 \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432')

    _ElementMap.update({
        __device_id.name() : __device_id,
        __skzkm_origin_msg_id.name() : __skzkm_origin_msg_id,
        __skzkm_report_id.name() : __skzkm_report_id
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'skzkm_info_type', skzkm_info_type)


# Complex type release_info_type with content type ELEMENT_ONLY
class release_info_type (pyxb.binding.basis.complexTypeDefinition):
    """Реквизиты сведений о вводе в оборот"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'release_info_type')
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 195, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element doc_date uses Python identifier doc_date
    __doc_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_date'), 'doc_date', '__AbsentNamespace0_release_info_type_doc_date', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 200, 3), )


    doc_date = property(__doc_date.value, __doc_date.set, None, '\u0414\u0430\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0410\u0418\u0421 \u0420\u0417\u041d \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')


    # Element doc_num uses Python identifier doc_num
    __doc_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doc_num'), 'doc_num', '__AbsentNamespace0_release_info_type_doc_num', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 205, 3), )


    doc_num = property(__doc_num.value, __doc_num.set, None, '\u041d\u043e\u043c\u0435\u0440 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0432\u043e\u0434 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 (\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f \u0438\u043c\u043c\u0443\u043d\u043e\u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u041b\u041f)')


    # Element confirmation_num uses Python identifier confirmation_num
    __confirmation_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'confirmation_num'), 'confirmation_num', '__AbsentNamespace0_release_info_type_confirmation_num', False, pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 210, 3), )


    confirmation_num = property(__confirmation_num.value, __confirmation_num.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0410\u0418\u0421 \u0420\u0417\u041d')

    _ElementMap.update({
        __doc_date.name() : __doc_date,
        __doc_num.name() : __doc_num,
        __confirmation_num.name() : __confirmation_num
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', 'release_info_type', release_info_type)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_204 (pyxb.binding.basis.complexTypeDefinition):
    """Перечень документов ИС МДЛП"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 102, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element result uses Python identifier result
    __result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result'), 'result', '__AbsentNamespace0_CTD_ANON_204_result', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 104, 4), )


    result = property(__result.value, __result.set, None, '200 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element result_service uses Python identifier result_service
    __result_service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result_service'), 'result_service', '__AbsentNamespace0_CTD_ANON_204_result_service', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 109, 4), )


    result_service = property(__result_service.value, __result_service.set, None, '201 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element query_kiz_info uses Python identifier query_kiz_info
    __query_kiz_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'query_kiz_info'), 'query_kiz_info', '__AbsentNamespace0_CTD_ANON_204_query_kiz_info', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 114, 4), )


    query_kiz_info = property(__query_kiz_info.value, __query_kiz_info.set, None, '210 - \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 SGTIN/SSCC')


    # Element kiz_info uses Python identifier kiz_info
    __kiz_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'kiz_info'), 'kiz_info', '__AbsentNamespace0_CTD_ANON_204_kiz_info', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 119, 4), )


    kiz_info = property(__kiz_info.value, __kiz_info.set, None, '211 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 SGTIN/SSCC')


    # Element edit_counterparty_list uses Python identifier edit_counterparty_list
    __edit_counterparty_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edit_counterparty_list'), 'edit_counterparty_list', '__AbsentNamespace0_CTD_ANON_204_edit_counterparty_list', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 124, 4), )


    edit_counterparty_list = property(__edit_counterparty_list.value, __edit_counterparty_list.set, None, '212 - \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432')


    # Element booking_sscc uses Python identifier booking_sscc
    __booking_sscc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'booking_sscc'), 'booking_sscc', '__AbsentNamespace0_CTD_ANON_204_booking_sscc', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 129, 4), )


    booking_sscc = property(__booking_sscc.value, __booking_sscc.set, None, '213 - \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043e\u0442\u043c\u0435\u043d\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f) \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element query_hierarchy_info uses Python identifier query_hierarchy_info
    __query_hierarchy_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'query_hierarchy_info'), 'query_hierarchy_info', '__AbsentNamespace0_CTD_ANON_204_query_hierarchy_info', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 134, 4), )


    query_hierarchy_info = property(__query_hierarchy_info.value, __query_hierarchy_info.set, None, '220 - \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 SSCC')


    # Element hierarchy_info uses Python identifier hierarchy_info
    __hierarchy_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'hierarchy_info'), 'hierarchy_info', '__AbsentNamespace0_CTD_ANON_204_hierarchy_info', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 139, 4), )


    hierarchy_info = property(__hierarchy_info.value, __hierarchy_info.set, None, '221 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 SSCC')


    # Element recall uses Python identifier recall
    __recall = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recall'), 'recall', '__AbsentNamespace0_CTD_ANON_204_recall', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 144, 4), )


    recall = property(__recall.value, __recall.set, None, '250 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u0435 \u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element refusal_sender uses Python identifier refusal_sender
    __refusal_sender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'refusal_sender'), 'refusal_sender', '__AbsentNamespace0_CTD_ANON_204_refusal_sender', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 149, 4), )


    refusal_sender = property(__refusal_sender.value, __refusal_sender.set, None, '251 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element refusal_receiver uses Python identifier refusal_receiver
    __refusal_receiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'refusal_receiver'), 'refusal_receiver', '__AbsentNamespace0_CTD_ANON_204_refusal_receiver', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 154, 4), )


    refusal_receiver = property(__refusal_receiver.value, __refusal_receiver.set, None, '252 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element change_information uses Python identifier change_information
    __change_information = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'change_information'), 'change_information', '__AbsentNamespace0_CTD_ANON_204_change_information', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 159, 4), )


    change_information = property(__change_information.value, __change_information.set, None, '253 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u043e\u0432')


    # Element change_property uses Python identifier change_property
    __change_property = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'change_property'), 'change_property', '__AbsentNamespace0_CTD_ANON_204_change_property', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 164, 4), )


    change_property = property(__change_property.value, __change_property.set, None, '254 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Element transfer_code_to_custom uses Python identifier transfer_code_to_custom
    __transfer_code_to_custom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'transfer_code_to_custom'), 'transfer_code_to_custom', '__AbsentNamespace0_CTD_ANON_204_transfer_code_to_custom', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 169, 4), )


    transfer_code_to_custom = property(__transfer_code_to_custom.value, __transfer_code_to_custom.set, None, '300 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u043a\u043e\u0434\u043e\u0432 \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u043c\u0443 \u0441\u043a\u043b\u0430\u0434\u0443 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element register_end_packing uses Python identifier register_end_packing
    __register_end_packing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'register_end_packing'), 'register_end_packing', '__AbsentNamespace0_CTD_ANON_204_register_end_packing', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 174, 4), )


    register_end_packing = property(__register_end_packing.value, __register_end_packing.set, None, '311 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u0430\u043f\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element register_product_emission uses Python identifier register_product_emission
    __register_product_emission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'register_product_emission'), 'register_product_emission', '__AbsentNamespace0_CTD_ANON_204_register_product_emission', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 179, 4), )


    register_product_emission = property(__register_product_emission.value, __register_product_emission.set, None, '313 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0435 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element move_to_release uses Python identifier move_to_release
    __move_to_release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_to_release'), 'move_to_release', '__AbsentNamespace0_CTD_ANON_204_move_to_release', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 184, 4), )


    move_to_release = property(__move_to_release.value, __move_to_release.set, None, '314 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element return_contract_production uses Python identifier return_contract_production
    __return_contract_production = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'return_contract_production'), 'return_contract_production', '__AbsentNamespace0_CTD_ANON_204_return_contract_production', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 189, 4), )


    return_contract_production = property(__return_contract_production.value, __return_contract_production.set, None, '315 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e')


    # Element foreign_emission uses Python identifier foreign_emission
    __foreign_emission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_emission'), 'foreign_emission', '__AbsentNamespace0_CTD_ANON_204_foreign_emission', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 194, 4), )


    foreign_emission = property(__foreign_emission.value, __foreign_emission.set, None, '321 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0435 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element foreign_shipment uses Python identifier foreign_shipment
    __foreign_shipment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_shipment'), 'foreign_shipment', '__AbsentNamespace0_CTD_ANON_204_foreign_shipment', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 199, 4), )


    foreign_shipment = property(__foreign_shipment.value, __foreign_shipment.set, None, '331 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e')


    # Element foreign_import uses Python identifier foreign_import
    __foreign_import = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_import'), 'foreign_import', '__AbsentNamespace0_CTD_ANON_204_foreign_import', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 204, 4), )


    foreign_import = property(__foreign_import.value, __foreign_import.set, None, '332 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e')


    # Element foreign_import_owner uses Python identifier foreign_import_owner
    __foreign_import_owner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_import_owner'), 'foreign_import_owner', '__AbsentNamespace0_CTD_ANON_204_foreign_import_owner', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 209, 4), )


    foreign_import_owner = property(__foreign_import_owner.value, __foreign_import_owner.set, None, '333 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0431\u0435\u0437 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430')


    # Element custom_move uses Python identifier custom_move
    __custom_move = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'custom_move'), 'custom_move', '__AbsentNamespace0_CTD_ANON_204_custom_move', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 214, 4), )


    custom_move = property(__custom_move.value, __custom_move.set, None, '334 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0437\u043e\u043d\u0430\u043c\u0438 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f')


    # Element fts_data uses Python identifier fts_data
    __fts_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fts_data'), 'fts_data', '__AbsentNamespace0_CTD_ANON_204_fts_data', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 219, 4), )


    fts_data = property(__fts_data.value, __fts_data.set, None, '335 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f')


    # Element import_info uses Python identifier import_info
    __import_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'import_info'), 'import_info', '__AbsentNamespace0_CTD_ANON_204_import_info', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 224, 4), )


    import_info = property(__import_info.value, __import_info.set, None, '336 -\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0432\u0432\u043e\u0437\u0430 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u041b\u041f, \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u043c \u0441\u043a\u043b\u0430\u0434\u0435, \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f')


    # Element receive_importer uses Python identifier receive_importer
    __receive_importer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_importer'), 'receive_importer', '__AbsentNamespace0_CTD_ANON_204_receive_importer', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 229, 4), )


    receive_importer = property(__receive_importer.value, __receive_importer.set, None, '341 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430')


    # Element release_in_circulation uses Python identifier release_in_circulation
    __release_in_circulation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'release_in_circulation'), 'release_in_circulation', '__AbsentNamespace0_CTD_ANON_204_release_in_circulation', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 234, 4), )


    release_in_circulation = property(__release_in_circulation.value, __release_in_circulation.set, None, '342 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u041b\u041f \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u0424')


    # Element change_owner uses Python identifier change_owner
    __change_owner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'change_owner'), 'change_owner', '__AbsentNamespace0_CTD_ANON_204_change_owner', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 239, 4), )


    change_owner = property(__change_owner.value, __change_owner.set, None, '351 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element eeu_owner uses Python identifier eeu_owner
    __eeu_owner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_owner'), 'eeu_owner', '__AbsentNamespace0_CTD_ANON_204_eeu_owner', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 244, 4), )


    eeu_owner = property(__eeu_owner.value, __eeu_owner.set, None, '360 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421')


    # Element eeu_shipment uses Python identifier eeu_shipment
    __eeu_shipment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_shipment'), 'eeu_shipment', '__AbsentNamespace0_CTD_ANON_204_eeu_shipment', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 249, 4), )


    eeu_shipment = property(__eeu_shipment.value, __eeu_shipment.set, None, '361 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421')


    # Element eeu_import uses Python identifier eeu_import
    __eeu_import = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_import'), 'eeu_import', '__AbsentNamespace0_CTD_ANON_204_eeu_import', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 254, 4), )


    eeu_import = property(__eeu_import.value, __eeu_import.set, None, '362 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u0438\u0437 \u0415\u0410\u042d\u0421 \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f')


    # Element eeu_release uses Python identifier eeu_release
    __eeu_release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_release'), 'eeu_release', '__AbsentNamespace0_CTD_ANON_204_eeu_release', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 259, 4), )


    eeu_release = property(__eeu_release.value, __eeu_release.set, None, '363 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438')


    # Element move_owner uses Python identifier move_owner
    __move_owner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_owner'), 'move_owner', '__AbsentNamespace0_CTD_ANON_204_move_owner', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 264, 4), )


    move_owner = property(__move_owner.value, __move_owner.set, None, '381 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0443')


    # Element return_to_circulation uses Python identifier return_to_circulation
    __return_to_circulation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'return_to_circulation'), 'return_to_circulation', '__AbsentNamespace0_CTD_ANON_204_return_to_circulation', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 269, 4), )


    return_to_circulation = property(__return_to_circulation.value, __return_to_circulation.set, None, '391 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u043c \u0432\u0432\u043e\u0434\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442')


    # Element move_order uses Python identifier move_order
    __move_order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_order'), 'move_order', '__AbsentNamespace0_CTD_ANON_204_move_order', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 274, 4), )


    move_order = property(__move_order.value, __move_order.set, None, '415 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receive_order uses Python identifier receive_order
    __receive_order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_order'), 'receive_order', '__AbsentNamespace0_CTD_ANON_204_receive_order', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 279, 4), )


    receive_order = property(__receive_order.value, __receive_order.set, None, '416 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element move_return uses Python identifier move_return
    __move_return = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_return'), 'move_return', '__AbsentNamespace0_CTD_ANON_204_move_return', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 284, 4), )


    move_return = property(__move_return.value, __move_return.set, None, '417 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element move_place uses Python identifier move_place
    __move_place = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_place'), 'move_place', '__AbsentNamespace0_CTD_ANON_204_move_place', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 289, 4), )


    move_place = property(__move_place.value, __move_place.set, None, '431 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438')


    # Element move_unregistered_order uses Python identifier move_unregistered_order
    __move_unregistered_order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_unregistered_order'), 'move_unregistered_order', '__AbsentNamespace0_CTD_ANON_204_move_unregistered_order', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 294, 4), )


    move_unregistered_order = property(__move_unregistered_order.value, __move_unregistered_order.set, None, '441 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0443')


    # Element receive_unregistered_order uses Python identifier receive_unregistered_order
    __receive_unregistered_order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_unregistered_order'), 'receive_unregistered_order', '__AbsentNamespace0_CTD_ANON_204_receive_unregistered_order', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 299, 4), )


    receive_unregistered_order = property(__receive_unregistered_order.value, __receive_unregistered_order.set, None, '442 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432, \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438')


    # Element move_eeu uses Python identifier move_eeu
    __move_eeu = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_eeu'), 'move_eeu', '__AbsentNamespace0_CTD_ANON_204_move_eeu', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 304, 4), )


    move_eeu = property(__move_eeu.value, __move_eeu.set, None, '461 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u044e \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430-\u0447\u043b\u0435\u043d\u0430 \u0415\u0410\u042d\u0421')


    # Element move_state_dispatch uses Python identifier move_state_dispatch
    __move_state_dispatch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_state_dispatch'), 'move_state_dispatch', '__AbsentNamespace0_CTD_ANON_204_move_state_dispatch', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 309, 4), )


    move_state_dispatch = property(__move_state_dispatch.value, __move_state_dispatch.set, None, '470 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f')


    # Element state_dispatch uses Python identifier state_dispatch
    __state_dispatch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'state_dispatch'), 'state_dispatch', '__AbsentNamespace0_CTD_ANON_204_state_dispatch', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 314, 4), )


    state_dispatch = property(__state_dispatch.value, __state_dispatch.set, None, '471 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f')


    # Element agent_dispatch uses Python identifier agent_dispatch
    __agent_dispatch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'agent_dispatch'), 'agent_dispatch', '__AbsentNamespace0_CTD_ANON_204_agent_dispatch', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 319, 4), )


    agent_dispatch = property(__agent_dispatch.value, __agent_dispatch.set, None, '472 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element arbitration uses Python identifier arbitration
    __arbitration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'arbitration'), 'arbitration', '__AbsentNamespace0_CTD_ANON_204_arbitration', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 324, 4), )


    arbitration = property(__arbitration.value, __arbitration.set, None, '481 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430')


    # Element retail_sale uses Python identifier retail_sale
    __retail_sale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'retail_sale'), 'retail_sale', '__AbsentNamespace0_CTD_ANON_204_retail_sale', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 329, 4), )


    retail_sale = property(__retail_sale.value, __retail_sale.set, None, '511 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u043e\u0437\u043d\u0438\u0447\u043d\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438')


    # Element recipe uses Python identifier recipe
    __recipe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recipe'), 'recipe', '__AbsentNamespace0_CTD_ANON_204_recipe', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 334, 4), )


    recipe = property(__recipe.value, __recipe.set, None, '521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443')


    # Element health_care uses Python identifier health_care
    __health_care = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'health_care'), 'health_care', '__AbsentNamespace0_CTD_ANON_204_health_care', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 339, 4), )


    health_care = property(__health_care.value, __health_care.set, None, '531 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0439 \u043f\u043e\u043c\u043e\u0449\u0438')


    # Element move_destruction uses Python identifier move_destruction
    __move_destruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_destruction'), 'move_destruction', '__AbsentNamespace0_CTD_ANON_204_move_destruction', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 344, 4), )


    move_destruction = property(__move_destruction.value, __move_destruction.set, None, '541 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435')


    # Element destruction uses Python identifier destruction
    __destruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destruction'), 'destruction', '__AbsentNamespace0_CTD_ANON_204_destruction', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 349, 4), )


    destruction = property(__destruction.value, __destruction.set, None, '542 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u043a\u0442\u0435 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element withdrawal uses Python identifier withdrawal
    __withdrawal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'withdrawal'), 'withdrawal', '__AbsentNamespace0_CTD_ANON_204_withdrawal', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 354, 4), )


    withdrawal = property(__withdrawal.value, __withdrawal.set, None, '552 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c')


    # Element move_order_notification uses Python identifier move_order_notification
    __move_order_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_order_notification'), 'move_order_notification', '__AbsentNamespace0_CTD_ANON_204_move_order_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 359, 4), )


    move_order_notification = property(__move_order_notification.value, __move_order_notification.set, None, '601 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f')


    # Element receive_order_notification uses Python identifier receive_order_notification
    __receive_order_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_order_notification'), 'receive_order_notification', '__AbsentNamespace0_CTD_ANON_204_receive_order_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 364, 4), )


    receive_order_notification = property(__receive_order_notification.value, __receive_order_notification.set, None, '602 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element move_owner_notification uses Python identifier move_owner_notification
    __move_owner_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_owner_notification'), 'move_owner_notification', '__AbsentNamespace0_CTD_ANON_204_move_owner_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 369, 4), )


    move_owner_notification = property(__move_owner_notification.value, __move_owner_notification.set, None, '603 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element refusal_sender_notification uses Python identifier refusal_sender_notification
    __refusal_sender_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'refusal_sender_notification'), 'refusal_sender_notification', '__AbsentNamespace0_CTD_ANON_204_refusal_sender_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 374, 4), )


    refusal_sender_notification = property(__refusal_sender_notification.value, __refusal_sender_notification.set, None, '605 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element refusal_receiver_notification uses Python identifier refusal_receiver_notification
    __refusal_receiver_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'refusal_receiver_notification'), 'refusal_receiver_notification', '__AbsentNamespace0_CTD_ANON_204_refusal_receiver_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 379, 4), )


    refusal_receiver_notification = property(__refusal_receiver_notification.value, __refusal_receiver_notification.set, None, '606 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element accept_notification uses Python identifier accept_notification
    __accept_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accept_notification'), 'accept_notification', '__AbsentNamespace0_CTD_ANON_204_accept_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 384, 4), )


    accept_notification = property(__accept_notification.value, __accept_notification.set, None, '607 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 (\u0430\u043a\u0446\u0435\u043f\u0442\u043e\u0432\u0430\u043d\u0438\u0438) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439')


    # Element change_owner_notification uses Python identifier change_owner_notification
    __change_owner_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'change_owner_notification'), 'change_owner_notification', '__AbsentNamespace0_CTD_ANON_204_change_owner_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 389, 4), )


    change_owner_notification = property(__change_owner_notification.value, __change_owner_notification.set, None, '609 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e \u0441\u043c\u0435\u043d\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element move_return_notification uses Python identifier move_return_notification
    __move_return_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_return_notification'), 'move_return_notification', '__AbsentNamespace0_CTD_ANON_204_move_return_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 394, 4), )


    move_return_notification = property(__move_return_notification.value, __move_return_notification.set, None, '610 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element receive_unregistered_notification uses Python identifier receive_unregistered_notification
    __receive_unregistered_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_unregistered_notification'), 'receive_unregistered_notification', '__AbsentNamespace0_CTD_ANON_204_receive_unregistered_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 399, 4), )


    receive_unregistered_notification = property(__receive_unregistered_notification.value, __receive_unregistered_notification.set, None, '611 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432, \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438')


    # Element state_dispatch_notification uses Python identifier state_dispatch_notification
    __state_dispatch_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'state_dispatch_notification'), 'state_dispatch_notification', '__AbsentNamespace0_CTD_ANON_204_state_dispatch_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 404, 4), )


    state_dispatch_notification = property(__state_dispatch_notification.value, __state_dispatch_notification.set, None, '612 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u041f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u043c\u0435\u043d\u044b \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element foreign_shipment_notification uses Python identifier foreign_shipment_notification
    __foreign_shipment_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_shipment_notification'), 'foreign_shipment_notification', '__AbsentNamespace0_CTD_ANON_204_foreign_shipment_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 409, 4), )


    foreign_shipment_notification = property(__foreign_shipment_notification.value, __foreign_shipment_notification.set, None, '613 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e')


    # Element foreign_import_notification uses Python identifier foreign_import_notification
    __foreign_import_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreign_import_notification'), 'foreign_import_notification', '__AbsentNamespace0_CTD_ANON_204_foreign_import_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 414, 4), )


    foreign_import_notification = property(__foreign_import_notification.value, __foreign_import_notification.set, None, '614 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432\xa0\u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e')


    # Element eeu_shipment_notification uses Python identifier eeu_shipment_notification
    __eeu_shipment_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_shipment_notification'), 'eeu_shipment_notification', '__AbsentNamespace0_CTD_ANON_204_eeu_shipment_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 419, 4), )


    eeu_shipment_notification = property(__eeu_shipment_notification.value, __eeu_shipment_notification.set, None, '615 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421')


    # Element eeu_import_notification uses Python identifier eeu_import_notification
    __eeu_import_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eeu_import_notification'), 'eeu_import_notification', '__AbsentNamespace0_CTD_ANON_204_eeu_import_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 424, 4), )


    eeu_import_notification = property(__eeu_import_notification.value, __eeu_import_notification.set, None, '616 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u0432\u043e\u0437\u0435 \u0438\u0437 \u0415\u0410\u042d\u0421 \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f')


    # Element receive_order_errors_notification uses Python identifier receive_order_errors_notification
    __receive_order_errors_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'receive_order_errors_notification'), 'receive_order_errors_notification', '__AbsentNamespace0_CTD_ANON_204_receive_order_errors_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 429, 4), )


    receive_order_errors_notification = property(__receive_order_errors_notification.value, __receive_order_errors_notification.set, None, '617 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u043f\u0440\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f')


    # Element move_to_release_notification uses Python identifier move_to_release_notification
    __move_to_release_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'move_to_release_notification'), 'move_to_release_notification', '__AbsentNamespace0_CTD_ANON_204_move_to_release_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 434, 4), )


    move_to_release_notification = property(__move_to_release_notification.value, __move_to_release_notification.set, None, '618 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438')


    # Element agent_dispatch_notification uses Python identifier agent_dispatch_notification
    __agent_dispatch_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'agent_dispatch_notification'), 'agent_dispatch_notification', '__AbsentNamespace0_CTD_ANON_204_agent_dispatch_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 439, 4), )


    agent_dispatch_notification = property(__agent_dispatch_notification.value, __agent_dispatch_notification.set, None, '619 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430')


    # Element import_info_notification uses Python identifier import_info_notification
    __import_info_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'import_info_notification'), 'import_info_notification', '__AbsentNamespace0_CTD_ANON_204_import_info_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 444, 4), )


    import_info_notification = property(__import_info_notification.value, __import_info_notification.set, None, '620 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0432\u0432\u043e\u0437\u0430 \u041b\u041f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c)')


    # Element arbitration_notification uses Python identifier arbitration_notification
    __arbitration_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'arbitration_notification'), 'arbitration_notification', '__AbsentNamespace0_CTD_ANON_204_arbitration_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 449, 4), )


    arbitration_notification = property(__arbitration_notification.value, __arbitration_notification.set, None, '621 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430')


    # Element return_contract_production_notification uses Python identifier return_contract_production_notification
    __return_contract_production_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'return_contract_production_notification'), 'return_contract_production_notification', '__AbsentNamespace0_CTD_ANON_204_return_contract_production_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 454, 4), )


    return_contract_production_notification = property(__return_contract_production_notification.value, __return_contract_production_notification.set, None, '622 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e')


    # Element change_property_notification uses Python identifier change_property_notification
    __change_property_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'change_property_notification'), 'change_property_notification', '__AbsentNamespace0_CTD_ANON_204_change_property_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 459, 4), )


    change_property_notification = property(__change_property_notification.value, __change_property_notification.set, None, '623 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435')


    # Element posting_notification uses Python identifier posting_notification
    __posting_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'posting_notification'), 'posting_notification', '__AbsentNamespace0_CTD_ANON_204_posting_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 464, 8), )


    posting_notification = property(__posting_notification.value, __posting_notification.set, None, '627 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438')


    # Element posting_import_notification uses Python identifier posting_import_notification
    __posting_import_notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'posting_import_notification'), 'posting_import_notification', '__AbsentNamespace0_CTD_ANON_204_posting_import_notification', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 469, 4), )


    posting_import_notification = property(__posting_import_notification.value, __posting_import_notification.set, None, '628 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (\u0438\u043c\u043f\u043e\u0440\u0442)')


    # Element accept uses Python identifier accept
    __accept = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accept'), 'accept', '__AbsentNamespace0_CTD_ANON_204_accept', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 474, 4), )


    accept = property(__accept.value, __accept.set, None, '701 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f (\u0430\u043a\u0446\u0435\u043f\u0442\u043e\u0432\u0430\u043d\u0438\u044f) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439')


    # Element posting uses Python identifier posting
    __posting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'posting'), 'posting', '__AbsentNamespace0_CTD_ANON_204_posting', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 479, 4), )


    posting = property(__posting.value, __posting.set, None, '702 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438')


    # Element posting_import uses Python identifier posting_import
    __posting_import = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'posting_import'), 'posting_import', '__AbsentNamespace0_CTD_ANON_204_posting_import', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 484, 4), )


    posting_import = property(__posting_import.value, __posting_import.set, None, '703 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (\u0438\u043c\u043f\u043e\u0440\u0442)')


    # Element relabeling uses Python identifier relabeling
    __relabeling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relabeling'), 'relabeling', '__AbsentNamespace0_CTD_ANON_204_relabeling', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 489, 4), )


    relabeling = property(__relabeling.value, __relabeling.set, None, '811 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u0438 \u043f\u0435\u0440\u0435\u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element unit_pack uses Python identifier unit_pack
    __unit_pack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit_pack'), 'unit_pack', '__AbsentNamespace0_CTD_ANON_204_unit_pack', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 494, 4), )


    unit_pack = property(__unit_pack.value, __unit_pack.set, None, '911 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0443\u044e, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443')


    # Element unit_unpack uses Python identifier unit_unpack
    __unit_unpack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit_unpack'), 'unit_unpack', '__AbsentNamespace0_CTD_ANON_204_unit_unpack', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 499, 4), )


    unit_unpack = property(__unit_unpack.value, __unit_unpack.set, None, '912 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u043e\u0439, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432')


    # Element unit_extract uses Python identifier unit_extract
    __unit_extract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit_extract'), 'unit_extract', '__AbsentNamespace0_CTD_ANON_204_unit_extract', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 504, 4), )


    unit_extract = property(__unit_extract.value, __unit_extract.set, None, '913 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u0437\u044a\u044f\u0442\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0438\u0437 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u043e\u0439, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438')


    # Element unit_append uses Python identifier unit_append
    __unit_append = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit_append'), 'unit_append', '__AbsentNamespace0_CTD_ANON_204_unit_append', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 509, 4), )


    unit_append = property(__unit_append.value, __unit_append.set, None, '914 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u0432 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0443\u044e, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443')


    # Element multi_pack uses Python identifier multi_pack
    __multi_pack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'multi_pack'), 'multi_pack', '__AbsentNamespace0_CTD_ANON_204_multi_pack', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 514, 4), )


    multi_pack = property(__multi_pack.value, __multi_pack.set, None, '915 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u044b\u0445 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445) \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Element multi_unit_append uses Python identifier multi_unit_append
    __multi_unit_append = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'multi_unit_append'), 'multi_unit_append', '__AbsentNamespace0_CTD_ANON_204_multi_unit_append', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 519, 4), )


    multi_unit_append = property(__multi_unit_append.value, __multi_unit_append.set, None, '916 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u044b\u0445 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445) \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a')


    # Element code_emission uses Python identifier code_emission
    __code_emission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code_emission'), 'code_emission', '__AbsentNamespace0_CTD_ANON_204_code_emission', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 524, 4), )


    code_emission = property(__code_emission.value, __code_emission.set, None, '10300 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u044d\u043c\u0438\u0441\u0441\u0438\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0442 \u0421\u0423\u0417)')


    # Element skzkm_report_of_dropout uses Python identifier skzkm_report_of_dropout
    __skzkm_report_of_dropout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_report_of_dropout'), 'skzkm_report_of_dropout', '__AbsentNamespace0_CTD_ANON_204_skzkm_report_of_dropout', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 529, 4), )


    skzkm_report_of_dropout = property(__skzkm_report_of_dropout.value, __skzkm_report_of_dropout.set, None, '10305 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0431\u0440\u0430\u043a\u043e\u0432\u043a\u0435 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0442 \u0421\u0423\u0417)')


    # Element skzkm_register_end_packing uses Python identifier skzkm_register_end_packing
    __skzkm_register_end_packing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_register_end_packing'), 'skzkm_register_end_packing', '__AbsentNamespace0_CTD_ANON_204_skzkm_register_end_packing', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 534, 4), )


    skzkm_register_end_packing = property(__skzkm_register_end_packing.value, __skzkm_register_end_packing.set, None, '10311 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u0430\u043f\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)')


    # Element skzkm_foreign_emission uses Python identifier skzkm_foreign_emission
    __skzkm_foreign_emission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_foreign_emission'), 'skzkm_foreign_emission', '__AbsentNamespace0_CTD_ANON_204_skzkm_foreign_emission', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 539, 4), )


    skzkm_foreign_emission = property(__skzkm_foreign_emission.value, __skzkm_foreign_emission.set, None, '10319 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0438 \u043d\u0430\u043d\u0435\u0441\u0435\u043d\u0438\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u0424 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)')


    # Element retail_sell_kkt uses Python identifier retail_sell_kkt
    __retail_sell_kkt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'retail_sell_kkt'), 'retail_sell_kkt', '__AbsentNamespace0_CTD_ANON_204_retail_sell_kkt', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 544, 4), )


    retail_sell_kkt = property(__retail_sell_kkt.value, __retail_sell_kkt.set, None, '10511 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u043e\u0437\u043d\u0438\u0447\u043d\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u041a\u0422')


    # Element skzkm_recipe uses Python identifier skzkm_recipe
    __skzkm_recipe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_recipe'), 'skzkm_recipe', '__AbsentNamespace0_CTD_ANON_204_skzkm_recipe', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 549, 4), )


    skzkm_recipe = property(__skzkm_recipe.value, __skzkm_recipe.set, None, '10521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)')


    # Element recipe_kkt uses Python identifier recipe_kkt
    __recipe_kkt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recipe_kkt'), 'recipe_kkt', '__AbsentNamespace0_CTD_ANON_204_recipe_kkt', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 554, 4), )


    recipe_kkt = property(__recipe_kkt.value, __recipe_kkt.set, None, '10522 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443 c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u041a\u0422')


    # Element skzkm_health_care uses Python identifier skzkm_health_care
    __skzkm_health_care = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skzkm_health_care'), 'skzkm_health_care', '__AbsentNamespace0_CTD_ANON_204_skzkm_health_care', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 559, 4), )


    skzkm_health_care = property(__skzkm_health_care.value, __skzkm_health_care.set, None, '10531 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0439 \u043f\u043e\u043c\u043e\u0449\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)')


    # Element service_disposal_registrar uses Python identifier service_disposal_registrar
    __service_disposal_registrar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'service_disposal_registrar'), 'service_disposal_registrar', '__AbsentNamespace0_CTD_ANON_204_service_disposal_registrar', False, pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 564, 4), )


    service_disposal_registrar = property(__service_disposal_registrar.value, __service_disposal_registrar.set, None, '20521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0432\u044b\u0431\u044b\u0442\u0438\u044f')


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__AbsentNamespace0_CTD_ANON_204_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 570, 3)
    __version._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 570, 3)

    version = property(__version.value, __version.set, None, '\u0412\u0435\u0440\u0441\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430')


    # Attribute session_ui uses Python identifier session_ui
    __session_ui = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'session_ui'), 'session_ui', '__AbsentNamespace0_CTD_ANON_204_session_ui', string200_type)
    __session_ui._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 575, 3)
    __session_ui._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 575, 3)

    session_ui = property(__session_ui.value, __session_ui.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430')


    # Attribute original_id uses Python identifier original_id
    __original_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'original_id'), 'original_id', '__AbsentNamespace0_CTD_ANON_204_original_id', string200_type)
    __original_id._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 580, 3)
    __original_id._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 580, 3)

    original_id = property(__original_id.value, __original_id.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 (\u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439) \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430')


    # Attribute client_identifier uses Python identifier client_identifier
    __client_identifier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'client_identifier'), 'client_identifier', '__AbsentNamespace0_CTD_ANON_204_client_identifier', string200_type)
    __client_identifier._DeclarationLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 585, 3)
    __client_identifier._UseLocation = pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 585, 3)

    client_identifier = property(__client_identifier.value, __client_identifier.set, None, '\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430')

    _ElementMap.update({
        __result.name() : __result,
        __result_service.name() : __result_service,
        __query_kiz_info.name() : __query_kiz_info,
        __kiz_info.name() : __kiz_info,
        __edit_counterparty_list.name() : __edit_counterparty_list,
        __booking_sscc.name() : __booking_sscc,
        __query_hierarchy_info.name() : __query_hierarchy_info,
        __hierarchy_info.name() : __hierarchy_info,
        __recall.name() : __recall,
        __refusal_sender.name() : __refusal_sender,
        __refusal_receiver.name() : __refusal_receiver,
        __change_information.name() : __change_information,
        __change_property.name() : __change_property,
        __transfer_code_to_custom.name() : __transfer_code_to_custom,
        __register_end_packing.name() : __register_end_packing,
        __register_product_emission.name() : __register_product_emission,
        __move_to_release.name() : __move_to_release,
        __return_contract_production.name() : __return_contract_production,
        __foreign_emission.name() : __foreign_emission,
        __foreign_shipment.name() : __foreign_shipment,
        __foreign_import.name() : __foreign_import,
        __foreign_import_owner.name() : __foreign_import_owner,
        __custom_move.name() : __custom_move,
        __fts_data.name() : __fts_data,
        __import_info.name() : __import_info,
        __receive_importer.name() : __receive_importer,
        __release_in_circulation.name() : __release_in_circulation,
        __change_owner.name() : __change_owner,
        __eeu_owner.name() : __eeu_owner,
        __eeu_shipment.name() : __eeu_shipment,
        __eeu_import.name() : __eeu_import,
        __eeu_release.name() : __eeu_release,
        __move_owner.name() : __move_owner,
        __return_to_circulation.name() : __return_to_circulation,
        __move_order.name() : __move_order,
        __receive_order.name() : __receive_order,
        __move_return.name() : __move_return,
        __move_place.name() : __move_place,
        __move_unregistered_order.name() : __move_unregistered_order,
        __receive_unregistered_order.name() : __receive_unregistered_order,
        __move_eeu.name() : __move_eeu,
        __move_state_dispatch.name() : __move_state_dispatch,
        __state_dispatch.name() : __state_dispatch,
        __agent_dispatch.name() : __agent_dispatch,
        __arbitration.name() : __arbitration,
        __retail_sale.name() : __retail_sale,
        __recipe.name() : __recipe,
        __health_care.name() : __health_care,
        __move_destruction.name() : __move_destruction,
        __destruction.name() : __destruction,
        __withdrawal.name() : __withdrawal,
        __move_order_notification.name() : __move_order_notification,
        __receive_order_notification.name() : __receive_order_notification,
        __move_owner_notification.name() : __move_owner_notification,
        __refusal_sender_notification.name() : __refusal_sender_notification,
        __refusal_receiver_notification.name() : __refusal_receiver_notification,
        __accept_notification.name() : __accept_notification,
        __change_owner_notification.name() : __change_owner_notification,
        __move_return_notification.name() : __move_return_notification,
        __receive_unregistered_notification.name() : __receive_unregistered_notification,
        __state_dispatch_notification.name() : __state_dispatch_notification,
        __foreign_shipment_notification.name() : __foreign_shipment_notification,
        __foreign_import_notification.name() : __foreign_import_notification,
        __eeu_shipment_notification.name() : __eeu_shipment_notification,
        __eeu_import_notification.name() : __eeu_import_notification,
        __receive_order_errors_notification.name() : __receive_order_errors_notification,
        __move_to_release_notification.name() : __move_to_release_notification,
        __agent_dispatch_notification.name() : __agent_dispatch_notification,
        __import_info_notification.name() : __import_info_notification,
        __arbitration_notification.name() : __arbitration_notification,
        __return_contract_production_notification.name() : __return_contract_production_notification,
        __change_property_notification.name() : __change_property_notification,
        __posting_notification.name() : __posting_notification,
        __posting_import_notification.name() : __posting_import_notification,
        __accept.name() : __accept,
        __posting.name() : __posting,
        __posting_import.name() : __posting_import,
        __relabeling.name() : __relabeling,
        __unit_pack.name() : __unit_pack,
        __unit_unpack.name() : __unit_unpack,
        __unit_extract.name() : __unit_extract,
        __unit_append.name() : __unit_append,
        __multi_pack.name() : __multi_pack,
        __multi_unit_append.name() : __multi_unit_append,
        __code_emission.name() : __code_emission,
        __skzkm_report_of_dropout.name() : __skzkm_report_of_dropout,
        __skzkm_register_end_packing.name() : __skzkm_register_end_packing,
        __skzkm_foreign_emission.name() : __skzkm_foreign_emission,
        __retail_sell_kkt.name() : __retail_sell_kkt,
        __skzkm_recipe.name() : __skzkm_recipe,
        __recipe_kkt.name() : __recipe_kkt,
        __skzkm_health_care.name() : __skzkm_health_care,
        __service_disposal_registrar.name() : __service_disposal_registrar
    })
    _AttributeMap.update({
        __version.name() : __version,
        __session_ui.name() : __session_ui,
        __original_id.name() : __original_id,
        __client_identifier.name() : __client_identifier
    })



documents = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'documents'), CTD_ANON_204, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 98, 1))
Namespace.addCategoryObject('elementBinding', documents.name().localName(), documents)



code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=code_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 10, 12)))

code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=code_emission, documentation='\u0414\u0430\u0442\u0430 \u044d\u043c\u0438\u0441\u0441\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 15, 12)))

code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'oms_id'), guid_type, scope=code_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0421\u0423\u0417', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 20, 12)))

code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'oms_order_id'), guid_type, scope=code_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043a\u0430\u0437\u0430 \u0421\u0423\u0417', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 25, 12)))

code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=code_emission, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 30, 12)))

code_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON, scope=code_emission, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 35, 12)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 20, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'oms_id')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'oms_order_id')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(code_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
code_emission._Automaton = _BuildAutomaton()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 41, 24)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 41, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10300-code_emission.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_()




skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=skzkm_report_of_dropout, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 11, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=skzkm_report_of_dropout, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 16, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'oms_id'), guid_type, scope=skzkm_report_of_dropout, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0421\u0423\u0417', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 21, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'oms_order_id'), guid_type, scope=skzkm_report_of_dropout, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043a\u0430\u0437\u0430 \u0421\u0423\u0417', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 26, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dropout_reason'), dropout_reason_type_enum, scope=skzkm_report_of_dropout, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 31, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_, scope=skzkm_report_of_dropout, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 36, 3)))

skzkm_report_of_dropout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=skzkm_report_of_dropout, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 54, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'oms_id')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'oms_order_id')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'dropout_reason')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_report_of_dropout._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 54, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_report_of_dropout._Automaton = _BuildAutomaton_2()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 42, 6)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 42, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10305-skzkm_report_of_dropout.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_3()




skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=skzkm_register_end_packing, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 10, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=skzkm_register_end_packing, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 15, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_type'), order_type_enum, scope=skzkm_register_end_packing, documentation='\u0422\u0438\u043f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 20, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), system_subject_type, scope=skzkm_register_end_packing, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 25, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=skzkm_register_end_packing, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 30, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=skzkm_register_end_packing, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 35, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=skzkm_register_end_packing, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 40, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_2, scope=skzkm_register_end_packing, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 45, 12)))

skzkm_register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=skzkm_register_end_packing, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 63, 12)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'order_type')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 40, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 45, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 63, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_register_end_packing._Automaton = _BuildAutomaton_4()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_2, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 51, 24)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 51, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10311-skzkm_register_end_packing.xsd', 51, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_5()




skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=skzkm_foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 11, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=skzkm_foreign_emission, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 16, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'packing_id'), system_subject_type, scope=skzkm_foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 21, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'control_id'), system_subject_type, scope=skzkm_foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 26, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=skzkm_foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 31, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=skzkm_foreign_emission, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 36, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=skzkm_foreign_emission, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 41, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=skzkm_foreign_emission, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 46, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_3, scope=skzkm_foreign_emission, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 51, 3)))

skzkm_foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=skzkm_foreign_emission, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 69, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 26, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 31, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'packing_id')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'control_id')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 51, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 69, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_foreign_emission._Automaton = _BuildAutomaton_6()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_3, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 57, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 57, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10319-skzkm_foreign_emission.xsd', 57, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_7()




retail_sell_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=retail_sell_kkt, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 11, 3)))

retail_sell_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_type, scope=retail_sell_kkt, documentation='\u0418\u041d\u041d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 16, 3)))

retail_sell_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sell_details'), CTD_ANON_4, scope=retail_sell_kkt, documentation='\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 21, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(retail_sell_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(retail_sell_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(retail_sell_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'sell_details')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
retail_sell_kkt._Automaton = _BuildAutomaton_8()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receipt'), CTD_ANON_5, scope=CTD_ANON_4, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0435\u043a\u043e\u0432, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 27, 6)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'receipt')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 27, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_9()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), receipt_type_enum, scope=CTD_ANON_5, documentation='\u0422\u0438\u043f \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 (3 - \u0447\u0435\u043a \u043f\u0440\u043e\u0434\u0430\u0436\u0438, 31 - \u0447\u0435\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438)', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 33, 9)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=CTD_ANON_5, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1012)', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 38, 9)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription'), CTD_ANON_6, scope=CTD_ANON_5, documentation='\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 43, 9)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'items'), CTD_ANON_7, scope=CTD_ANON_5, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0435\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 67, 9)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 43, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 33, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 38, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 43, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'items')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 67, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_10()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_6, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 49, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_series'), document_number_200_type, scope=CTD_ANON_6, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u0435\u043d)', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 54, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_6, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 59, 12)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 49, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 54, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 59, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 49, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_series')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 54, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 59, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_11()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'item'), CTD_ANON_8, scope=CTD_ANON_7, documentation='\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u043e\u0432\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 73, 12)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'item')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 73, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_12()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_8, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 79, 15)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_kkt_type, scope=CTD_ANON_8, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0441\u043a\u0438\u0434\u043e\u043a \u0438 \u043d\u0430\u0446\u0435\u043d\u043e\u043a (\u0442\u0435\u0433 1079)', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 84, 15)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_kkt_type, scope=CTD_ANON_8, documentation='\u0421\u0443\u043c\u043c\u0430 \u041d\u0414\u0421 (\u0442\u0435\u0433 1200)', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 89, 15)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'discount'), price_kkt_type, scope=CTD_ANON_8, documentation='\u0421\u0443\u043c\u043c\u0430 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0439 \u0441\u043a\u0438\u0434\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 94, 15)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_8, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 99, 15)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 94, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 99, 15))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 79, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 84, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 89, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'discount')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 94, 15))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/10511-retail_sell_kkt.xsd', 99, 15))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_13()




skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=skzkm_recipe, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 10, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=skzkm_recipe, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 15, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=skzkm_recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 20, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_series'), document_number_200_type, scope=skzkm_recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 25, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=skzkm_recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 30, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_9, scope=skzkm_recipe, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 35, 12)))

skzkm_recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=skzkm_recipe, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 60, 12)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_series')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 60, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_recipe._Automaton = _BuildAutomaton_14()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_10, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 41, 24)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 41, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_15()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 44, 36)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_10, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 45, 36)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 45, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 44, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/10521-skzkm_recipe.xsd', 45, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_16()




recipe_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=recipe_kkt, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 10, 12)))

recipe_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_type, scope=recipe_kkt, documentation='\u0418\u041d\u041d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1018)', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 15, 12)))

recipe_kkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recipe_details'), CTD_ANON_11, scope=recipe_kkt, documentation='\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0442\u043f\u0443\u0441\u043a\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 20, 12)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recipe_kkt._UseForTag(pyxb.namespace.ExpandedName(None, 'recipe_details')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recipe_kkt._Automaton = _BuildAutomaton_17()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receipt'), CTD_ANON_12, scope=CTD_ANON_11, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0435\u043a\u043e\u0432, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u043e\u0442\u043f\u0443\u0441\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 26, 24)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'receipt')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 26, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_18()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), receipt_type_enum, scope=CTD_ANON_12, documentation='\u0422\u0438\u043f \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 (3 - \u0447\u0435\u043a \u043f\u0440\u043e\u0434\u0430\u0436\u0438, 31 - \u0447\u0435\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438)', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 32, 36)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=CTD_ANON_12, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u0433 1012)', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 37, 36)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription'), CTD_ANON_13, scope=CTD_ANON_12, documentation='\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 42, 36)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'items'), CTD_ANON_14, scope=CTD_ANON_12, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0444\u0438\u0441\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0435\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 70, 36)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 42, 36))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 32, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 37, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 42, 36))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'items')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 70, 36))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_19()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_13, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 48, 48)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_series'), document_number_200_type, scope=CTD_ANON_13, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u0435\u043d)', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 53, 48)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_13, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 60, 48)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 48, 48))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 53, 48))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 60, 48))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 48, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_series')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 53, 48))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 60, 48))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_20()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'item'), CTD_ANON_15, scope=CTD_ANON_14, documentation='\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u043e\u0432\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 76, 48)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, 'item')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 76, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_21()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_15, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 82, 60)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_15, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 87, 60)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 87, 60))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 82, 60))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/10522-recipe_kkt.xsd', 87, 60))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_22()




skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=skzkm_health_care, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 10, 12)))

skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=skzkm_health_care, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 15, 12)))

skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=skzkm_health_care, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 20, 12)))

skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=skzkm_health_care, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 25, 12)))

skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_16, scope=skzkm_health_care, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 30, 12)))

skzkm_health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=skzkm_health_care, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 55, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 55, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_health_care._Automaton = _BuildAutomaton_23()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_17, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 36, 24)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 36, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 36, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_24()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 39, 36)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_17, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 40, 36)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 40, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 39, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/10531-skzkm_health_care.xsd', 40, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_25()




result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation'), string1000_type, scope=result, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 9, 12)))

result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_id'), string200_type, scope=result, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 18, 12)))

result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_result'), operation_result_type_enum, scope=result, documentation='\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 23, 12)))

result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_comment'), string1000_type, scope=result, documentation='\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 28, 12)))

result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warnings'), CTD_ANON_18, scope=result, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 33, 12)))

result._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'errors'), CTD_ANON_19, scope=result, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 47, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 18, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 28, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 33, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 47, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'operation')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_id')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_result')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 23, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_comment')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 28, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warnings')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 33, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(result._UseForTag(pyxb.namespace.ExpandedName(None, 'errors')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 47, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
result._Automaton = _BuildAutomaton_26()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warning'), string1000_type, scope=CTD_ANON_18, documentation='\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 39, 24)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warning')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 39, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_27()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_code'), string200_type, scope=CTD_ANON_19, documentation='\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 53, 24)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_desc'), string4000_type, scope=CTD_ANON_19, documentation='\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 58, 24)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object_id'), string128_type, scope=CTD_ANON_19, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 63, 24)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 63, 24))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'error_code')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 53, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'error_desc')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 58, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'object_id')), pyxb.utils.utility.Location('./xsd_v1.35/200-result.xsd', 63, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_28()




result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation'), string1000_type, scope=result_service, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 9, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_id'), string200_type, scope=result_service, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 14, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_result'), operation_result_type_enum, scope=result_service, documentation='\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 19, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_comment'), string1000_type, scope=result_service, documentation='\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 24, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warnings'), CTD_ANON_20, scope=result_service, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 29, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'errors'), CTD_ANON_21, scope=result_service, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 43, 12)))

result_service._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'success'), CTD_ANON_22, scope=result_service, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 67, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 29, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 43, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 67, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'operation')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_id')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_result')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_comment')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 24, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warnings')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 29, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'errors')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 43, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(result_service._UseForTag(pyxb.namespace.ExpandedName(None, 'success')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 67, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
result_service._Automaton = _BuildAutomaton_29()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warning'), string1000_type, scope=CTD_ANON_20, documentation='\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 35, 24)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warning')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 35, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_30()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_code'), string200_type, scope=CTD_ANON_21, documentation='\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 49, 24)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_desc'), string4000_type, scope=CTD_ANON_21, documentation='\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 54, 24)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object_id'), string128_type, scope=CTD_ANON_21, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 59, 24)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 59, 24))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'error_code')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 49, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'error_desc')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 54, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'object_id')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 59, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_31()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'success_desc'), string4000_type, scope=CTD_ANON_22, documentation='\u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0432\u0435\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 73, 24)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object_id'), string128_type, scope=CTD_ANON_22, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 78, 24)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object_info'), CTD_ANON_23, scope=CTD_ANON_22, documentation='\u0418\u041d\u041d \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 83, 24)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'success_desc')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 73, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'object_id')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 78, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'object_info')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 83, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_32()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn_ul'), inn_ul_type, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 89, 36)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn_fl'), inn_fl_type, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 90, 36)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'inn_ul')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 89, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'inn_fl')), pyxb.utils.utility.Location('./xsd_v1.35/201-result_service.xsd', 90, 36))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_33()




service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=service_disposal_registrar, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 10, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=service_disposal_registrar, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 15, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=service_disposal_registrar, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 20, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_series'), document_number_200_type, scope=service_disposal_registrar, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 25, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=service_disposal_registrar, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 30, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_24, scope=service_disposal_registrar, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 35, 12)))

service_disposal_registrar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_info'), skzkm_info_type, scope=service_disposal_registrar, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 60, 12)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_series')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(service_disposal_registrar._UseForTag(pyxb.namespace.ExpandedName(None, 'device_info')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 60, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
service_disposal_registrar._Automaton = _BuildAutomaton_34()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_25, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 41, 24)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 41, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_35()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 44, 36)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_25, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 45, 36)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 45, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 44, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/20521-service_disposal_registrar.xsd', 45, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_36()




query_kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=query_kiz_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 9, 12)))

query_kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=query_kiz_info, documentation='\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 15, 16)))

query_kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_down'), sscc_type, scope=query_kiz_info, documentation='\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)', location=pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 20, 16)))

query_kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_up'), sscc_type, scope=query_kiz_info, documentation='\u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 25, 16)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(query_kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(query_kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 15, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(query_kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_down')), pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 20, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(query_kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_up')), pyxb.utils.utility.Location('./xsd_v1.35/210-query_kiz_info.xsd', 25, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
query_kiz_info._Automaton = _BuildAutomaton_37()




kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result'), CTD_ANON_26, scope=kiz_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 9, 12)))

kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warnings'), CTD_ANON_27, scope=kiz_info, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 38, 12)))

kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), CTD_ANON_28, scope=kiz_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 53, 16)))

kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_down'), CTD_ANON_31, scope=kiz_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 120, 16)))

kiz_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_up'), CTD_ANON_36, scope=kiz_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 234, 16)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 38, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 52, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'result')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warnings')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 38, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 53, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_down')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 120, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(kiz_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_up')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 234, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
kiz_info._Automaton = _BuildAutomaton_38()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'found'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_26, documentation='\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 15, 24)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_26, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 24, 28)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_26, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 29, 28)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'found')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 15, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 24, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 29, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_39()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warning'), string1000_type, scope=CTD_ANON_27, documentation='\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 44, 24)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warning')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 44, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_40()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_sgtin'), CTD_ANON_29, scope=CTD_ANON_28, documentation='\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 59, 28)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_decision'), CTD_ANON_30, scope=CTD_ANON_28, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 93, 28)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 93, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'info_sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 59, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'info_decision')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 93, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_41()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), string200_type, scope=CTD_ANON_29, documentation='\u0441\u0442\u0430\u0442\u0443\u0441 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 65, 40)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_29, documentation='\u041a\u043e\u0434 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 70, 40)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_29, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 75, 40)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_29, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 80, 40)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=CTD_ANON_29, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 85, 40)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 70, 40))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 65, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 70, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 75, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 80, 40))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 85, 40))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_42()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'id_decision'), guid_type, scope=CTD_ANON_30, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 99, 40)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_30, documentation='\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 104, 40)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_30, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 109, 40)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'id_decision')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 99, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 104, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 109, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_43()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tree'), CTD_ANON_32, scope=CTD_ANON_31, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u0445', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 126, 28)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'tree')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 126, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_44()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_32, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 133, 44)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), CTD_ANON_33, scope=CTD_ANON_32, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 138, 44)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parent_sscc'), sscc_type, scope=CTD_ANON_32, documentation='\u041d\u043e\u043c\u0435\u0440 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 215, 40)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 215, 40))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 133, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 138, 44))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'parent_sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 215, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_45()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_sgtin'), CTD_ANON_34, scope=CTD_ANON_33, documentation='\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 144, 56)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_decision'), CTD_ANON_35, scope=CTD_ANON_33, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 186, 56)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 186, 56))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'info_sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 144, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'info_decision')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 186, 56))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_46()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_34, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 150, 68)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), string200_type, scope=CTD_ANON_34, documentation='\u0441\u0442\u0430\u0442\u0443\u0441 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 155, 68)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_34, documentation='\u041a\u043e\u0434 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 160, 68)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_34, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 167, 68)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_34, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 172, 68)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=CTD_ANON_34, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 178, 68)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 160, 68))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 150, 68))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 155, 68))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 160, 68))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 167, 68))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 172, 68))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 178, 68))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_47()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'id_decision'), guid_type, scope=CTD_ANON_35, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 192, 68)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_35, documentation='\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 197, 68)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_35, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 203, 68)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'id_decision')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 192, 68))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 197, 68))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 203, 68))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_48()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info'), CTD_ANON_37, scope=CTD_ANON_36, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430\u0445', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 240, 28)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, 'info')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 240, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_49()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_37, documentation='\u041d\u043e\u043c\u0435\u0440 \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 246, 40)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'level'), pyxb.binding.datatypes.int, scope=CTD_ANON_37, documentation='\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c', location=pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 251, 40)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 246, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'level')), pyxb.utils.utility.Location('./xsd_v1.35/211-kiz_info.xsd', 251, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_50()




edit_counterparty_list._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=edit_counterparty_list, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 10, 12)))

edit_counterparty_list._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edit_type'), edit_type_enum, scope=edit_counterparty_list, documentation='\u0412\u0438\u0434 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 15, 12)))

edit_counterparty_list._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty'), CTD_ANON_38, scope=edit_counterparty_list, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445/\u0443\u0434\u0430\u043b\u044f\u0435\u043c\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 20, 12)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(edit_counterparty_list._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(edit_counterparty_list._UseForTag(pyxb.namespace.ExpandedName(None, 'edit_type')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(edit_counterparty_list._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
edit_counterparty_list._Automaton = _BuildAutomaton_51()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), system_subject_type, scope=CTD_ANON_38, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 26, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_info'), CTD_ANON_39, scope=CTD_ANON_38, documentation='\u0418\u041d\u041d \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 31, 24)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150, metadata=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 25, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 26, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_info')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 31, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_52()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn_ul'), inn_ul_type, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 37, 36)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn_fl'), inn_fl_type, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 38, 36)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'inn_ul')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 37, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'inn_fl')), pyxb.utils.utility.Location('./xsd_v1.35/212-edit_counterparty_list.xsd', 38, 36))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_53()




booking_sscc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=booking_sscc, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 10, 12)))

booking_sscc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_type'), edit_type_enum, scope=booking_sscc, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 15, 12)))

booking_sscc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_40, scope=booking_sscc, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 20, 12)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(booking_sscc._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(booking_sscc._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_type')), pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(booking_sscc._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
booking_sscc._Automaton = _BuildAutomaton_54()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_40, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 26, 24)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=300, metadata=pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 26, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/213-booking_sscc.xsd', 26, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_55()




query_hierarchy_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=query_hierarchy_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 10, 3)))

query_hierarchy_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=query_hierarchy_info, documentation='SSCC, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 15, 3)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(query_hierarchy_info._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(query_hierarchy_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/220-query_hierarchy_info.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
query_hierarchy_info._Automaton = _BuildAutomaton_56()




hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=hierarchy_sgtin_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 10, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=hierarchy_sgtin_info, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 15, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), string200_type, scope=hierarchy_sgtin_info, documentation='\u0421\u0442\u0430\u0442\u0443\u0441 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 20, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=hierarchy_sgtin_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 25, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=hierarchy_sgtin_info, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 30, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=hierarchy_sgtin_info, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 35, 3)))

hierarchy_sgtin_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pause_decision_info'), CTD_ANON_41, scope=hierarchy_sgtin_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 40, 3)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 15, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 40, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 20, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 25, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 30, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 35, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_sgtin_info._UseForTag(pyxb.namespace.ExpandedName(None, 'pause_decision_info')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 40, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
hierarchy_sgtin_info._Automaton = _BuildAutomaton_57()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'id'), guid_type, scope=CTD_ANON_41, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 46, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'number'), document_number_200_type, scope=CTD_ANON_41, documentation='\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 51, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'date'), date_type, scope=CTD_ANON_41, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 56, 6)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'id')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 46, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'number')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 51, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'date')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 56, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_58()




hierarchy_sscc_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=hierarchy_sscc_info, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 71, 3)))

hierarchy_sscc_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'packing_date'), datetimeoffset, scope=hierarchy_sscc_info, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 76, 3)))

hierarchy_sscc_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'childs'), hierarchy_sscc_child, scope=hierarchy_sscc_info, location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 81, 3)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 81, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hierarchy_sscc_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 71, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(hierarchy_sscc_info._UseForTag(pyxb.namespace.ExpandedName(None, 'packing_date')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 76, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_sscc_info._UseForTag(pyxb.namespace.ExpandedName(None, 'childs')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 81, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
hierarchy_sscc_info._Automaton = _BuildAutomaton_59()




hierarchy_sscc_child._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin_info'), hierarchy_sgtin_info, scope=hierarchy_sscc_child, location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 89, 3)))

hierarchy_sscc_child._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_info'), hierarchy_sscc_info, scope=hierarchy_sscc_child, location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 90, 3)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 89, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 90, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_sscc_child._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin_info')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 89, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_sscc_child._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_info')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 90, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
hierarchy_sscc_child._Automaton = _BuildAutomaton_60()




hierarchy_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_up'), CTD_ANON_42, scope=hierarchy_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 99, 3)))

hierarchy_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_down'), CTD_ANON_43, scope=hierarchy_info, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e SSCC (\u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435)', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 109, 3)))

hierarchy_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warnings'), CTD_ANON_44, scope=hierarchy_info, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 119, 3)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 99, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 109, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 119, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_up')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 99, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_info._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_down')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 109, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(hierarchy_info._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warnings')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 119, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
hierarchy_info._Automaton = _BuildAutomaton_61()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_info'), hierarchy_sscc_info, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 105, 6)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_info')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_62()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_info'), hierarchy_sscc_info, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 115, 6)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_info')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 115, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_63()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_warning'), string1000_type, scope=CTD_ANON_44, documentation='\u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 125, 6)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_warning')), pyxb.utils.utility.Location('./xsd_v1.35/221-hierarchy_info.xsd', 125, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_64()




recall._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=recall, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 10, 12)))

recall._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=recall, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 15, 12)))

recall._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_id'), string200_type, scope=recall, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043e\u0442\u043c\u0435\u043d\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 20, 12)))

recall._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recall_action_id'), recall_type_enum, scope=recall, documentation='\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 25, 12)))

recall._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason'), string500_type, scope=recall, documentation='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043e\u0442\u0437\u044b\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 30, 12)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 30, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recall._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recall._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recall._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_id')), pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recall._UseForTag(pyxb.namespace.ExpandedName(None, 'recall_action_id')), pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recall._UseForTag(pyxb.namespace.ExpandedName(None, 'reason')), pyxb.utils.utility.Location('./xsd_v1.35/250-recall.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recall._Automaton = _BuildAutomaton_65()




refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=refusal_sender, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 10, 12)))

refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=refusal_sender, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 15, 12)))

refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_any_type, scope=refusal_sender, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 - \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 20, 12)))

refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason'), string1000_type, scope=refusal_sender, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 25, 12)))

refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=refusal_sender, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 30, 12)))

refusal_sender._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_45, scope=refusal_sender, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 35, 12)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 30, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'reason')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refusal_sender._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
refusal_sender._Automaton = _BuildAutomaton_66()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_45, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 41, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_45, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 46, 24)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/251-refusal_sender.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_67()




refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=refusal_receiver, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 10, 12)))

refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=refusal_receiver, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 15, 12)))

refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_any_type, scope=refusal_receiver, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 20, 12)))

refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason'), string1000_type, scope=refusal_receiver, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 25, 12)))

refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=refusal_receiver, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u0432 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 30, 12)))

refusal_receiver._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_46, scope=refusal_receiver, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 35, 12)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 30, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'reason')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refusal_receiver._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
refusal_receiver._Automaton = _BuildAutomaton_68()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_46, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 41, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_46, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 46, 24)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/252-refusal_receiver.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_69()




change_information._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=change_information, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 10, 12)))

change_information._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=change_information, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 15, 12)))

change_information._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), CTD_ANON_47, scope=change_information, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 20, 12)))

change_information._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_48, scope=change_information, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 54, 12)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_information._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_information._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_information._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(change_information._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 54, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
change_information._Automaton = _BuildAutomaton_70()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=CTD_ANON_47, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 26, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_47, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 31, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), system_subject_type, scope=CTD_ANON_47, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 36, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'packing_id'), system_subject_type, scope=CTD_ANON_47, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 41, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'control_id'), system_subject_type, scope=CTD_ANON_47, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 46, 24)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 26, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 31, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 36, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 41, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 46, 24))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 26, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 31, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 36, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'packing_id')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 41, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'control_id')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 46, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_71()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_48, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 60, 24)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 60, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/253-change_information.xsd', 60, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_72()




change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=change_property, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 11, 3)))

change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_id_type, scope=change_property, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 16, 3)))

change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=change_property, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 21, 3)))

change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'action_id_type'), action_id_type_enum, scope=change_property, documentation='\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 26, 3)))

change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_id'), string200_type, scope=change_property, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 31, 3)))

change_property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), CTD_ANON_49, scope=change_property, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 36, 3)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'action_id_type')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_id')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(change_property._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
change_property._Automaton = _BuildAutomaton_73()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_49, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 42, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_49, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 47, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=CTD_ANON_49, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 52, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=CTD_ANON_49, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 57, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=CTD_ANON_49, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 62, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_50, scope=CTD_ANON_49, documentation='\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 67, 6)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 42, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 47, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 52, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 57, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 62, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 52, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 57, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 62, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 67, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_74()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_51, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 73, 9)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 73, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 73, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_75()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_51, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 77, 13)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_52, scope=CTD_ANON_51, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 82, 13)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_51, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 126, 12)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_51, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 131, 12)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 126, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 131, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 126, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 131, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_76()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_52, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 88, 16)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_53, scope=CTD_ANON_52, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 93, 16)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 93, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_77()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_53, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 99, 19)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_53, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 104, 19)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_53, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 109, 19)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_53, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 114, 19)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 109, 19))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 114, 19))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 99, 19))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 104, 19))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 109, 19))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/254-change_property.xsd', 114, 19))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_78()




transfer_code_to_custom._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=transfer_code_to_custom, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 11, 3)))

transfer_code_to_custom._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=transfer_code_to_custom, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 16, 3)))

transfer_code_to_custom._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=transfer_code_to_custom, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 21, 3)))

transfer_code_to_custom._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=transfer_code_to_custom, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 26, 3)))

transfer_code_to_custom._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_54, scope=transfer_code_to_custom, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 31, 3)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(transfer_code_to_custom._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(transfer_code_to_custom._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(transfer_code_to_custom._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(transfer_code_to_custom._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transfer_code_to_custom._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transfer_code_to_custom._Automaton = _BuildAutomaton_79()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_54, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 37, 6)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=10000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 37, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/300-transfer_code_to_custom.xsd', 37, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_80()




register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=register_end_packing, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 10, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=register_end_packing, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 15, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_type'), order_type_enum, scope=register_end_packing, documentation='\u0422\u0438\u043f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 20, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), system_subject_type, scope=register_end_packing, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430)', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 25, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=register_end_packing, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 30, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=register_end_packing, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 35, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=register_end_packing, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 40, 12)))

register_end_packing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_55, scope=register_end_packing, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 45, 12)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'order_type')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 40, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(register_end_packing._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 45, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
register_end_packing._Automaton = _BuildAutomaton_81()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_55, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 51, 24)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 51, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/311-register_end_packing.xsd', 51, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_82()




register_product_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=register_product_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 11, 3)))

register_product_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=register_product_emission, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 16, 3)))

register_product_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'release_info'), release_info_type, scope=register_product_emission, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 21, 3)))

register_product_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_56, scope=register_product_emission, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 26, 3)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_product_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_product_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(register_product_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'release_info')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(register_product_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
register_product_emission._Automaton = _BuildAutomaton_83()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_56, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 32, 6)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_56, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 37, 6)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 31, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 32, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/313-register_product_emission.xsd', 37, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_84()




move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_to_release, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 10, 12)))

move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_id_type, scope=move_to_release, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 15, 12)))

move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_to_release, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 20, 12)))

move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_to_release, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 25, 12)))

move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_to_release, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 30, 12)))

move_to_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_57, scope=move_to_release, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 35, 12)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_to_release._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_to_release._Automaton = _BuildAutomaton_85()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_57, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 41, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_57, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 46, 24)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/314-move_to_release.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_86()




return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=return_contract_production, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 11, 3)))

return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=return_contract_production, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 16, 3)))

return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=return_contract_production, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 21, 3)))

return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=return_contract_production, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 26, 3)))

return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=return_contract_production, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 31, 3)))

return_contract_production._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_58, scope=return_contract_production, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 36, 3)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(return_contract_production._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
return_contract_production._Automaton = _BuildAutomaton_87()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_58, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 42, 6)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_58, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 47, 6)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/315-return_contract_production.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_88()




foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 10, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_emission, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 15, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'packing_id'), system_subject_type, scope=foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443/\u0444\u0430\u0441\u043e\u0432\u043a\u0443 \u0432\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u0443\u044e (\u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 20, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'control_id'), system_subject_type, scope=foreign_emission, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 25, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=foreign_emission, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 30, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'expiration_date'), date_type, scope=foreign_emission, documentation='\u0421\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 35, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=foreign_emission, documentation='\u041a\u043e\u0434 GTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 40, 12)))

foreign_emission._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_59, scope=foreign_emission, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 45, 12)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'packing_id')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'control_id')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'expiration_date')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 40, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_emission._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 45, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_emission._Automaton = _BuildAutomaton_89()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_59, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 51, 24)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=150000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 51, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/321-foreign_emission.xsd', 51, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_90()




foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 10, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=foreign_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 15, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=foreign_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 20, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=foreign_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 25, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_shipment, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 30, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_, scope=foreign_shipment, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 35, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=foreign_shipment, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 48, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=foreign_shipment, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 53, 12)))

foreign_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_60, scope=foreign_shipment, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 58, 12)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 15, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 48, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 53, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 58, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_shipment._Automaton = _BuildAutomaton_91()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_60, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 64, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_60, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 69, 24)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 63, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 64, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/331-foreign_shipment.xsd', 69, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_92()




foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 10, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=foreign_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 15, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), system_subject_type, scope=foreign_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 20, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=foreign_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 25, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_import, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 30, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_2, scope=foreign_import, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 35, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=foreign_import, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 48, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=foreign_import, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 53, 12)))

foreign_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_61, scope=foreign_import, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 58, 12)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 15, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 48, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 53, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_import._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 58, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_import._Automaton = _BuildAutomaton_93()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_61, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 64, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_61, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 69, 24)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 63, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 64, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/332-foreign_import.xsd', 69, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_94()




foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_import_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 11, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=foreign_import_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 16, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=foreign_import_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 21, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_import_owner, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 26, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_3, scope=foreign_import_owner, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 31, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=foreign_import_owner, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 42, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=foreign_import_owner, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 47, 3)))

foreign_import_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_62, scope=foreign_import_owner, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 52, 3)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 42, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 47, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_import_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 52, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_import_owner._Automaton = _BuildAutomaton_95()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_62, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 58, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_62, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 63, 6)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 57, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 58, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/333-foreign_import_owner.xsd', 63, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_96()




custom_move._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=custom_move, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 9, 12)))

custom_move._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_shipper_id'), system_subject_type, scope=custom_move, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 14, 12)))

custom_move._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=custom_move, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 19, 12)))

custom_move._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=custom_move, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 24, 12)))

custom_move._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_63, scope=custom_move, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 29, 12)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(custom_move._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(custom_move._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(custom_move._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(custom_move._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 24, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(custom_move._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 29, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
custom_move._Automaton = _BuildAutomaton_97()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_63, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 35, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_63, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 40, 24)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 34, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 35, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/334-custom_move.xsd', 40, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_98()




fts_data._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=fts_data, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 11, 3)))

fts_data._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=fts_data, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 16, 3)))

fts_data._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fts_info'), fts_gtd_info_type, scope=fts_data, documentation='\u0421\u043e\u0441\u0442\u0430\u0432 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u0434\u0430\u0447\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 21, 3)))

fts_data._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_procedure_code'), custom_procedure_code_enum, scope=fts_data, documentation='\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 26, 3)))

fts_data._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_64, scope=fts_data, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 31, 3)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_data._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_data._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_data._UseForTag(pyxb.namespace.ExpandedName(None, 'fts_info')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_data._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_procedure_code')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fts_data._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fts_data._Automaton = _BuildAutomaton_99()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_65, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 37, 6)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 37, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 37, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_100()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_65, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 41, 10)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_66, scope=CTD_ANON_65, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 46, 10)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'customs_value'), price_type, scope=CTD_ANON_65, documentation='\u0422\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 90, 9)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confnum_info'), confnum_info_type, scope=CTD_ANON_65, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 ', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 95, 9)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 95, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 41, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 46, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'customs_value')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 90, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'confnum_info')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 95, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_101()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_66, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 52, 13)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_67, scope=CTD_ANON_66, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 57, 13)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 57, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 52, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 57, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_102()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_67, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 63, 16)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_67, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 68, 16)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'customs_value'), price_type, scope=CTD_ANON_67, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 73, 16)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confnum_info'), confnum_info_type, scope=CTD_ANON_67, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 ', location=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 78, 16)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 78, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 63, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 68, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, 'customs_value')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 73, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, 'confnum_info')), pyxb.utils.utility.Location('./xsd_v1.35/335-fts_data.xsd', 78, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_103()




import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=import_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 11, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=import_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 16, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=import_info, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 21, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=import_info, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 26, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_4, scope=import_info, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 31, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=import_info, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 44, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=import_info, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 49, 3)))

import_info._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_68, scope=import_info, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 54, 3)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(import_info._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
import_info._Automaton = _BuildAutomaton_104()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_68, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 60, 6)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_68, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 65, 6)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 59, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/336-import_info.xsd', 65, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_105()




receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_importer, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 11, 3)))

receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_shipper_id'), system_subject_type, scope=receive_importer, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 16, 3)))

receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_importer, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 21, 3)))

receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=receive_importer, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 26, 3)))

receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=receive_importer, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 31, 3)))

receive_importer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_69, scope=receive_importer, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 36, 3)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_importer._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_importer._Automaton = _BuildAutomaton_106()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_70, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 42, 6)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 42, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_107()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_70, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 46, 10)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_71, scope=CTD_ANON_70, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 51, 10)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost_taxes'), price_type, scope=CTD_ANON_70, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0441\u0431\u043e\u0440\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 95, 9)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_70, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 100, 9)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 46, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 51, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'cost_taxes')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 95, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 100, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_108()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_71, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 57, 13)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_72, scope=CTD_ANON_71, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 62, 13)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 62, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 57, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 62, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_109()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_72, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 68, 16)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_72, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 73, 16)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost_taxes'), price_type, scope=CTD_ANON_72, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u041b\u041f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0441\u0431\u043e\u0440\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 78, 16)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_72, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 83, 16)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 68, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 73, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'cost_taxes')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 78, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/341-receive_importer.xsd', 83, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_110()




release_in_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=release_in_circulation, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 11, 3)))

release_in_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=release_in_circulation, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 16, 3)))

release_in_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'release_info'), release_info_type, scope=release_in_circulation, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 21, 3)))

release_in_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'signs'), CTD_ANON_73, scope=release_in_circulation, documentation='\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 26, 3)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(release_in_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(release_in_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(release_in_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'release_info')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(release_in_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'signs')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
release_in_circulation._Automaton = _BuildAutomaton_111()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_73, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 32, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_73, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 37, 6)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 31, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 32, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/342-release_in_circulation.xsd', 37, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_112()




change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=change_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 10, 12)))

change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=change_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 15, 12)))

change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=change_owner, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 20, 12)))

change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=change_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 25, 12)))

change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=change_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 30, 12)))

change_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_74, scope=change_owner, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 35, 12)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(change_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
change_owner._Automaton = _BuildAutomaton_113()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_74, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 41, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_74, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 46, 24)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/351-change_owner.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_114()




eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=eeu_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 11, 3)))

eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_owner, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 16, 3)))

eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_5, scope=eeu_owner, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 21, 3)))

eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=eeu_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 31, 3)))

eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=eeu_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 36, 3)))

eeu_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_75, scope=eeu_owner, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 41, 3)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 31, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 36, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 41, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_owner._Automaton = _BuildAutomaton_115()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_75, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 47, 6)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_75, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 52, 6)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/360-eeu_owner.xsd', 52, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_116()




eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=eeu_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 11, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=eeu_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 16, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=eeu_shipment, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 21, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_shipment, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 26, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_6, scope=eeu_shipment, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 31, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=eeu_shipment, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 44, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=eeu_shipment, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 49, 3)))

eeu_shipment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_76, scope=eeu_shipment, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 54, 3)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_shipment._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_shipment._Automaton = _BuildAutomaton_117()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_77, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 60, 6)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_118()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_77, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 64, 10)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_78, scope=CTD_ANON_77, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 69, 10)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_77, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 113, 9)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_77, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 118, 9)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 64, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 69, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 113, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 118, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_119()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_78, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 75, 13)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_79, scope=CTD_ANON_78, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 80, 13)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 80, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 75, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 80, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_120()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_79, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 86, 16)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_79, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 91, 16)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_79, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 96, 16)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_79, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 101, 16)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 86, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 91, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 96, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/361-eeu_shipment.xsd', 101, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_121()




eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=eeu_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 11, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=eeu_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 16, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_import, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 21, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), system_subject_type, scope=eeu_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 26, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_7, scope=eeu_import, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 31, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=eeu_import, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 44, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=eeu_import, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 49, 3)))

eeu_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_80, scope=eeu_import, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 54, 3)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_import._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_import._Automaton = _BuildAutomaton_122()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_81, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 60, 6)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_123()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_81, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 64, 10)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_82, scope=CTD_ANON_81, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 69, 10)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_81, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 113, 9)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_81, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 118, 9)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 64, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 69, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 113, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 118, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_124()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_82, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 75, 13)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_83, scope=CTD_ANON_82, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 80, 13)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 80, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 75, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 80, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_125()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_83, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 86, 16)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_83, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 91, 16)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_83, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 96, 16)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_83, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 101, 16)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 86, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 91, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 96, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/362-eeu_import.xsd', 101, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_126()




eeu_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=eeu_release, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 11, 3)))

eeu_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_release, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 16, 3)))

eeu_release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_84, scope=eeu_release, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0439 \u0432\u0432\u043e\u0434\u0443 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 21, 3)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_release._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_release._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_release._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_release._Automaton = _BuildAutomaton_127()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_85, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 27, 6)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 27, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 27, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_128()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_85, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 31, 10)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_86, scope=CTD_ANON_85, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 36, 10)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'release_info'), release_info_type, scope=CTD_ANON_85, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 75, 9)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 31, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 36, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(None, 'release_info')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 75, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_129()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_86, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 42, 13)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_87, scope=CTD_ANON_86, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u0434\u043b\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 47, 13)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 47, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 42, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 47, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_130()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_87, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 53, 16)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_87, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 58, 16)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'release_info'), release_info_type, scope=CTD_ANON_87, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 63, 16)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 53, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 58, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(None, 'release_info')), pyxb.utils.utility.Location('./xsd_v1.35/363-eeu_release.xsd', 63, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_131()




move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 10, 12)))

move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_id_type, scope=move_owner, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 15, 12)))

move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_owner, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 20, 12)))

move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 25, 12)))

move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_owner, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 30, 12)))

move_owner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_88, scope=move_owner, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 35, 12)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_owner._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_owner._Automaton = _BuildAutomaton_132()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_88, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 41, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_88, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 46, 24)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/381-move_owner.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_133()




return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=return_to_circulation, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 11, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=return_to_circulation, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 16, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'withdrawal_reason'), withdrawal_reason_enum, scope=return_to_circulation, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 21, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=return_to_circulation, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 26, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=return_to_circulation, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 31, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason_return'), reason_return_type_enum, scope=return_to_circulation, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 36, 3)))

return_to_circulation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_89, scope=return_to_circulation, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 41, 3)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 26, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 31, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 36, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'withdrawal_reason')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'reason_return')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(return_to_circulation._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
return_to_circulation._Automaton = _BuildAutomaton_134()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_89, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 47, 6)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/391-return_to_circulation.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_135()




move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 11, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 16, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_order, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 21, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 26, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 31, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'turnover_type'), turnover_type_enum, scope=move_order, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 36, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=move_order, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 41, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=move_order, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 46, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=move_order, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 51, 3)))

move_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_90, scope=move_order, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 56, 3)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 51, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'turnover_type')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 51, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_order._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 56, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_order._Automaton = _BuildAutomaton_136()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_91, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 62, 6)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_137()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_91, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 66, 10)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_92, scope=CTD_ANON_91, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 71, 10)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_91, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 115, 9)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_91, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 120, 9)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 66, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 71, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 115, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 120, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_138()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_92, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 77, 13)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_93, scope=CTD_ANON_92, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 82, 13)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 82, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_139()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_93, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 88, 16)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_93, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 93, 16)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_93, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 98, 16)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_93, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 103, 16)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 98, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/415-move_order.xsd', 103, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_140()




receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 11, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_id_type, scope=receive_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 16, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_order, documentation='\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 21, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=receive_order, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 26, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=receive_order, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 31, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_type'), receive_type_enum, scope=receive_order, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 36, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=receive_order, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 41, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=receive_order, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 46, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=receive_order, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 51, 3)))

receive_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_94, scope=receive_order, documentation='\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 56, 3)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 51, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_type')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 51, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_order._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 56, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_order._Automaton = _BuildAutomaton_141()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_95, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 62, 6)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_142()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_95, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 66, 10)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_96, scope=CTD_ANON_95, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 71, 10)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_95, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 115, 9)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_95, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 120, 9)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 66, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 71, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 115, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 120, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_143()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_96, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 77, 13)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_97, scope=CTD_ANON_96, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 82, 13)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 82, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_144()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_97, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 88, 16)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_97, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 93, 16)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_97, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 98, 16)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_97, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 103, 16)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 98, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/416-receive_order.xsd', 103, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_145()




move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_return, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 11, 3)))

move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_return, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 16, 3)))

move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_return, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 21, 3)))

move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_return, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 26, 3)))

move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_return, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 31, 3)))

move_return._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_98, scope=move_return, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 36, 3)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_return._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_return._Automaton = _BuildAutomaton_146()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_98, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 42, 6)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_98, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 47, 6)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/417-move_return.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_147()




move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_place, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 10, 12)))

move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_place, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 15, 12)))

move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_place, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 20, 12)))

move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_place, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 25, 12)))

move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_place, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 30, 12)))

move_place._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_99, scope=move_place, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 35, 12)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_place._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_place._Automaton = _BuildAutomaton_148()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_99, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 41, 24)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_99, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 46, 24)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/431-move_place.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_149()




move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_unregistered_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 11, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_unregistered_order, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 16, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_info'), CTD_ANON_100, scope=move_unregistered_order, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 21, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=move_unregistered_order, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 59, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_unregistered_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 64, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_unregistered_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 69, 3)))

move_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_104, scope=move_unregistered_order, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 74, 3)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_info')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 59, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 64, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 69, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 74, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_unregistered_order._Automaton = _BuildAutomaton_150()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_inn'), CTD_ANON_101, scope=CTD_ANON_100, documentation='\u0418\u041d\u041d/\u041a\u041f\u041f \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 27, 6)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=CTD_ANON_100, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 51, 6)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_inn')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 27, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 51, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_151()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ul'), CTD_ANON_102, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 33, 9)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fl'), CTD_ANON_103, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 41, 9)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(None, 'ul')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 33, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(None, 'fl')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 41, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_152()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_ul_type, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 36, 12)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kpp'), kpp_type, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 37, 12)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 36, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(None, 'kpp')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 37, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_153()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_fl_type, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 44, 12)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 44, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_154()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_105, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 80, 6)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 80, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 80, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_155()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_105, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 84, 10)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_106, scope=CTD_ANON_105, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 89, 10)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_105, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 133, 9)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_105, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 138, 9)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 84, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 89, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 133, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 138, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_156()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_106, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 95, 13)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_107, scope=CTD_ANON_106, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 100, 13)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 100, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 95, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 100, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_157()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_107, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 106, 16)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_107, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 111, 16)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_107, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 116, 16)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_107, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 121, 16)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 106, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 111, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 116, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/441-move_unregistered_order.xsd', 121, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_158()




receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_unregistered_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 10, 12)))

receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_id_type, scope=receive_unregistered_order, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 15, 12)))

receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_unregistered_order, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 20, 12)))

receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=receive_unregistered_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 25, 12)))

receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=receive_unregistered_order, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 30, 12)))

receive_unregistered_order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_108, scope=receive_unregistered_order, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 35, 12)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_order._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_unregistered_order._Automaton = _BuildAutomaton_159()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_108, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 41, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_108, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 46, 24)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/442-receive_unregistered_order.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_160()




move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_eeu, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 11, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_eeu, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 16, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_org_eeu'), info_org_eeu_type, scope=move_eeu, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b (\u0418\u0422\u0418\u041d/\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b) \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 21, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_eeu, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 26, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_eeu, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 31, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=move_eeu, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 36, 3)))

move_eeu._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_109, scope=move_eeu, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 41, 3)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'info_org_eeu')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_eeu._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_eeu._Automaton = _BuildAutomaton_161()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_110, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 47, 6)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 47, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_162()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_110, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 51, 10)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_111, scope=CTD_ANON_110, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 56, 10)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_110, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 100, 9)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_110, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 105, 9)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 51, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 56, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 100, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 105, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_163()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_111, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 62, 13)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_112, scope=CTD_ANON_111, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 67, 13)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 67, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 62, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 67, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_164()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_112, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 73, 16)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_112, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 78, 16)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_112, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 83, 16)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_112, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 88, 16)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 73, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 78, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 83, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/461-move_eeu.xsd', 88, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_165()




move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_state_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 11, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_state_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 16, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_state_dispatch, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 21, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_state_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 26, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_state_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 31, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), STD_ANON_8, scope=move_state_dispatch, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 36, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=move_state_dispatch, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 47, 3)))

move_state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_113, scope=move_state_dispatch, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 52, 3)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 47, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 52, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_state_dispatch._Automaton = _BuildAutomaton_166()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_114, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 58, 6)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 58, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 58, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_167()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_114, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 62, 10)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_115, scope=CTD_ANON_114, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 67, 10)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_114, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 111, 9)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_114, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 116, 9)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 62, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 67, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 111, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 116, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_168()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_115, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 73, 13)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_116, scope=CTD_ANON_115, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 78, 13)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 78, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 73, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 78, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_169()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_116, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 84, 16)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_116, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 89, 16)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_116, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 94, 16)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_116, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 99, 16)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 84, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 89, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 94, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/470-move_state_dispatch.xsd', 99, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_170()




state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=state_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 11, 3)))

state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=state_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 16, 3)))

state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=state_dispatch, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 21, 3)))

state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=state_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 26, 3)))

state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=state_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 31, 3)))

state_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_117, scope=state_dispatch, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 36, 3)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(state_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
state_dispatch._Automaton = _BuildAutomaton_171()




CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_117, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 42, 6)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_117, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 47, 6)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/471-state_dispatch.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_117._Automaton = _BuildAutomaton_172()




agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=agent_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 11, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=agent_dispatch, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 16, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=agent_dispatch, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 21, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'turnover_type'), turnover_type_enum, scope=agent_dispatch, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 26, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=agent_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 31, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=agent_dispatch, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 36, 3)))

agent_dispatch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_118, scope=agent_dispatch, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 41, 3)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 26, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'turnover_type')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(agent_dispatch._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
agent_dispatch._Automaton = _BuildAutomaton_173()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_118, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 47, 6)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_118, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 52, 6)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/472-agent_dispatch.xsd', 52, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_174()




arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=arbitration, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 11, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_id_type, scope=arbitration, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 16, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=arbitration, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 21, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=arbitration, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 26, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=arbitration, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 31, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sign_arbitration'), edit_type_enum, scope=arbitration, documentation='\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 36, 3)))

arbitration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_119, scope=arbitration, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 41, 3)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'sign_arbitration')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(arbitration._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
arbitration._Automaton = _BuildAutomaton_175()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_119, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 47, 6)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_119, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 52, 6)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/481-arbitration.xsd', 52, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_176()




retail_sale._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=retail_sale, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 11, 3)))

retail_sale._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=retail_sale, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 16, 3)))

retail_sale._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sales'), CTD_ANON_120, scope=retail_sale, documentation='\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 21, 3)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(retail_sale._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(retail_sale._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(retail_sale._UseForTag(pyxb.namespace.ExpandedName(None, 'sales')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
retail_sale._Automaton = _BuildAutomaton_177()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_121, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 27, 6)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 27, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 27, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_178()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_122, scope=CTD_ANON_121, documentation='\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 30, 9)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sale_docs'), CTD_ANON_123, scope=CTD_ANON_121, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 68, 9)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=1000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 30, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 30, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(None, 'sale_docs')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 68, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_179()




CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_122, documentation='\u041d\u043e\u043c\u0435\u0440\xa0SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 36, 12)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_122, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 41, 12)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_122, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 46, 12)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_122, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 51, 12)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'discount'), price_type, scope=CTD_ANON_122, documentation='\u0421\u0443\u043c\u043c\u0430 \u0441\u043a\u0438\u0434\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 56, 12)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 51, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 56, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 36, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 41, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 46, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 51, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(None, 'discount')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 56, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_122._Automaton = _BuildAutomaton_180()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_type'), sale_doc_type_enum, scope=CTD_ANON_123, documentation='\u0412\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (1 - \u0447\u0435\u043a, 2 - \u0431\u043b\u0430\u043d\u043a \u0441\u0442\u0440\u043e\u0433\u043e\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 (\u0411\u0421\u041e), 3 - \u0434\u043e\u0433\u043e\u0432\u043e\u0440, 4 - \u043f\u0440\u043e\u0447\u0435\u0435)\n                                                                    ', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 74, 12)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_name'), string200_type, scope=CTD_ANON_123, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0432\u0438\u0434\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c "\u043f\u0440\u043e\u0447\u0435\u0435")\n                                                                    ', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 80, 12)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_number'), string200_type, scope=CTD_ANON_123, documentation='\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 (\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f "\u0431/\u043d")', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 86, 12)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_123, documentation='\u0414\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 91, 12)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription'), CTD_ANON_124, scope=CTD_ANON_123, documentation='\u041b\u044c\u0433\u043e\u0442\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043f\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 96, 12)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 80, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 96, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_type')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 74, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_name')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 80, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_number')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 86, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 91, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 96, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_181()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription_num'), document_number_200_type, scope=CTD_ANON_124, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 102, 15)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription_date'), date_type, scope=CTD_ANON_124, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 108, 15)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prescription_series'), document_number_200_type, scope=CTD_ANON_124, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430\n                                                        ', location=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 114, 15)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 114, 15))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription_num')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 102, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription_date')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 108, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(None, 'prescription_series')), pyxb.utils.utility.Location('./xsd_v1.35/511-retail_sale.xsd', 114, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_182()




recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=recipe, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 10, 12)))

recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=recipe, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 15, 12)))

recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 20, 12)))

recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_series'), document_number_200_type, scope=recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u0440\u0438\u0438 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 25, 12)))

recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=recipe, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0446\u0435\u043f\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 30, 12)))

recipe._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_125, scope=recipe, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 35, 12)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_series')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recipe._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recipe._Automaton = _BuildAutomaton_183()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_126, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 41, 24)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 41, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_184()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 44, 36)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_126, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 45, 36)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 45, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 44, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/521-recipe.xsd', 45, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_185()




health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=health_care, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 10, 12)))

health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=health_care, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 15, 12)))

health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=health_care, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 20, 12)))

health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=health_care, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 25, 12)))

health_care._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_127, scope=health_care, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 30, 12)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(health_care._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
health_care._Automaton = _BuildAutomaton_186()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_128, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 36, 24)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 36, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 36, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_187()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 39, 36)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sold_part'), part_type, scope=CTD_ANON_128, documentation='\u0414\u043e\u043b\u044f \u043e\u0442 \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 40, 36)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 40, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 39, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(None, 'sold_part')), pyxb.utils.utility.Location('./xsd_v1.35/531-health_care.xsd', 40, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_188()




move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_destruction, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 11, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_destruction, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 16, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destruction_org'), org_address_type, scope=move_destruction, documentation='\u0418\u041d\u041d/\u041a\u041f\u041f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 21, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 26, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 31, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'act_number'), document_number_200_type, scope=move_destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 36, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'act_date'), date_type, scope=move_destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 41, 3)))

move_destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_129, scope=move_destruction, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 46, 3)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'destruction_org')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'act_number')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'act_date')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_destruction._Automaton = _BuildAutomaton_189()




CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_130, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 52, 6)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 52, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_129._Automaton = _BuildAutomaton_190()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_130, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 56, 10)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_130, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 61, 10)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'decision'), document_number_200_type, scope=CTD_ANON_130, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0420\u043e\u0441\u0437\u0434\u0440\u0430\u0432\u043d\u0430\u0434\u0437\u043e\u0440\u0430 \u043e \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430. \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0420\u043e\u0441\u0437\u0434\u0440\u0430\u0432\u043d\u0430\u0434\u0437\u043e\u0440\u0430.', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 67, 9)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destruction_type'), destruction_type_enum, scope=CTD_ANON_130, documentation='\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 72, 9)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason_for_destruction'), reason_for_destruction_type_enum, scope=CTD_ANON_130, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 77, 9)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 67, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 77, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 56, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 61, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(None, 'decision')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 67, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(None, 'destruction_type')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 72, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(None, 'reason_for_destruction')), pyxb.utils.utility.Location('./xsd_v1.35/541-move_destruction.xsd', 77, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_191()




destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=destruction, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 10, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=destruction, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 15, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destruction_method'), destruction_method_enum, scope=destruction, documentation='\u0421\u043f\u043e\u0441\u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 20, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destruction_org'), CTD_ANON_131, scope=destruction, documentation='\u0418\u041d\u041d/\u041a\u041f\u041f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 25, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 49, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=destruction, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0430\u043a\u0442\u0430 \u043e\u0431 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 54, 12)))

destruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_134, scope=destruction, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 59, 12)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'destruction_method')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'destruction_org')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 49, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 54, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(destruction._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 59, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
destruction._Automaton = _BuildAutomaton_192()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ul'), CTD_ANON_132, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 31, 24)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fl'), CTD_ANON_133, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 39, 24)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(None, 'ul')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 31, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(None, 'fl')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 39, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_193()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_ul_type, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 34, 36)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kpp'), kpp_type, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 35, 36)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 34, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(None, 'kpp')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 35, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_194()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_fl_type, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 42, 36)))

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 42, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_195()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_134, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 65, 24)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_134, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 70, 24)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 64, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 65, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/542-destruction.xsd', 70, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_196()




withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=withdrawal, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 11, 3)))

withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=withdrawal, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 16, 3)))

withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=withdrawal, documentation='\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 21, 3)))

withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=withdrawal, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 26, 3)))

withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'withdrawal_type'), withdrawal_type_enum, scope=withdrawal, documentation='\u0422\u0438\u043f \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 31, 3)))

withdrawal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_135, scope=withdrawal, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 36, 3)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 21, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 26, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'withdrawal_type')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(withdrawal._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
withdrawal._Automaton = _BuildAutomaton_197()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_135, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 42, 6)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_135, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 47, 6)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/552-withdrawal.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_198()




move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_order_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 11, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_order_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 16, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_order_notification, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 21, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_order_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 26, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_order_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 31, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'turnover_type'), turnover_type_enum, scope=move_order_notification, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 36, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=move_order_notification, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 41, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=move_order_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 46, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=move_order_notification, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 51, 3)))

move_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_136, scope=move_order_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 56, 3)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 51, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'turnover_type')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 51, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 56, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_order_notification._Automaton = _BuildAutomaton_199()




CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_137, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 62, 6)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_200()




CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_137, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 66, 10)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_138, scope=CTD_ANON_137, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 71, 10)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_137, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 115, 9)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_137, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 120, 9)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 66, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 71, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 115, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 120, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_137._Automaton = _BuildAutomaton_201()




CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_138, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 77, 13)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_139, scope=CTD_ANON_138, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 82, 13)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 82, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_138._Automaton = _BuildAutomaton_202()




CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_139, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 88, 16)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_139, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 93, 16)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_139, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 98, 16)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_139, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 103, 16)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 98, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/601-move_order_notification.xsd', 103, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_139._Automaton = _BuildAutomaton_203()




receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_order_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 11, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_id_type, scope=receive_order_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 16, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_order_notification, documentation='\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 21, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=receive_order_notification, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 26, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=receive_order_notification, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 31, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_type'), receive_type_enum, scope=receive_order_notification, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 36, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=receive_order_notification, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 41, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=receive_order_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 46, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=receive_order_notification, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 51, 3)))

receive_order_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_140, scope=receive_order_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 56, 3)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 51, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_type')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 46, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 51, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_order_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 56, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_order_notification._Automaton = _BuildAutomaton_204()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_141, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 62, 6)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_205()




CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_141, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 66, 10)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_142, scope=CTD_ANON_141, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 71, 10)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_141, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u044c\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 115, 9)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_141, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 120, 9)))

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 66, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 71, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 115, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 120, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_141._Automaton = _BuildAutomaton_206()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_142, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 77, 13)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_143, scope=CTD_ANON_142, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 82, 13)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 82, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_207()




CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_143, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 88, 16)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_143, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 93, 16)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_143, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 98, 16)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_143, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 103, 16)))

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 98, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/602-receive_order_notification.xsd', 103, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_143._Automaton = _BuildAutomaton_208()




move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_owner_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 10, 12)))

move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_id_type, scope=move_owner_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 15, 12)))

move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_owner_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 20, 12)))

move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_owner_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 25, 12)))

move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_owner_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 30, 12)))

move_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_144, scope=move_owner_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 35, 12)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_owner_notification._Automaton = _BuildAutomaton_209()




CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_144, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 41, 24)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_144, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 46, 24)))

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/603-move_owner_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_144._Automaton = _BuildAutomaton_210()




refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=refusal_sender_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 10, 12)))

refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=refusal_sender_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 15, 12)))

refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_any_type, scope=refusal_sender_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 - \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 20, 12)))

refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason'), string1000_type, scope=refusal_sender_notification, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 25, 12)))

refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=refusal_sender_notification, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 30, 12)))

refusal_sender_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_145, scope=refusal_sender_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 35, 12)))

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 30, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'reason')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refusal_sender_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
refusal_sender_notification._Automaton = _BuildAutomaton_211()




CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_145, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 41, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_145, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 46, 24)))

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/605-refusal_sender_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_145._Automaton = _BuildAutomaton_212()




refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=refusal_receiver_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 10, 12)))

refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=refusal_receiver_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 15, 12)))

refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_any_type, scope=refusal_receiver_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 20, 12)))

refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reason'), string1000_type, scope=refusal_receiver_notification, documentation='\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043a\u0430\u0437\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 25, 12)))

refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=refusal_receiver_notification, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u0432 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 30, 12)))

refusal_receiver_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_146, scope=refusal_receiver_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 35, 12)))

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 30, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'reason')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refusal_receiver_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
refusal_receiver_notification._Automaton = _BuildAutomaton_213()




CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_146, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 41, 24)))

CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_146, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 46, 24)))

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/606-refusal_receiver_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_146._Automaton = _BuildAutomaton_214()




accept_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=accept_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 10, 12)))

accept_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_any_type, scope=accept_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 15, 12)))

accept_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=accept_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 20, 12)))

accept_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=accept_notification, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 25, 12)))

accept_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_147, scope=accept_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 30, 12)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accept_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accept_notification._Automaton = _BuildAutomaton_215()




CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_147, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 36, 24)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_147, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 41, 24)))

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 35, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 36, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/607-accept_notification.xsd', 41, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_147._Automaton = _BuildAutomaton_216()




change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=change_owner_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 10, 12)))

change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=change_owner_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 15, 12)))

change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=change_owner_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 20, 12)))

change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=change_owner_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 25, 12)))

change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=change_owner_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 30, 12)))

change_owner_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_148, scope=change_owner_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 35, 12)))

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(change_owner_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
change_owner_notification._Automaton = _BuildAutomaton_217()




CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_148, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 41, 24)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_148, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 46, 24)))

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/609-change_owner_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_148._Automaton = _BuildAutomaton_218()




move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_return_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 10, 3)))

move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=move_return_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 15, 3)))

move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_return_notification, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 20, 3)))

move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_return_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 25, 3)))

move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_return_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 30, 3)))

move_return_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_149, scope=move_return_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 35, 3)))

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 20, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 25, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 30, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_return_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 35, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_return_notification._Automaton = _BuildAutomaton_219()




CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_149, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 41, 6)))

CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_149, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 46, 6)))

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 40, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 41, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/610-move_return_notification.xsd', 46, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_149._Automaton = _BuildAutomaton_220()




receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_unregistered_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 10, 12)))

receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_id_type, scope=receive_unregistered_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 15, 12)))

receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_unregistered_notification, documentation='\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 20, 12)))

receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=receive_unregistered_notification, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 25, 12)))

receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=receive_unregistered_notification, documentation='\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 30, 12)))

receive_unregistered_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_150, scope=receive_unregistered_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 35, 12)))

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_unregistered_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_unregistered_notification._Automaton = _BuildAutomaton_221()




CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_150, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 41, 24)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_150, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 46, 24)))

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/611-receive_unregistered_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_150._Automaton = _BuildAutomaton_222()




state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=state_dispatch_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 10, 12)))

state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=state_dispatch_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 15, 12)))

state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=state_dispatch_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 20, 12)))

state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=state_dispatch_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 25, 12)))

state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=state_dispatch_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 30, 12)))

state_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_151, scope=state_dispatch_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 35, 12)))

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(state_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
state_dispatch_notification._Automaton = _BuildAutomaton_223()




CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_151, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 41, 24)))

CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_151, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 46, 24)))

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/612-state_dispatch_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_151._Automaton = _BuildAutomaton_224()




foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 10, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=foreign_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 15, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=foreign_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 20, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=foreign_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 25, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_shipment_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 30, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_9, scope=foreign_shipment_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 35, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=foreign_shipment_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 48, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=foreign_shipment_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 53, 12)))

foreign_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_152, scope=foreign_shipment_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 58, 12)))

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 15, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 48, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 53, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 58, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_shipment_notification._Automaton = _BuildAutomaton_225()




CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_152, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 64, 24)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_152, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 69, 24)))

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 63, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 64, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/613-foreign_shipment_notification.xsd', 69, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_152._Automaton = _BuildAutomaton_226()




foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=foreign_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 10, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=foreign_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 15, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), system_subject_type, scope=foreign_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 20, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=foreign_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 25, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=foreign_import_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 30, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_10, scope=foreign_import_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 35, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=foreign_import_notification, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 48, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=foreign_import_notification, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 53, 12)))

foreign_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_153, scope=foreign_import_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 58, 12)))

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 15, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 48, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 53, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foreign_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 58, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foreign_import_notification._Automaton = _BuildAutomaton_227()




CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_153, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 64, 24)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_153, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 69, 24)))

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 63, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 64, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/614-foreign_import_notification.xsd', 69, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_153._Automaton = _BuildAutomaton_228()




eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=eeu_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 11, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=eeu_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 16, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=eeu_shipment_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 21, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_shipment_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 26, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_11, scope=eeu_shipment_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 31, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=eeu_shipment_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 44, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=eeu_shipment_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 49, 3)))

eeu_shipment_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_154, scope=eeu_shipment_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 54, 3)))

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_shipment_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_shipment_notification._Automaton = _BuildAutomaton_229()




CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_155, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 60, 6)))

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_154._Automaton = _BuildAutomaton_230()




CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_155, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 64, 10)))

CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_156, scope=CTD_ANON_155, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 69, 10)))

CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_155, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 113, 9)))

CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_155, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 118, 9)))

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 64, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 69, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 113, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 118, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_155._Automaton = _BuildAutomaton_231()




CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_156, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 75, 13)))

CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_157, scope=CTD_ANON_156, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 80, 13)))

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 80, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 75, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 80, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_156._Automaton = _BuildAutomaton_232()




CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_157, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 86, 16)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_157, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 91, 16)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_157, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 96, 16)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_157, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 101, 16)))

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 86, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 91, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 96, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/615-eeu_shipment_notification.xsd', 101, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_157._Automaton = _BuildAutomaton_233()




eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=eeu_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 11, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=eeu_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 16, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=eeu_import_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 21, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), system_subject_type, scope=eeu_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 26, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_12, scope=eeu_import_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 31, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=eeu_import_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 44, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=eeu_import_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 49, 3)))

eeu_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_158, scope=eeu_import_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 54, 3)))

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(eeu_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
eeu_import_notification._Automaton = _BuildAutomaton_234()




CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_159, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 60, 6)))

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_158._Automaton = _BuildAutomaton_235()




CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_159, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 64, 10)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_160, scope=CTD_ANON_159, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 69, 10)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_159, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 113, 9)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_159, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 118, 9)))

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 64, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 69, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 113, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 118, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_159._Automaton = _BuildAutomaton_236()




CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_160, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 75, 13)))

CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_161, scope=CTD_ANON_160, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 80, 13)))

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 80, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 75, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 80, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_160._Automaton = _BuildAutomaton_237()




CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_161, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 86, 16)))

CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_161, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 91, 16)))

CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_161, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 96, 16)))

CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_161, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 101, 16)))

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 86, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 91, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 96, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/616-eeu_import_notification.xsd', 101, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_161._Automaton = _BuildAutomaton_238()




receive_order_errors_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=receive_order_errors_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 9, 12)))

receive_order_errors_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_id'), subject_id_type, scope=receive_order_errors_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 14, 12)))

receive_order_errors_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=receive_order_errors_notification, documentation='\u0414\u0430\u0442\u0430 \u043f\u0440\u0438\u0435\u043c\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 19, 12)))

receive_order_errors_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_162, scope=receive_order_errors_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a\xa0\u043f\u0440\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 24, 12)))

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_errors_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_errors_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_id')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(receive_order_errors_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(receive_order_errors_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 24, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
receive_order_errors_notification._Automaton = _BuildAutomaton_239()




CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'errors'), CTD_ANON_163, scope=CTD_ANON_162, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 30, 24)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(None, 'errors')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 30, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_162._Automaton = _BuildAutomaton_240()




CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_code'), string200_type, scope=CTD_ANON_163, documentation='\u041a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 36, 36)))

CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error_desc'), string4000_type, scope=CTD_ANON_163, documentation='\u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 41, 36)))

CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object_id'), string128_type, scope=CTD_ANON_163, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 46, 36)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 46, 36))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(None, 'error_code')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 36, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(None, 'error_desc')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 41, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(None, 'object_id')), pyxb.utils.utility.Location('./xsd_v1.35/617-receive_order_errors_notification.xsd', 46, 36))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_163._Automaton = _BuildAutomaton_241()




move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=move_to_release_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 10, 12)))

move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_id_type, scope=move_to_release_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 15, 12)))

move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=move_to_release_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 20, 12)))

move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=move_to_release_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 25, 12)))

move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=move_to_release_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 30, 12)))

move_to_release_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_164, scope=move_to_release_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 35, 12)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(move_to_release_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 35, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
move_to_release_notification._Automaton = _BuildAutomaton_242()




CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_164, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 41, 24)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_164, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 46, 24)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 40, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/618-move_to_release_notification.xsd', 46, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_164._Automaton = _BuildAutomaton_243()




agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=agent_dispatch_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 11, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=agent_dispatch_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 16, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=agent_dispatch_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 21, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'turnover_type'), turnover_type_enum, scope=agent_dispatch_notification, documentation='\u0422\u0438\u043f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 26, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=agent_dispatch_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 31, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=agent_dispatch_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 36, 3)))

agent_dispatch_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_165, scope=agent_dispatch_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 41, 3)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 26, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'turnover_type')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(agent_dispatch_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
agent_dispatch_notification._Automaton = _BuildAutomaton_244()




CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_165, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 47, 6)))

CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_165, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 52, 6)))

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/619-agent_dispatch_notification.xsd', 52, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_165._Automaton = _BuildAutomaton_245()




import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), system_subject_type, scope=import_info_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 11, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'seller_id'), system_subject_type, scope=import_info_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 16, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), system_subject_type, scope=import_info_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 21, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=import_info_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 26, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), STD_ANON_13, scope=import_info_notification, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 31, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=import_info_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 44, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=import_info_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 49, 3)))

import_info_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_166, scope=import_info_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 54, 3)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 16, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'seller_id')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 44, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 49, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(import_info_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 54, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
import_info_notification._Automaton = _BuildAutomaton_246()




CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_166, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 60, 6)))

CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_166, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 65, 6)))

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 59, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/620-import_info_notification.xsd', 65, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_166._Automaton = _BuildAutomaton_247()




arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=arbitration_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 11, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_id_type, scope=arbitration_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 16, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=arbitration_notification, documentation='\u0414\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 21, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=arbitration_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f  - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 26, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=arbitration_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 31, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sign_arbitration'), edit_type_enum, scope=arbitration_notification, documentation='\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 36, 3)))

arbitration_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_167, scope=arbitration_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 41, 3)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'sign_arbitration')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(arbitration_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 41, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
arbitration_notification._Automaton = _BuildAutomaton_248()




CTD_ANON_167._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_167, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 47, 6)))

CTD_ANON_167._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_167, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 52, 6)))

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 46, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_167._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 47, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_167._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/621-arbitration_notification.xsd', 52, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_167._Automaton = _BuildAutomaton_249()




return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=return_contract_production_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 11, 3)))

return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receiver_id'), subject_id_type, scope=return_contract_production_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 16, 3)))

return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=return_contract_production_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 21, 3)))

return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=return_contract_production_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 26, 3)))

return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=return_contract_production_notification, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 31, 3)))

return_contract_production_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_168, scope=return_contract_production_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 36, 3)))

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(return_contract_production_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
return_contract_production_notification._Automaton = _BuildAutomaton_250()




CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_168, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 42, 6)))

CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_168, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 47, 6)))

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/622-return_contract_production_notification.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_168._Automaton = _BuildAutomaton_251()




change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=change_property_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 11, 3)))

change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_id_type, scope=change_property_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 16, 3)))

change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=change_property_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 21, 3)))

change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'action_id_type'), action_id_type_enum, scope=change_property_notification, documentation='\u0422\u0438\u043f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 26, 3)))

change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_id'), string200_type, scope=change_property_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 31, 3)))

change_property_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), CTD_ANON_169, scope=change_property_notification, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 36, 3)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'action_id_type')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_id')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(change_property_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
change_property_notification._Automaton = _BuildAutomaton_252()




CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=CTD_ANON_169, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u043d\u043e\u043c\u0435\u0440', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 42, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=CTD_ANON_169, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 - \u0434\u0430\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 47, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=CTD_ANON_169, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 52, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=CTD_ANON_169, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430) \u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 57, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=CTD_ANON_169, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 62, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_170, scope=CTD_ANON_169, documentation='\u0421\u043f\u0438\u0441\u043e\u043a\xa0\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 67, 6)))

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 42, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 47, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 52, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 57, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 62, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 52, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 57, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 62, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 67, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_169._Automaton = _BuildAutomaton_253()




CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_171, scope=CTD_ANON_170, location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 73, 9)))

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 73, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 73, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_170._Automaton = _BuildAutomaton_254()




CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_171, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 77, 13)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_172, scope=CTD_ANON_171, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 82, 13)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_171, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 126, 12)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_171, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 131, 12)))

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 126, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 131, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 126, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 131, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_171._Automaton = _BuildAutomaton_255()




CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_172, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 88, 16)))

CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_173, scope=CTD_ANON_172, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 93, 16)))

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 93, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_172._Automaton = _BuildAutomaton_256()




CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_173, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 99, 19)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_173, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 104, 19)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_173, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 109, 19)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_173, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 114, 19)))

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 109, 19))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 114, 19))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 99, 19))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 104, 19))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 109, 19))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/623-change_property_notification.xsd', 114, 19))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_173._Automaton = _BuildAutomaton_257()




posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=posting_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 11, 3)))

posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_type, scope=posting_notification, documentation='\u0418\u041d\u041d  \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 16, 3)))

posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'organisation_name'), string1000_type, scope=posting_notification, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 -\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 21, 3)))

posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_any_type, scope=posting_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 26, 3)))

posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=posting_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 31, 3)))

posting_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_174, scope=posting_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 36, 3)))

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'organisation_name')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(posting_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
posting_notification._Automaton = _BuildAutomaton_258()




CTD_ANON_174._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_174, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 42, 6)))

CTD_ANON_174._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_174, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 47, 6)))

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_174._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_174._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/627-posting_notification.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_174._Automaton = _BuildAutomaton_259()




posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=posting_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 11, 3)))

posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), string64_type, scope=posting_import_notification, documentation='\u0418\u041d\u041d/\u0418\u0422\u0418\u041d  \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 16, 3)))

posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'organisation_name'), string1000_type, scope=posting_import_notification, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 -\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 21, 3)))

posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'owner_id'), subject_any_type, scope=posting_import_notification, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 26, 3)))

posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=posting_import_notification, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 31, 3)))

posting_import_notification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_175, scope=posting_import_notification, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 36, 3)))

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'organisation_name')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'owner_id')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 26, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 31, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(posting_import_notification._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 36, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
posting_import_notification._Automaton = _BuildAutomaton_260()




CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_175, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 42, 6)))

CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_175, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 47, 6)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 41, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 42, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/628-posting_import_notification.xsd', 47, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_175._Automaton = _BuildAutomaton_261()




accept._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=accept, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 10, 12)))

accept._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'counterparty_id'), subject_any_type, scope=accept, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 15, 12)))

accept._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=accept, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 20, 12)))

accept._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_paused'), pyxb.binding.datatypes.boolean, scope=accept, documentation='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 25, 12)))

accept._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_176, scope=accept, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 30, 12)))

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept._UseForTag(pyxb.namespace.ExpandedName(None, 'counterparty_id')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accept._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_paused')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accept._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 30, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accept._Automaton = _BuildAutomaton_262()




CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_176, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 36, 24)))

CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_176, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 41, 24)))

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 35, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 36, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/701-accept.xsd', 41, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_176._Automaton = _BuildAutomaton_263()




posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_id_type, scope=posting, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 10, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shipper_info'), CTD_ANON_177, scope=posting, documentation='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u0433\u0440\u0443\u0437\u043e\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 15, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=posting, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 26, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=posting, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 31, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=posting, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 36, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=posting, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 41, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), source_type, scope=posting, documentation='\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 46, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_num'), document_number_200_type, scope=posting, documentation='\u0420\u0435\u0435\u0441\u0442\u0440\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\u0432 \u0415\u0434\u0438\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u0441\u0444\u0435\u0440\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 51, 3)))

posting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_178, scope=posting, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 56, 3)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 51, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'shipper_info')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 26, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 31, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 36, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 41, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 46, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_num')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 51, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(posting._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 56, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
posting._Automaton = _BuildAutomaton_264()




CTD_ANON_177._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_type, scope=CTD_ANON_177, location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 21, 6)))

CTD_ANON_177._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kpp'), kpp_type, scope=CTD_ANON_177, location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 22, 6)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 22, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_177._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 21, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_177._UseForTag(pyxb.namespace.ExpandedName(None, 'kpp')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 22, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_177._Automaton = _BuildAutomaton_265()




CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_179, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 62, 6)))

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_178._Automaton = _BuildAutomaton_266()




CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_179, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 66, 10)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_180, scope=CTD_ANON_179, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 71, 10)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_179, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 115, 9)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_179, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 120, 9)))

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 66, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 71, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 115, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 120, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_179._Automaton = _BuildAutomaton_267()




CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_180, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 77, 13)))

CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_181, scope=CTD_ANON_180, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 82, 13)))

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 82, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 77, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 82, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_180._Automaton = _BuildAutomaton_268()




CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_181, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 88, 16)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_181, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 93, 16)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_181, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 98, 16)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_181, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 103, 16)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 88, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 98, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/702-posting.xsd', 103, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_181._Automaton = _BuildAutomaton_269()




posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=posting_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 10, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=posting_import, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 15, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_receiver_id'), system_subject_type, scope=posting_import, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0437\u043e\u043d\u0435 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 20, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=posting_import, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 25, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=posting_import, documentation='\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0434\u0430\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 30, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contract_type'), contract_type_enum, scope=posting_import, documentation='\u0422\u0438\u043f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 35, 3)))

posting_import._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order_details'), CTD_ANON_182, scope=posting_import, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 40, 3)))

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 20, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_receiver_id')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 20, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 25, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 30, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'contract_type')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 35, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(posting_import._UseForTag(pyxb.namespace.ExpandedName(None, 'order_details')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 40, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
posting_import._Automaton = _BuildAutomaton_270()




CTD_ANON_182._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'union'), CTD_ANON_183, scope=CTD_ANON_182, location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 46, 6)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 46, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_182._UseForTag(pyxb.namespace.ExpandedName(None, 'union')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 46, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_182._Automaton = _BuildAutomaton_271()




CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_183, documentation='\u041d\u043e\u043c\u0435\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 50, 10)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc_detail'), CTD_ANON_184, scope=CTD_ANON_183, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 55, 10)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_183, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c). \u0415\u0441\u043b\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 99, 9)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_183, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 104, 9)))

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 50, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc_detail')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 55, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 99, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 104, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_183._Automaton = _BuildAutomaton_272()




CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_184, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 61, 13)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_185, scope=CTD_ANON_184, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 66, 13)))

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 66, 13))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 61, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 66, 13))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_184._Automaton = _BuildAutomaton_273()




CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtin'), gs1_gtin_type, scope=CTD_ANON_185, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 GS1 (GTIN)', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 72, 16)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series_number'), series_number_type, scope=CTD_ANON_185, documentation='\u041d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 77, 16)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), price_type, scope=CTD_ANON_185, documentation='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c)', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 82, 16)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vat_value'), price_type, scope=CTD_ANON_185, documentation='C\u0443\u043c\u043c\u0430 \u041d\u0414\u0421, \u0440\u0443\u0431', location=pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 87, 16)))

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(None, 'gtin')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 72, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(None, 'series_number')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 77, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 82, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(None, 'vat_value')), pyxb.utils.utility.Location('./xsd_v1.35/703-posting_import.xsd', 87, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_185._Automaton = _BuildAutomaton_274()




relabeling._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=relabeling, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438-\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 9, 12)))

relabeling._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=relabeling, documentation='\u0414\u0430\u0442\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 14, 12)))

relabeling._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relabeling_detail'), CTD_ANON_186, scope=relabeling, documentation='\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 19, 12)))

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(relabeling._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 9, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(relabeling._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(relabeling._UseForTag(pyxb.namespace.ExpandedName(None, 'relabeling_detail')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
relabeling._Automaton = _BuildAutomaton_275()




CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_187, scope=CTD_ANON_186, location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 25, 24)))

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 25, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 25, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_186._Automaton = _BuildAutomaton_276()




CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'new_sgtin'), sign_sgtin_type, scope=CTD_ANON_187, documentation='SGTIN \u043d\u043e\u0432\u043e\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 28, 36)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'old_sgtin'), sign_sgtin_type, scope=CTD_ANON_187, documentation='SGTIN \u0441\u0442\u0430\u0440\u043e\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 33, 36)))

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(None, 'new_sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 28, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(None, 'old_sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/811-relabeling.xsd', 33, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_187._Automaton = _BuildAutomaton_277()




unit_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=unit_pack, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 10, 12)))

unit_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=unit_pack, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 15, 12)))

unit_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=unit_pack, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 20, 12)))

unit_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_188, scope=unit_pack, documentation='\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 25, 12)))

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(unit_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
unit_pack._Automaton = _BuildAutomaton_278()




CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_188, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 31, 24)))

CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_188, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 36, 24)))

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 30, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 31, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/911-unit_pack.xsd', 36, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_188._Automaton = _BuildAutomaton_279()




unit_unpack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=unit_unpack, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 11, 3)))

unit_unpack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=unit_unpack, documentation='\u0414\u0430\u0442\u0430 \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 16, 3)))

unit_unpack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=unit_unpack, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 21, 3)))

unit_unpack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'is_recursive'), pyxb.binding.datatypes.boolean, scope=unit_unpack, documentation='\u0422\u0438\u043f \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0434\u0438\u043d \u0443\u0440\u043e\u0432\u0435\u043d\u044c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e). \u041f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0434\u043e \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 31, 3)))

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=1500, metadata=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 21, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 31, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_unpack._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_unpack._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(unit_unpack._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(unit_unpack._UseForTag(pyxb.namespace.ExpandedName(None, 'is_recursive')), pyxb.utils.utility.Location('./xsd_v1.35/912-unit_unpack.xsd', 31, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
unit_unpack._Automaton = _BuildAutomaton_280()




unit_extract._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=unit_extract, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 10, 12)))

unit_extract._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=unit_extract, documentation='\u0414\u0430\u0442\u0430 \u0438\u0437\u044a\u044f\u0442\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 15, 12)))

unit_extract._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_189, scope=unit_extract, documentation='\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 20, 12)))

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_extract._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_extract._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(unit_extract._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
unit_extract._Automaton = _BuildAutomaton_281()




CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_189, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 26, 24)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_189, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 31, 24)))

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 25, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 26, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/913-unit_extract.xsd', 31, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_189._Automaton = _BuildAutomaton_282()




unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=unit_append, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 10, 12)))

unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=unit_append, documentation='\u0414\u0430\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 15, 12)))

unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=unit_append, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 20, 12)))

unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_190, scope=unit_append, documentation='\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 25, 12)))

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 25, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
unit_append._Automaton = _BuildAutomaton_283()




CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_190, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 31, 24)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_190, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 36, 24)))

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=25000, metadata=pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 30, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 31, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/914-unit_append.xsd', 36, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_190._Automaton = _BuildAutomaton_284()




multi_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=multi_pack, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 11, 3)))

multi_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=multi_pack, documentation='\u0414\u0430\u0442\u0430 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 16, 3)))

multi_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'by_sgtin'), CTD_ANON_191, scope=multi_pack, documentation='\u0412\u043b\u043e\u0436\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 22, 4)))

multi_pack._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'by_sscc'), CTD_ANON_194, scope=multi_pack, documentation='\u0412\u043b\u043e\u0436\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 64, 4)))

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multi_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multi_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multi_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'by_sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 22, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multi_pack._UseForTag(pyxb.namespace.ExpandedName(None, 'by_sscc')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 64, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
multi_pack._Automaton = _BuildAutomaton_285()




CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_192, scope=CTD_ANON_191, documentation='\u0414\u0430\u043d\u043d\u044b\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 28, 7)))

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 28, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_191._Automaton = _BuildAutomaton_286()




CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_192, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 34, 10)))

CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_193, scope=CTD_ANON_192, location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 39, 10)))

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 34, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 39, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_192._Automaton = _BuildAutomaton_287()




CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_193, documentation='\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 42, 13)))

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 42, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_193._Automaton = _BuildAutomaton_288()




CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_195, scope=CTD_ANON_194, documentation='\u0414\u0430\u043d\u043d\u044b\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 70, 7)))

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 70, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_194._Automaton = _BuildAutomaton_289()




CTD_ANON_195._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_195, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 76, 10)))

CTD_ANON_195._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_196, scope=CTD_ANON_195, location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 81, 10)))

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_195._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 76, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_195._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 81, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_195._Automaton = _BuildAutomaton_290()




CTD_ANON_196._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_196, documentation='\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 84, 13)))

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_196._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/915-multi_pack.xsd', 84, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_196._Automaton = _BuildAutomaton_291()




multi_unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subject_id'), subject_any_type, scope=multi_unit_append, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 11, 3)))

multi_unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operation_date'), datetimeoffset, scope=multi_unit_append, documentation='\u0414\u0430\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 16, 3)))

multi_unit_append._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info_append'), CTD_ANON_197, scope=multi_unit_append, documentation='\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 21, 3)))

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multi_unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'subject_id')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multi_unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'operation_date')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 16, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multi_unit_append._UseForTag(pyxb.namespace.ExpandedName(None, 'info_append')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 21, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
multi_unit_append._Automaton = _BuildAutomaton_292()




CTD_ANON_197._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detail'), CTD_ANON_198, scope=CTD_ANON_197, documentation='\u0414\u0430\u043d\u043d\u044b\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 27, 6)))

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_197._UseForTag(pyxb.namespace.ExpandedName(None, 'detail')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 27, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_197._Automaton = _BuildAutomaton_293()




CTD_ANON_198._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_198, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 33, 9)))

CTD_ANON_198._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), CTD_ANON_199, scope=CTD_ANON_198, location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 38, 9)))

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_198._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 33, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_198._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 38, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_198._Automaton = _BuildAutomaton_294()




CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=CTD_ANON_199, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SGTIN', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 41, 12)))

CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=CTD_ANON_199, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 46, 12)))

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 41, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/916-multi_unit_append.xsd', 46, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_199._Automaton = _BuildAutomaton_295()




short_org_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'organisation_name'), string500_type, scope=short_org_info_type, documentation='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 / \u0418\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 10, 3)))

short_org_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ul'), CTD_ANON_200, scope=short_org_info_type, documentation='\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f - \u044e\u0440. \u043b\u0438\u0446\u043e', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 16, 4)))

short_org_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fl'), CTD_ANON_201, scope=short_org_info_type, documentation='\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f - \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 35, 4)))

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(short_org_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'organisation_name')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(short_org_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'ul')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 16, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(short_org_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'fl')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 35, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
short_org_info_type._Automaton = _BuildAutomaton_296()




CTD_ANON_200._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_ul_type, scope=CTD_ANON_200, documentation='\u0418\u041d\u041d \u042e\u041b', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 22, 7)))

CTD_ANON_200._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kpp'), kpp_type, scope=CTD_ANON_200, documentation='\u041a\u041f\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 27, 7)))

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_200._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 22, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_200._UseForTag(pyxb.namespace.ExpandedName(None, 'kpp')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 27, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_200._Automaton = _BuildAutomaton_297()




CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_fl_type, scope=CTD_ANON_201, documentation='\u0418\u041d\u041d \u0424\u041b', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 41, 7)))

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 41, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_201._Automaton = _BuildAutomaton_298()




sign_ids_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sgtin'), sign_sgtin_type, scope=sign_ids_type, documentation='\u041d\u043e\u043c\u0435\u0440 \u041a\u0438\u0417', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 58, 4)))

sign_ids_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sscc'), sscc_type, scope=sign_ids_type, documentation='\u041d\u043e\u043c\u0435\u0440 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439/\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 63, 4)))

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=2, metadata=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 56, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(sign_ids_type._UseForTag(pyxb.namespace.ExpandedName(None, 'sgtin')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 58, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(sign_ids_type._UseForTag(pyxb.namespace.ExpandedName(None, 'sscc')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 63, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
sign_ids_type._Automaton = _BuildAutomaton_299()




fts_gtd_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'customs_code'), fts_customs_code_type, scope=fts_gtd_info_type, documentation='\u041a\u043e\u0434 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 76, 3)))

fts_gtd_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'registration_date'), date_type, scope=fts_gtd_info_type, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u044b', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 81, 3)))

fts_gtd_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gtd_number'), STD_ANON, scope=fts_gtd_info_type, documentation='\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u044b', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 86, 3)))

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_gtd_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'customs_code')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 76, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fts_gtd_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'registration_date')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 81, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fts_gtd_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'gtd_number')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 86, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fts_gtd_info_type._Automaton = _BuildAutomaton_300()




org_address_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fias_addr'), guid_type, scope=org_address_type, documentation='\u0410\u0434\u0440\u0435\u0441 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (\u043f\u043e \u0424\u0418\u0410\u0421)', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 104, 3)))

org_address_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ul'), CTD_ANON_202, scope=org_address_type, documentation='\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u2013 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 110, 4)))

org_address_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fl'), CTD_ANON_203, scope=org_address_type, documentation='\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f-\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 121, 4)))

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(org_address_type._UseForTag(pyxb.namespace.ExpandedName(None, 'fias_addr')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 104, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(org_address_type._UseForTag(pyxb.namespace.ExpandedName(None, 'ul')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 110, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(org_address_type._UseForTag(pyxb.namespace.ExpandedName(None, 'fl')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 121, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
org_address_type._Automaton = _BuildAutomaton_301()




CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_ul_type, scope=CTD_ANON_202, location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 116, 7)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kpp'), kpp_type, scope=CTD_ANON_202, location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 117, 7)))

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 116, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(None, 'kpp')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 117, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_202._Automaton = _BuildAutomaton_302()




CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inn'), inn_fl_type, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 127, 7)))

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(None, 'inn')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 127, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_203._Automaton = _BuildAutomaton_303()




info_org_eeu_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'itin'), string64_type, scope=info_org_eeu_type, documentation='\u0410\u043d\u0430\u043b\u043e\u0433 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430\u043b\u043e\u0433\u043e\u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 139, 3)))

info_org_eeu_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code_country'), code_country_type, scope=info_org_eeu_type, documentation='\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 144, 3)))

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(info_org_eeu_type._UseForTag(pyxb.namespace.ExpandedName(None, 'itin')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 139, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(info_org_eeu_type._UseForTag(pyxb.namespace.ExpandedName(None, 'code_country')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 144, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
info_org_eeu_type._Automaton = _BuildAutomaton_304()




confnum_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirm_doc'), confirm_doc_type_enum, scope=confnum_info_type, documentation='\u0412\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 156, 3)))

confnum_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=confnum_info_type, documentation='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 161, 3)))

confnum_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=confnum_info_type, documentation='\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 166, 3)))

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(confnum_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'confirm_doc')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 156, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(confnum_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 161, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(confnum_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 166, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
confnum_info_type._Automaton = _BuildAutomaton_305()




skzkm_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device_id'), skzkm_device_id_type, scope=skzkm_info_type, documentation='\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0420\u042d \u0438\u043b\u0438 \u0420\u0412 \u0441\u0442\u0440\u043e\u043a\u0430, 16 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 178, 3)))

skzkm_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_origin_msg_id'), skzkm_message_id_type, scope=skzkm_info_type, documentation='\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 183, 3)))

skzkm_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_report_id'), skzkm_report_id_type, scope=skzkm_info_type, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432 \u043a\u043e\u0434\u043e\u0432 \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e 255 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 188, 3)))

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 188, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(skzkm_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'device_id')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 178, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(skzkm_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_origin_msg_id')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 183, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(skzkm_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_report_id')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 188, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
skzkm_info_type._Automaton = _BuildAutomaton_306()




release_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_date'), date_type, scope=release_info_type, documentation='\u0414\u0430\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0410\u0418\u0421 \u0420\u0417\u041d \u043e \u0432\u0432\u043e\u0434\u0435 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 200, 3)))

release_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doc_num'), document_number_200_type, scope=release_info_type, documentation='\u041d\u043e\u043c\u0435\u0440 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0432\u043e\u0434 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 (\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f \u0438\u043c\u043c\u0443\u043d\u043e\u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u041b\u041f)', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 205, 3)))

release_info_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'confirmation_num'), document_number_200_type, scope=release_info_type, documentation='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0410\u0418\u0421 \u0420\u0417\u041d', location=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 210, 3)))

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 205, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(release_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_date')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 200, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(release_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'doc_num')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 205, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(release_info_type._UseForTag(pyxb.namespace.ExpandedName(None, 'confirmation_num')), pyxb.utils.utility.Location('./xsd_v1.35/base_ref.xsd', 210, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
release_info_type._Automaton = _BuildAutomaton_307()




CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result'), result, scope=CTD_ANON_204, documentation='200 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 104, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result_service'), result_service, scope=CTD_ANON_204, documentation='201 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 109, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'query_kiz_info'), query_kiz_info, scope=CTD_ANON_204, documentation='210 - \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 SGTIN/SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 114, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'kiz_info'), kiz_info, scope=CTD_ANON_204, documentation='211 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 SGTIN/SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 119, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edit_counterparty_list'), edit_counterparty_list, scope=CTD_ANON_204, documentation='212 - \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 124, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'booking_sscc'), booking_sscc, scope=CTD_ANON_204, documentation='213 - \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043e\u0442\u043c\u0435\u043d\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f) \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 129, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'query_hierarchy_info'), query_hierarchy_info, scope=CTD_ANON_204, documentation='220 - \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 134, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'hierarchy_info'), hierarchy_info, scope=CTD_ANON_204, documentation='221 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 SSCC', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 139, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recall'), recall, scope=CTD_ANON_204, documentation='250 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u0435 \u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 144, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'refusal_sender'), refusal_sender, scope=CTD_ANON_204, documentation='251 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 149, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'refusal_receiver'), refusal_receiver, scope=CTD_ANON_204, documentation='252 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 154, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'change_information'), change_information, scope=CTD_ANON_204, documentation='253 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 159, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'change_property'), change_property, scope=CTD_ANON_204, documentation='254 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 164, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'transfer_code_to_custom'), transfer_code_to_custom, scope=CTD_ANON_204, documentation='300 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u043a\u043e\u0434\u043e\u0432 \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u043c\u0443 \u0441\u043a\u043b\u0430\u0434\u0443 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 169, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'register_end_packing'), register_end_packing, scope=CTD_ANON_204, documentation='311 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u0430\u043f\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 174, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'register_product_emission'), register_product_emission, scope=CTD_ANON_204, documentation='313 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0435 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 179, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_to_release'), move_to_release, scope=CTD_ANON_204, documentation='314 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 184, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'return_contract_production'), return_contract_production, scope=CTD_ANON_204, documentation='315 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 189, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_emission'), foreign_emission, scope=CTD_ANON_204, documentation='321 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0435 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 194, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_shipment'), foreign_shipment, scope=CTD_ANON_204, documentation='331 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 199, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_import'), foreign_import, scope=CTD_ANON_204, documentation='332 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 204, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_import_owner'), foreign_import_owner, scope=CTD_ANON_204, documentation='333 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0431\u0435\u0437 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 209, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'custom_move'), custom_move, scope=CTD_ANON_204, documentation='334 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0437\u043e\u043d\u0430\u043c\u0438 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 214, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fts_data'), fts_data, scope=CTD_ANON_204, documentation='335 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 219, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'import_info'), import_info, scope=CTD_ANON_204, documentation='336 -\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0432\u0432\u043e\u0437\u0430 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u041b\u041f, \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u043c \u0441\u043a\u043b\u0430\u0434\u0435, \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 224, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_importer'), receive_importer, scope=CTD_ANON_204, documentation='341 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 229, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'release_in_circulation'), release_in_circulation, scope=CTD_ANON_204, documentation='342 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u041b\u041f \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u0424', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 234, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'change_owner'), change_owner, scope=CTD_ANON_204, documentation='351 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 239, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_owner'), eeu_owner, scope=CTD_ANON_204, documentation='360 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 244, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_shipment'), eeu_shipment, scope=CTD_ANON_204, documentation='361 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 249, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_import'), eeu_import, scope=CTD_ANON_204, documentation='362 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0437\u0435 \u0438\u0437 \u0415\u0410\u042d\u0421 \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 254, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_release'), eeu_release, scope=CTD_ANON_204, documentation='363 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u0432\u043e\u0434\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 259, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_owner'), move_owner, scope=CTD_ANON_204, documentation='381 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 264, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'return_to_circulation'), return_to_circulation, scope=CTD_ANON_204, documentation='391 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u043c \u0432\u0432\u043e\u0434\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u043e\u0431\u043e\u0440\u043e\u0442', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 269, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_order'), move_order, scope=CTD_ANON_204, documentation='415 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 274, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_order'), receive_order, scope=CTD_ANON_204, documentation='416 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 279, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_return'), move_return, scope=CTD_ANON_204, documentation='417 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 284, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_place'), move_place, scope=CTD_ANON_204, documentation='431 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 289, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_unregistered_order'), move_unregistered_order, scope=CTD_ANON_204, documentation='441 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 294, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_unregistered_order'), receive_unregistered_order, scope=CTD_ANON_204, documentation='442 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432, \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 299, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_eeu'), move_eeu, scope=CTD_ANON_204, documentation='461 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u044e \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430-\u0447\u043b\u0435\u043d\u0430 \u0415\u0410\u042d\u0421', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 304, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_state_dispatch'), move_state_dispatch, scope=CTD_ANON_204, documentation='470 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 309, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'state_dispatch'), state_dispatch, scope=CTD_ANON_204, documentation='471 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043c\u0435\u043d\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 314, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'agent_dispatch'), agent_dispatch, scope=CTD_ANON_204, documentation='472 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 319, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'arbitration'), arbitration, scope=CTD_ANON_204, documentation='481 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 324, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'retail_sale'), retail_sale, scope=CTD_ANON_204, documentation='511 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u043e\u0437\u043d\u0438\u0447\u043d\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 329, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recipe'), recipe, scope=CTD_ANON_204, documentation='521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 334, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'health_care'), health_care, scope=CTD_ANON_204, documentation='531 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0439 \u043f\u043e\u043c\u043e\u0449\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 339, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_destruction'), move_destruction, scope=CTD_ANON_204, documentation='541 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 344, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destruction'), destruction, scope=CTD_ANON_204, documentation='542 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u043a\u0442\u0435 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 349, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'withdrawal'), withdrawal, scope=CTD_ANON_204, documentation='552 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043e\u0440\u043e\u0442\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 354, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_order_notification'), move_order_notification, scope=CTD_ANON_204, documentation='601 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 359, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_order_notification'), receive_order_notification, scope=CTD_ANON_204, documentation='602 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 364, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_owner_notification'), move_owner_notification, scope=CTD_ANON_204, documentation='603 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 369, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'refusal_sender_notification'), refusal_sender_notification, scope=CTD_ANON_204, documentation='605 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 374, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'refusal_receiver_notification'), refusal_receiver_notification, scope=CTD_ANON_204, documentation='606 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043f\u0440\u0438\u0435\u043c\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 379, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accept_notification'), accept_notification, scope=CTD_ANON_204, documentation='607 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 (\u0430\u043a\u0446\u0435\u043f\u0442\u043e\u0432\u0430\u043d\u0438\u0438) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 384, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'change_owner_notification'), change_owner_notification, scope=CTD_ANON_204, documentation='609 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e \u0441\u043c\u0435\u043d\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 389, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_return_notification'), move_return_notification, scope=CTD_ANON_204, documentation='610 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 394, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_unregistered_notification'), receive_unregistered_notification, scope=CTD_ANON_204, documentation='611 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432, \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 399, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'state_dispatch_notification'), state_dispatch_notification, scope=CTD_ANON_204, documentation='612 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u041f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u043c\u0435\u043d\u044b \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 404, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_shipment_notification'), foreign_shipment_notification, scope=CTD_ANON_204, documentation='613 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 409, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreign_import_notification'), foreign_import_notification, scope=CTD_ANON_204, documentation='614 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u0432\u043e\u0437\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432\xa0\u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 414, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_shipment_notification'), eeu_shipment_notification, scope=CTD_ANON_204, documentation='615 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0443\u044e \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0415\u0410\u042d\u0421', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 419, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eeu_import_notification'), eeu_import_notification, scope=CTD_ANON_204, documentation='616 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u0432\u043e\u0437\u0435 \u0438\u0437 \u0415\u0410\u042d\u0421 \u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 424, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'receive_order_errors_notification'), receive_order_errors_notification, scope=CTD_ANON_204, documentation='617 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u043f\u0440\u0438 \u043f\u0440\u0438\u0435\u043c\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 429, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'move_to_release_notification'), move_to_release_notification, scope=CTD_ANON_204, documentation='618 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430 \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 434, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'agent_dispatch_notification'), agent_dispatch_notification, scope=CTD_ANON_204, documentation='619 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 439, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'import_info_notification'), import_info_notification, scope=CTD_ANON_204, documentation='620 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0435\u0440\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0432\u0432\u043e\u0437\u0430 \u041b\u041f \u0434\u0435\u0440\u0436\u0430\u0442\u0435\u043b\u0435\u043c \u0420\u0423 (\u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 444, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'arbitration_notification'), arbitration_notification, scope=CTD_ANON_204, documentation='621 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436/\u0441\u043d\u044f\u0442\u0438\u0435 \u0430\u0440\u0431\u0438\u0442\u0440\u0430\u0436\u0430', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 449, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'return_contract_production_notification'), return_contract_production_notification, scope=CTD_ANON_204, documentation='622 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 454, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'change_property_notification'), change_property_notification, scope=CTD_ANON_204, documentation='623 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0435', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 459, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'posting_notification'), posting_notification, scope=CTD_ANON_204, documentation='627 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 464, 8)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'posting_import_notification'), posting_import_notification, scope=CTD_ANON_204, documentation='628 - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (\u0438\u043c\u043f\u043e\u0440\u0442)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 469, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accept'), accept, scope=CTD_ANON_204, documentation='701 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f (\u0430\u043a\u0446\u0435\u043f\u0442\u043e\u0432\u0430\u043d\u0438\u044f) \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 474, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'posting'), posting, scope=CTD_ANON_204, documentation='702 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 479, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'posting_import'), posting_import, scope=CTD_ANON_204, documentation='703 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u043f\u0440\u0438\u0445\u043e\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (\u0438\u043c\u043f\u043e\u0440\u0442)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 484, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relabeling'), relabeling, scope=CTD_ANON_204, documentation='811 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0435\u0440\u0435\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u0438 \u043f\u0435\u0440\u0435\u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 489, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit_pack'), unit_pack, scope=CTD_ANON_204, documentation='911 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0432 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0443\u044e, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 494, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit_unpack'), unit_unpack, scope=CTD_ANON_204, documentation='912 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0440\u0430\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u043e\u0439, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 499, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit_extract'), unit_extract, scope=CTD_ANON_204, documentation='913 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u0437\u044a\u044f\u0442\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0432 \u0438\u0437 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u043e\u0439 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u043e\u0439, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0439) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 504, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit_append'), unit_append, scope=CTD_ANON_204, documentation='914 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u0432 \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u0443\u044e (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0443\u044e, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0443\u044e) \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0443', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 509, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'multi_pack'), multi_pack, scope=CTD_ANON_204, documentation='915 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u044b\u0445 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445) \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 514, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'multi_unit_append'), multi_unit_append, scope=CTD_ANON_204, documentation='916 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u0442\u0438\u0447\u043d\u044b\u0445 (\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445) \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 519, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code_emission'), code_emission, scope=CTD_ANON_204, documentation='10300 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u044d\u043c\u0438\u0441\u0441\u0438\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0442 \u0421\u0423\u0417)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 524, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_report_of_dropout'), skzkm_report_of_dropout, scope=CTD_ANON_204, documentation='10305 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u0431\u0440\u0430\u043a\u043e\u0432\u043a\u0435 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0442 \u0421\u0423\u0417)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 529, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_register_end_packing'), skzkm_register_end_packing, scope=CTD_ANON_204, documentation='10311 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u0430\u043f\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 534, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_foreign_emission'), skzkm_foreign_emission, scope=CTD_ANON_204, documentation='10319 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0438 \u043d\u0430\u043d\u0435\u0441\u0435\u043d\u0438\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0420\u0424 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 539, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'retail_sell_kkt'), retail_sell_kkt, scope=CTD_ANON_204, documentation='10511 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u043e\u0437\u043d\u0438\u0447\u043d\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u041a\u0422', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 544, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_recipe'), skzkm_recipe, scope=CTD_ANON_204, documentation='10521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 549, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recipe_kkt'), recipe_kkt, scope=CTD_ANON_204, documentation='10522 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0442\u043f\u0443\u0441\u043a\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u043f\u043e \u043b\u044c\u0433\u043e\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0446\u0435\u043f\u0442\u0443 c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u041a\u0422', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 554, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skzkm_health_care'), skzkm_health_care, scope=CTD_ANON_204, documentation='10531 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043b\u0435\u043a\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0439 \u043f\u043e\u043c\u043e\u0449\u0438 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u0421\u041a\u0417\u041a\u041c)', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 559, 4)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'service_disposal_registrar'), service_disposal_registrar, scope=CTD_ANON_204, documentation='20521 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0418\u0421 \u041c\u0414\u041b\u041f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0432\u044b\u0431\u044b\u0442\u0438\u044f', location=pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 564, 4)))

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'result')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 104, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'result_service')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 109, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'query_kiz_info')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 114, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'kiz_info')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 119, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'edit_counterparty_list')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 124, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'booking_sscc')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 129, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'query_hierarchy_info')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 134, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'hierarchy_info')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 139, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'recall')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 144, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'refusal_sender')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 149, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'refusal_receiver')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 154, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'change_information')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 159, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'change_property')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 164, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'transfer_code_to_custom')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 169, 4))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'register_end_packing')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 174, 4))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'register_product_emission')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 179, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_to_release')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 184, 4))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'return_contract_production')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 189, 4))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_emission')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 194, 4))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_shipment')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 199, 4))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_import')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 204, 4))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_import_owner')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 209, 4))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'custom_move')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 214, 4))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'fts_data')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 219, 4))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'import_info')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 224, 4))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_importer')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 229, 4))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'release_in_circulation')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 234, 4))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'change_owner')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 239, 4))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_owner')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 244, 4))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_shipment')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 249, 4))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_import')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 254, 4))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_release')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 259, 4))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_owner')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 264, 4))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'return_to_circulation')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 269, 4))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_order')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 274, 4))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_order')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 279, 4))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_return')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 284, 4))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_place')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 289, 4))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_unregistered_order')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 294, 4))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_unregistered_order')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 299, 4))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_eeu')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 304, 4))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_state_dispatch')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 309, 4))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'state_dispatch')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 314, 4))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'agent_dispatch')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 319, 4))
    st_43 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'arbitration')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 324, 4))
    st_44 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_44)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'retail_sale')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 329, 4))
    st_45 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_45)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'recipe')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 334, 4))
    st_46 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_46)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'health_care')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 339, 4))
    st_47 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_47)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_destruction')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 344, 4))
    st_48 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_48)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'destruction')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 349, 4))
    st_49 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_49)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'withdrawal')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 354, 4))
    st_50 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_50)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_order_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 359, 4))
    st_51 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_51)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_order_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 364, 4))
    st_52 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_52)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_owner_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 369, 4))
    st_53 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_53)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'refusal_sender_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 374, 4))
    st_54 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_54)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'refusal_receiver_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 379, 4))
    st_55 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_55)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'accept_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 384, 4))
    st_56 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_56)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'change_owner_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 389, 4))
    st_57 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_57)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_return_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 394, 4))
    st_58 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_58)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_unregistered_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 399, 4))
    st_59 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_59)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'state_dispatch_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 404, 4))
    st_60 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_60)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_shipment_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 409, 4))
    st_61 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_61)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'foreign_import_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 414, 4))
    st_62 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_62)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_shipment_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 419, 4))
    st_63 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_63)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'eeu_import_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 424, 4))
    st_64 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_64)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'receive_order_errors_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 429, 4))
    st_65 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_65)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'move_to_release_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 434, 4))
    st_66 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_66)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'agent_dispatch_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 439, 4))
    st_67 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_67)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'import_info_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 444, 4))
    st_68 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_68)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'arbitration_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 449, 4))
    st_69 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_69)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'return_contract_production_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 454, 4))
    st_70 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_70)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'change_property_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 459, 4))
    st_71 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_71)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'posting_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 464, 8))
    st_72 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_72)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'posting_import_notification')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 469, 4))
    st_73 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_73)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'accept')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 474, 4))
    st_74 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_74)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'posting')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 479, 4))
    st_75 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_75)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'posting_import')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 484, 4))
    st_76 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_76)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'relabeling')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 489, 4))
    st_77 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_77)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'unit_pack')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 494, 4))
    st_78 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_78)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'unit_unpack')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 499, 4))
    st_79 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_79)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'unit_extract')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 504, 4))
    st_80 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_80)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'unit_append')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 509, 4))
    st_81 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_81)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'multi_pack')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 514, 4))
    st_82 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_82)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'multi_unit_append')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 519, 4))
    st_83 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_83)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'code_emission')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 524, 4))
    st_84 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_84)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_report_of_dropout')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 529, 4))
    st_85 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_85)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_register_end_packing')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 534, 4))
    st_86 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_86)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_foreign_emission')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 539, 4))
    st_87 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_87)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'retail_sell_kkt')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 544, 4))
    st_88 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_88)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_recipe')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 549, 4))
    st_89 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_89)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'recipe_kkt')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 554, 4))
    st_90 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_90)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'skzkm_health_care')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 559, 4))
    st_91 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_91)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(None, 'service_disposal_registrar')), pyxb.utils.utility.Location('./xsd_v1.35/documents.xsd', 564, 4))
    st_92 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_92)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    transitions = []
    st_22._set_transitionSet(transitions)
    transitions = []
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    transitions = []
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    transitions = []
    st_27._set_transitionSet(transitions)
    transitions = []
    st_28._set_transitionSet(transitions)
    transitions = []
    st_29._set_transitionSet(transitions)
    transitions = []
    st_30._set_transitionSet(transitions)
    transitions = []
    st_31._set_transitionSet(transitions)
    transitions = []
    st_32._set_transitionSet(transitions)
    transitions = []
    st_33._set_transitionSet(transitions)
    transitions = []
    st_34._set_transitionSet(transitions)
    transitions = []
    st_35._set_transitionSet(transitions)
    transitions = []
    st_36._set_transitionSet(transitions)
    transitions = []
    st_37._set_transitionSet(transitions)
    transitions = []
    st_38._set_transitionSet(transitions)
    transitions = []
    st_39._set_transitionSet(transitions)
    transitions = []
    st_40._set_transitionSet(transitions)
    transitions = []
    st_41._set_transitionSet(transitions)
    transitions = []
    st_42._set_transitionSet(transitions)
    transitions = []
    st_43._set_transitionSet(transitions)
    transitions = []
    st_44._set_transitionSet(transitions)
    transitions = []
    st_45._set_transitionSet(transitions)
    transitions = []
    st_46._set_transitionSet(transitions)
    transitions = []
    st_47._set_transitionSet(transitions)
    transitions = []
    st_48._set_transitionSet(transitions)
    transitions = []
    st_49._set_transitionSet(transitions)
    transitions = []
    st_50._set_transitionSet(transitions)
    transitions = []
    st_51._set_transitionSet(transitions)
    transitions = []
    st_52._set_transitionSet(transitions)
    transitions = []
    st_53._set_transitionSet(transitions)
    transitions = []
    st_54._set_transitionSet(transitions)
    transitions = []
    st_55._set_transitionSet(transitions)
    transitions = []
    st_56._set_transitionSet(transitions)
    transitions = []
    st_57._set_transitionSet(transitions)
    transitions = []
    st_58._set_transitionSet(transitions)
    transitions = []
    st_59._set_transitionSet(transitions)
    transitions = []
    st_60._set_transitionSet(transitions)
    transitions = []
    st_61._set_transitionSet(transitions)
    transitions = []
    st_62._set_transitionSet(transitions)
    transitions = []
    st_63._set_transitionSet(transitions)
    transitions = []
    st_64._set_transitionSet(transitions)
    transitions = []
    st_65._set_transitionSet(transitions)
    transitions = []
    st_66._set_transitionSet(transitions)
    transitions = []
    st_67._set_transitionSet(transitions)
    transitions = []
    st_68._set_transitionSet(transitions)
    transitions = []
    st_69._set_transitionSet(transitions)
    transitions = []
    st_70._set_transitionSet(transitions)
    transitions = []
    st_71._set_transitionSet(transitions)
    transitions = []
    st_72._set_transitionSet(transitions)
    transitions = []
    st_73._set_transitionSet(transitions)
    transitions = []
    st_74._set_transitionSet(transitions)
    transitions = []
    st_75._set_transitionSet(transitions)
    transitions = []
    st_76._set_transitionSet(transitions)
    transitions = []
    st_77._set_transitionSet(transitions)
    transitions = []
    st_78._set_transitionSet(transitions)
    transitions = []
    st_79._set_transitionSet(transitions)
    transitions = []
    st_80._set_transitionSet(transitions)
    transitions = []
    st_81._set_transitionSet(transitions)
    transitions = []
    st_82._set_transitionSet(transitions)
    transitions = []
    st_83._set_transitionSet(transitions)
    transitions = []
    st_84._set_transitionSet(transitions)
    transitions = []
    st_85._set_transitionSet(transitions)
    transitions = []
    st_86._set_transitionSet(transitions)
    transitions = []
    st_87._set_transitionSet(transitions)
    transitions = []
    st_88._set_transitionSet(transitions)
    transitions = []
    st_89._set_transitionSet(transitions)
    transitions = []
    st_90._set_transitionSet(transitions)
    transitions = []
    st_91._set_transitionSet(transitions)
    transitions = []
    st_92._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_204._Automaton = _BuildAutomaton_308()


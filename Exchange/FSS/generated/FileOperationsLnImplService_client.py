##################################################
# file: FileOperationsLnImplService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py -b ../wsdl/FileOperationsLnPort.wsdl
# 
##################################################

from FileOperationsLnImplService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class FileOperationsLnImplServiceLocator:
    FileOperationsLnPort_address = "https://docs-test.fss.ru/WSLnV11/FileOperationsLnPort"
    def getFileOperationsLnPortAddress(self):
        return FileOperationsLnImplServiceLocator.FileOperationsLnPort_address
    def getFileOperationsLnPort(self, url=None, **kw):
        return FileOperationsLnPortBindingSOAP(url or FileOperationsLnImplServiceLocator.FileOperationsLnPort_address, **kw)

# Methods
class FileOperationsLnPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: prParseFilelnlpu
    def prParseFilelnlpu(self, request, **kw):
        if isinstance(request, prParseFilelnlpu) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/prParseFilelnlpu", **kw)
        # no output wsaction
        response = self.binding.Receive(prParseFilelnlpuResponse.typecode)
        return response

    # op: getNewLNNum
    def getNewLNNum(self, request, **kw):
        if isinstance(request, getNewLNNum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getNewLNNum", **kw)
        # no output wsaction
        response = self.binding.Receive(getNewLNNumResponse.typecode)
        return response

    # op: getNewLNNumRange
    def getNewLNNumRange(self, request, **kw):
        if isinstance(request, getNewLNNumRange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getNewLNNumRange", **kw)
        # no output wsaction
        response = self.binding.Receive(getNewLNNumRangeResponse.typecode)
        return response

    # op: disableLn
    def disableLn(self, request, **kw):
        if isinstance(request, disableLn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/disableLn", **kw)
        # no output wsaction
        response = self.binding.Receive(disableLnResponse.typecode)
        return response

    # op: getExistingLNNumRange
    def getExistingLNNumRange(self, request, **kw):
        if isinstance(request, getExistingLNNumRange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getExistingLNNumRange", **kw)
        # no output wsaction
        response = self.binding.Receive(getExistingLNNumRangeResponse.typecode)
        return response

    # op: getLNListBySnils
    def getLNListBySnils(self, request, **kw):
        if isinstance(request, getLNListBySnils) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getLNListBySnils", **kw)
        # no output wsaction
        response = self.binding.Receive(getLNListBySnilsResponse.typecode)
        return response

    # op: getLNListByDate
    def getLNListByDate(self, request, **kw):
        if isinstance(request, getLNListByDate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getLNListByDate", **kw)
        # no output wsaction
        response = self.binding.Receive(getLNListByDateResponse.typecode)
        return response

    # op: prParseFileNumberslpu
    def prParseFileNumberslpu(self, request, **kw):
        if isinstance(request, prParseFileNumberslpu) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/prParseFileNumberslpu", **kw)
        # no output wsaction
        response = self.binding.Receive(prParseFileNumberslpuResponse.typecode)
        return response

    # op: getLNData
    def getLNData(self, request, **kw):
        if isinstance(request, getLNData) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl/getLNData", **kw)
        # no output wsaction
        response = self.binding.Receive(getLNDataResponse.typecode)
        return response

prParseFilelnlpu = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "prParseFilelnlpu").pyclass

prParseFilelnlpuResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "prParseFilelnlpuResponse").pyclass

getNewLNNum = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getNewLNNum").pyclass

getNewLNNumResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getNewLNNumResponse").pyclass

getNewLNNumRange = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getNewLNNumRange").pyclass

getNewLNNumRangeResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getNewLNNumRangeResponse").pyclass

disableLn = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "disableLn").pyclass

disableLnResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "disableLnResponse").pyclass

getExistingLNNumRange = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getExistingLNNumRange").pyclass

getExistingLNNumRangeResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getExistingLNNumRangeResponse").pyclass

getLNListBySnils = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNListBySnils").pyclass

getLNListBySnilsResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNListBySnilsResponse").pyclass

getLNListByDate = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNListByDate").pyclass

getLNListByDateResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNListByDateResponse").pyclass

prParseFileNumberslpu = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "prParseFileNumberslpu").pyclass

prParseFileNumberslpuResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "prParseFileNumberslpuResponse").pyclass

getLNData = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNData").pyclass

getLNDataResponse = GED("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl", "getLNDataResponse").pyclass

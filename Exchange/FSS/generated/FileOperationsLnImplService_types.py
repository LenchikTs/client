##################################################
# file: FileOperationsLnImplService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b ../wsdl/FileOperationsLnPort.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
##############################

class ns1:
    targetNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"

    class TimestampType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        type = (schema, "TimestampType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimestampType_Def.schema
            TClist = [GTD("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","AttributedDateTime",lazy=False)(pname=(ns,"Created"), aname="_Created", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","AttributedDateTime",lazy=False)(pname=(ns,"Expires"), aname="_Expires", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Created = None
                    self._Expires = None
                    self._any = []
                    return
            Holder.__name__ = "TimestampType_Holder"
            self.pyclass = Holder

    class AttributedDateTime_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        type = (schema, "AttributedDateTime")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class AttributedURI_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        type = (schema, "AttributedURI")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class Created_Dec(ElementDeclaration):
        literal = "Created"
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Created")
            kw["aname"] = "_Created"
            if ns1.AttributedDateTime_Def not in ns1.Created_Dec.__bases__:
                bases = list(ns1.Created_Dec.__bases__)
                bases.insert(0, ns1.AttributedDateTime_Def)
                ns1.Created_Dec.__bases__ = tuple(bases)

            ns1.AttributedDateTime_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Created_Dec_Holder"

    class Expires_Dec(ElementDeclaration):
        literal = "Expires"
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Expires")
            kw["aname"] = "_Expires"
            if ns1.AttributedDateTime_Def not in ns1.Expires_Dec.__bases__:
                bases = list(ns1.Expires_Dec.__bases__)
                bases.insert(0, ns1.AttributedDateTime_Def)
                ns1.Expires_Dec.__bases__ = tuple(bases)

            ns1.AttributedDateTime_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Expires_Dec_Holder"

    class Timestamp_Dec(ElementDeclaration):
        literal = "Timestamp"
        schema = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Timestamp")
            kw["aname"] = "_Timestamp"
            if ns1.TimestampType_Def not in ns1.Timestamp_Dec.__bases__:
                bases = list(ns1.Timestamp_Dec.__bases__)
                bases.insert(0, ns1.TimestampType_Def)
                ns1.Timestamp_Dec.__bases__ = tuple(bases)

            ns1.TimestampType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Timestamp_Dec_Holder"

# end class ns1 (tns: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd)

##############################
# targetNamespace
# http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl
##############################

class ns0:
    targetNamespace = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"

    class getLNListBySnils_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNListBySnils")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNListBySnils_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._snils = None
                    return
            Holder.__name__ = "getLNListBySnils_Holder"
            self.pyclass = Holder

    class getLNListBySnilsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNListBySnilsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNListBySnilsResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getLNListBySnils_Out",lazy=False)(pname=(ns,"FileOperationsLnUserGetLNListBySnilsOut"), aname="_FileOperationsLnUserGetLNListBySnilsOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileOperationsLnUserGetLNListBySnilsOut = None
                    return
            Holder.__name__ = "getLNListBySnilsResponse_Holder"
            self.pyclass = Holder

    class FileOperationsLnUser_getLNListBySnils_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getLNListBySnils_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getLNListBySnils_Out_Def.schema
            TClist = [self.__class__.Data_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getLNListBySnils_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getLNListBySnils_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getLNListBySnils_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Data_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Data"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.FileOperationsLnUser_getLNListBySnils_Out_Def.Data_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OutRowsetLNListbySnils",lazy=False)(pname=(ns,"OutRowsetLNListbySnils"), aname="_OutRowsetLNListbySnils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","Data")
                kw["aname"] = "_Data"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._OutRowsetLNListbySnils = None
                        return
                Holder.__name__ = "Data_Holder"
                self.pyclass = Holder




    class WSResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "WSResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WSResult_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"REQUEST_ID"), aname="_REQUEST_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"STATUS"), aname="_STATUS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"MESS"), aname="_MESS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","INFO",lazy=False)(pname=(ns,"INFO"), aname="_INFO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._REQUEST_ID = None
                    self._STATUS = None
                    self._MESS = None
                    self._INFO = None
                    return
            Holder.__name__ = "WSResult_Holder"
            self.pyclass = Holder

    class OutRowsetLNListbySnils_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "OutRowsetLNListbySnils")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OutRowsetLNListbySnils_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","RowLNbySnils",lazy=False)(pname=(ns,"RowLNbySnils"), aname="_RowLNbySnils", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RowLNbySnils = []
                    return
            Holder.__name__ = "OutRowsetLNListbySnils_Holder"
            self.pyclass = Holder

    class RowLNbySnils_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "RowLNbySnils")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RowLNbySnils_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"LN_CODE"), aname="_LN_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"LN_DATE"), aname="_LN_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_STATE"), aname="_LN_STATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LPU_OGRN"), aname="_LPU_OGRN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LN_CODE = None
                    self._LN_DATE = None
                    self._LN_STATE = None
                    self._LPU_OGRN = None
                    return
            Holder.__name__ = "RowLNbySnils_Holder"
            self.pyclass = Holder

    class INFO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "INFO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.INFO_Def.schema
            TClist = [self.__class__.ROWSET_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ROWSET = None
                    return
            Holder.__name__ = "INFO_Holder"
            self.pyclass = Holder


        class ROWSET_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ROWSET"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.INFO_Def.ROWSET_Dec.schema
                TClist = [self.__class__.ROW_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROWSET")
                kw["aname"] = "_ROWSET"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ROW = []
                        return
                Holder.__name__ = "ROWSET_Holder"
                self.pyclass = Holder


            class ROW_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "ROW"
                schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
                def __init__(self, **kw):
                    ns = ns0.INFO_Def.ROWSET_Dec.ROW_Dec.schema
                    TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"ROW_NO"), aname="_ROW_NO", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_CODE"), aname="_LN_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_HASH"), aname="_LN_HASH", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_STATE"), aname="_LN_STATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"STATUS"), aname="_STATUS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ERRORS_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROW")
                    kw["aname"] = "_ROW"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ROW_NO = None
                            self._LN_CODE = None
                            self._LN_HASH = None
                            self._LN_STATE = None
                            self._STATUS = None
                            self._ERRORS = None
                            return
                    Holder.__name__ = "ROW_Holder"
                    self.pyclass = Holder


                class ERRORS_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "ERRORS"
                    schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
                    def __init__(self, **kw):
                        ns = ns0.INFO_Def.ROWSET_Dec.ROW_Dec.ERRORS_Dec.schema
                        TClist = [self.__class__.ERROR_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                        kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ERRORS")
                        kw["aname"] = "_ERRORS"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                self._ERROR = []
                                return
                        Holder.__name__ = "ERRORS_Holder"
                        self.pyclass = Holder


                    class ERROR_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                        literal = "ERROR"
                        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
                        def __init__(self, **kw):
                            ns = ns0.INFO_Def.ROWSET_Dec.ROW_Dec.ERRORS_Dec.ERROR_Dec.schema
                            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ERR_CODE"), aname="_ERR_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"ERR_MESS"), aname="_ERR_MESS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ERROR")
                            kw["aname"] = "_ERROR"
                            self.attribute_typecode_dict = {}
                            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                            class Holder:
                                __metaclass__ = pyclass_type
                                typecode = self
                                def __init__(self):
                                    # pyclass
                                    self._ERR_CODE = None
                                    self._ERR_MESS = None
                                    return
                            Holder.__name__ = "ERROR_Holder"
                            self.pyclass = Holder













    class FileOperationsLnUser_getNewLNNum_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getNewLNNum_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getNewLNNum_Out_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"DATA"), aname="_DATA", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getNewLNNum_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getNewLNNum_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getNewLNNum_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FileOperationsLnUser_getNewLNNumRange_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getNewLNNumRange_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getNewLNNumRange_Out_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","lnNumList",lazy=False)(pname=(ns,"DATA"), aname="_DATA", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getNewLNNumRange_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getNewLNNumRange_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getNewLNNumRange_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class lnNumList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "lnNumList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lnNumList_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"LNNum"), aname="_LNNum", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LNNum = []
                    return
            Holder.__name__ = "lnNumList_Holder"
            self.pyclass = Holder

    class FileOperationsLnUser_getLNData_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getLNData_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getLNData_Out_Def.schema
            TClist = [self.__class__.DATA_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getLNData_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getLNData_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getLNData_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class DATA_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DATA"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.FileOperationsLnUser_getLNData_Out_Def.DATA_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OUT_ROWSET",lazy=False)(pname=(ns,"OUT_ROWSET"), aname="_OUT_ROWSET", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","DATA")
                kw["aname"] = "_DATA"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._OUT_ROWSET = None
                        return
                Holder.__name__ = "DATA_Holder"
                self.pyclass = Holder




    class OUT_ROWSET_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "OUT_ROWSET")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OUT_ROWSET_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROW",lazy=False)(pname=(ns,"ROW"), aname="_ROW", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ROW = []
                    return
            Holder.__name__ = "OUT_ROWSET_Holder"
            self.pyclass = Holder

    class ROW_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "ROW")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ROW_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"SNILS"), aname="_SNILS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SURNAME"), aname="_SURNAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"NAME"), aname="_NAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"PATRONIMIC"), aname="_PATRONIMIC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"BOZ_FLAG"), aname="_BOZ_FLAG", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LPU_EMPLOYER"), aname="_LPU_EMPLOYER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"LPU_EMPL_FLAG"), aname="_LPU_EMPL_FLAG", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_CODE"), aname="_LN_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"PREV_LN_CODE"), aname="_PREV_LN_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PRIMARY_FLAG"), aname="_PRIMARY_FLAG", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"DUPLICATE_FLAG"), aname="_DUPLICATE_FLAG", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"LN_DATE"), aname="_LN_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LPU_NAME"), aname="_LPU_NAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LPU_ADDRESS"), aname="_LPU_ADDRESS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LPU_OGRN"), aname="_LPU_OGRN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"BIRTHDAY"), aname="_BIRTHDAY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"GENDER"), aname="_GENDER", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"REASON1"), aname="_REASON1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"REASON2"), aname="_REASON2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"REASON3"), aname="_REASON3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"DIAGNOS"), aname="_DIAGNOS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"PARENT_CODE"), aname="_PARENT_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"DATE1"), aname="_DATE1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"DATE2"), aname="_DATE2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"VOUCHER_NO"), aname="_VOUCHER_NO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"VOUCHER_OGRN"), aname="_VOUCHER_OGRN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SERV1_AGE"), aname="_SERV1_AGE", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SERV1_MM"), aname="_SERV1_MM", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SERV1_RELATION_CODE"), aname="_SERV1_RELATION_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SERV1_FIO"), aname="_SERV1_FIO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SERV2_AGE"), aname="_SERV2_AGE", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SERV2_MM"), aname="_SERV2_MM", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SERV2_RELATION_CODE"), aname="_SERV2_RELATION_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SERV2_FIO"), aname="_SERV2_FIO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PREGN12W_FLAG"), aname="_PREGN12W_FLAG", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"HOSPITAL_DT1"), aname="_HOSPITAL_DT1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"HOSPITAL_DT2"), aname="_HOSPITAL_DT2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.HOSPITAL_BREACH_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"MSE_DT1"), aname="_MSE_DT1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"MSE_DT2"), aname="_MSE_DT2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"MSE_DT3"), aname="_MSE_DT3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MSE_INVALID_GROUP"), aname="_MSE_INVALID_GROUP", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.TREAT_PERIODS_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.LN_RESULT_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_STATE"), aname="_LN_STATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_HASH"), aname="_LN_HASH", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SNILS = None
                    self._SURNAME = None
                    self._NAME = None
                    self._PATRONIMIC = None
                    self._BOZ_FLAG = None
                    self._LPU_EMPLOYER = None
                    self._LPU_EMPL_FLAG = None
                    self._LN_CODE = None
                    self._PREV_LN_CODE = None
                    self._PRIMARY_FLAG = None
                    self._DUPLICATE_FLAG = None
                    self._LN_DATE = None
                    self._LPU_NAME = None
                    self._LPU_ADDRESS = None
                    self._LPU_OGRN = None
                    self._BIRTHDAY = None
                    self._GENDER = None
                    self._REASON1 = None
                    self._REASON2 = None
                    self._REASON3 = None
                    self._DIAGNOS = None
                    self._PARENT_CODE = None
                    self._DATE1 = None
                    self._DATE2 = None
                    self._VOUCHER_NO = None
                    self._VOUCHER_OGRN = None
                    self._SERV1_AGE = None
                    self._SERV1_MM = None
                    self._SERV1_RELATION_CODE = None
                    self._SERV1_FIO = None
                    self._SERV2_AGE = None
                    self._SERV2_MM = None
                    self._SERV2_RELATION_CODE = None
                    self._SERV2_FIO = None
                    self._PREGN12W_FLAG = None
                    self._HOSPITAL_DT1 = None
                    self._HOSPITAL_DT2 = None
                    self._HOSPITAL_BREACH = None
                    self._MSE_DT1 = None
                    self._MSE_DT2 = None
                    self._MSE_DT3 = None
                    self._MSE_INVALID_GROUP = None
                    self._TREAT_PERIODS = None
                    self._LN_RESULT = None
                    self._LN_STATE = None
                    self._LN_HASH = None
                    return
            Holder.__name__ = "ROW_Holder"
            self.pyclass = Holder


        class HOSPITAL_BREACH_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "HOSPITAL_BREACH"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.ROW_Def.HOSPITAL_BREACH_Dec.schema
                TClist = [ZSI.TC.String(strip=False, pname=(ns,"HOSPITAL_BREACH_CODE"), aname="_HOSPITAL_BREACH_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"HOSPITAL_BREACH_DT"), aname="_HOSPITAL_BREACH_DT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","HOSPITAL_BREACH")
                kw["aname"] = "_HOSPITAL_BREACH"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._HOSPITAL_BREACH_CODE = None
                        self._HOSPITAL_BREACH_DT = None
                        return
                Holder.__name__ = "HOSPITAL_BREACH_Holder"
                self.pyclass = Holder





        class TREAT_PERIODS_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "TREAT_PERIODS"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.ROW_Def.TREAT_PERIODS_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","TREAT_FULL_PERIOD",lazy=False)(pname=(ns,"TREAT_FULL_PERIOD"), aname="_TREAT_FULL_PERIOD", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","TREAT_PERIODS")
                kw["aname"] = "_TREAT_PERIODS"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._TREAT_FULL_PERIOD = []
                        return
                Holder.__name__ = "TREAT_PERIODS_Holder"
                self.pyclass = Holder





        class LN_RESULT_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "LN_RESULT"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.ROW_Def.LN_RESULT_Dec.schema
                TClist = [ZSI.TCtimes.gDate(pname=(ns,"RETURN_DATE_LPU"), aname="_RETURN_DATE_LPU", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"MSE_RESULT"), aname="_MSE_RESULT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"OTHER_STATE_DT"), aname="_OTHER_STATE_DT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"NEXT_LN_CODE"), aname="_NEXT_LN_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","LN_RESULT")
                kw["aname"] = "_LN_RESULT"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._RETURN_DATE_LPU = None
                        self._MSE_RESULT = None
                        self._OTHER_STATE_DT = None
                        self._NEXT_LN_CODE = None
                        return
                Holder.__name__ = "LN_RESULT_Holder"
                self.pyclass = Holder




    class TREAT_FULL_PERIOD_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "TREAT_FULL_PERIOD")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TREAT_FULL_PERIOD_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"TREAT_CHAIRMAN_ROLE"), aname="_TREAT_CHAIRMAN_ROLE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"TREAT_CHAIRMAN"), aname="_TREAT_CHAIRMAN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","TREAT_PERIOD",lazy=False)(pname=(ns,"TREAT_PERIOD"), aname="_TREAT_PERIOD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TREAT_CHAIRMAN_ROLE = None
                    self._TREAT_CHAIRMAN = None
                    self._TREAT_PERIOD = None
                    return
            Holder.__name__ = "TREAT_FULL_PERIOD_Holder"
            self.pyclass = Holder

    class TREAT_PERIOD_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "TREAT_PERIOD")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TREAT_PERIOD_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"TREAT_DT1"), aname="_TREAT_DT1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"TREAT_DT2"), aname="_TREAT_DT2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"TREAT_DOCTOR_ROLE"), aname="_TREAT_DOCTOR_ROLE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"TREAT_DOCTOR"), aname="_TREAT_DOCTOR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","Id")] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TREAT_DT1 = None
                    self._TREAT_DT2 = None
                    self._TREAT_DOCTOR_ROLE = None
                    self._TREAT_DOCTOR = None
                    return
            Holder.__name__ = "TREAT_PERIOD_Holder"
            self.pyclass = Holder

    class ROWSET_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "ROWSET")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ROWSET_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROW",lazy=False)(pname=(ns,"ROW"), aname="_ROW", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","version")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","software")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","version_software")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","author")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","phone")] = ZSI.TC.String(strip=False, )
                self.attribute_typecode_dict[("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","email")] = ZSI.TC.String(strip=False, )
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ROW = []
                    return
            Holder.__name__ = "ROWSET_Holder"
            self.pyclass = Holder

    class PrParseFileNumberslpuElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "PrParseFileNumberslpuElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PrParseFileNumberslpuElement_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.pXmlNumFile_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._pXmlNumFile = None
                    return
            Holder.__name__ = "PrParseFileNumberslpuElement_Holder"
            self.pyclass = Holder


        class pXmlNumFile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "pXmlNumFile"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.PrParseFileNumberslpuElement_Def.pXmlNumFile_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","lnNumList",lazy=False)(pname=(ns,"DATA"), aname="_DATA", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","pXmlNumFile")
                kw["aname"] = "_pXmlNumFile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._DATA = None
                        return
                Holder.__name__ = "pXmlNumFile_Holder"
                self.pyclass = Holder




    class FileOperationsLnUser_disableLn_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_disableLn_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_disableLn_Out_Def.schema
            TClist = [self.__class__.DATA_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_disableLn_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_disableLn_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_disableLn_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class DATA_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DATA"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.FileOperationsLnUser_disableLn_Out_Def.DATA_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OUT_ROWSET",lazy=False)(pname=(ns,"OUT_ROWSET"), aname="_OUT_ROWSET", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","DATA")
                kw["aname"] = "_DATA"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._OUT_ROWSET = None
                        return
                Holder.__name__ = "DATA_Holder"
                self.pyclass = Holder




    class FileOperationsLnUser_getLNListByDate_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getLNListByDate_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getLNListByDate_Out_Def.schema
            TClist = [self.__class__.Data_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getLNListByDate_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getLNListByDate_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getLNListByDate_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Data_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Data"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.FileOperationsLnUser_getLNListByDate_Out_Def.Data_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OutRowsetLNListbyDate",lazy=False)(pname=(ns,"OutRowsetLNListbyDate"), aname="_OutRowsetLNListbyDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","Data")
                kw["aname"] = "_Data"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._OutRowsetLNListbyDate = None
                        return
                Holder.__name__ = "Data_Holder"
                self.pyclass = Holder




    class OutRowsetLNListbyDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "OutRowsetLNListbyDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OutRowsetLNListbyDate_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","RowLNbyDate",lazy=False)(pname=(ns,"RowLNbyDate"), aname="_RowLNbyDate", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RowLNbyDate = []
                    return
            Holder.__name__ = "OutRowsetLNListbyDate_Holder"
            self.pyclass = Holder

    class RowLNbyDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "RowLNbyDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RowLNbyDate_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"LN_CODE"), aname="_LN_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"LN_STATE"), aname="_LN_STATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"SNILS"), aname="_SNILS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LN_CODE = None
                    self._LN_STATE = None
                    self._SNILS = None
                    return
            Holder.__name__ = "RowLNbyDate_Holder"
            self.pyclass = Holder

    class PrParseFilelnlpuElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "PrParseFilelnlpuElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PrParseFilelnlpuElement_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.pXmlFile_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._pXmlFile = None
                    return
            Holder.__name__ = "PrParseFilelnlpuElement_Holder"
            self.pyclass = Holder


        class pXmlFile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "pXmlFile"
            schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
            def __init__(self, **kw):
                ns = ns0.PrParseFilelnlpuElement_Def.pXmlFile_Dec.schema
                TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROWSET",lazy=False)(pname=(ns,"ROWSET"), aname="_ROWSET", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","pXmlFile")
                kw["aname"] = "_pXmlFile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ROWSET = None
                        return
                Holder.__name__ = "pXmlFile_Holder"
                self.pyclass = Holder




    class FileOperationsLnUser_getExistingLNNumRange_Out_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "FileOperationsLnUser_getExistingLNNumRange_Out")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FileOperationsLnUser_getExistingLNNumRange_Out_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","lnNumList",lazy=False)(pname=(ns,"DATA"), aname="_DATA", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WSResult_Def not in ns0.FileOperationsLnUser_getExistingLNNumRange_Out_Def.__bases__:
                bases = list(ns0.FileOperationsLnUser_getExistingLNNumRange_Out_Def.__bases__)
                bases.insert(0, ns0.WSResult_Def)
                ns0.FileOperationsLnUser_getExistingLNNumRange_Out_Def.__bases__ = tuple(bases)

            ns0.WSResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SOAPException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "SOAPException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SOAPException_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "SOAPException_Holder"
            self.pyclass = Holder

    class disableLn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "disableLn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableLn_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reasonCode"), aname="_reasonCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._lnCode = None
                    self._snils = None
                    self._reasonCode = None
                    self._reason = None
                    return
            Holder.__name__ = "disableLn_Holder"
            self.pyclass = Holder

    class disableLnResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "disableLnResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableLnResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_disableLn_Out",lazy=False)(pname=(ns,"FileOperationsLnUserDisableLnOut"), aname="_FileOperationsLnUserDisableLnOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileOperationsLnUserDisableLnOut = None
                    return
            Holder.__name__ = "disableLnResponse_Holder"
            self.pyclass = Holder

    class getExistingLNNumRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getExistingLNNumRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getExistingLNNumRange_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    return
            Holder.__name__ = "getExistingLNNumRange_Holder"
            self.pyclass = Holder

    class getExistingLNNumRangeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getExistingLNNumRangeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getExistingLNNumRangeResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getExistingLNNumRange_Out",lazy=False)(pname=(ns,"FileOperationsLnUserGetExistingLNNumRangeOut"), aname="_FileOperationsLnUserGetExistingLNNumRangeOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileOperationsLnUserGetExistingLNNumRangeOut = None
                    return
            Holder.__name__ = "getExistingLNNumRangeResponse_Holder"
            self.pyclass = Holder

    class prParseFileNumberslpu_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "prParseFileNumberslpu")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.prParseFileNumberslpu_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","PrParseFileNumberslpuElement",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "prParseFileNumberslpu_Holder"
            self.pyclass = Holder

    class prParseFileNumberslpuResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "prParseFileNumberslpuResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.prParseFileNumberslpuResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","WSResult",lazy=False)(pname=(ns,"WSResult"), aname="_WSResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._WSResult = None
                    return
            Holder.__name__ = "prParseFileNumberslpuResponse_Holder"
            self.pyclass = Holder

    class getLNListByDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNListByDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNListByDate_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._ogrn = None
                    return
            Holder.__name__ = "getLNListByDate_Holder"
            self.pyclass = Holder

    class getLNListByDateResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNListByDateResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNListByDateResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getLNListByDate_Out",lazy=False)(pname=(ns,"FileOperationsLnUserGetLNListByDateOut"), aname="_FileOperationsLnUserGetLNListByDateOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileOperationsLnUserGetLNListByDateOut = None
                    return
            Holder.__name__ = "getLNListByDateResponse_Holder"
            self.pyclass = Holder

    class getNewLNNum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getNewLNNum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getNewLNNum_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    return
            Holder.__name__ = "getNewLNNum_Holder"
            self.pyclass = Holder

    class getNewLNNumResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getNewLNNumResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getNewLNNumResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getNewLNNum_Out",lazy=False)(pname=(ns,"fileOperationsLnUserGetNewLNNumOut"), aname="_fileOperationsLnUserGetNewLNNumOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fileOperationsLnUserGetNewLNNumOut = None
                    return
            Holder.__name__ = "getNewLNNumResponse_Holder"
            self.pyclass = Holder

    class prParseFilelnlpu_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "prParseFilelnlpu")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.prParseFilelnlpu_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","PrParseFilelnlpuElement",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "prParseFilelnlpu_Holder"
            self.pyclass = Holder

    class prParseFilelnlpuResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "prParseFilelnlpuResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.prParseFilelnlpuResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","WSResult",lazy=False)(pname=(ns,"WSResult"), aname="_WSResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._WSResult = None
                    return
            Holder.__name__ = "prParseFilelnlpuResponse_Holder"
            self.pyclass = Holder

    class getNewLNNumRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getNewLNNumRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getNewLNNumRange_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"cntLnNumbers"), aname="_cntLnNumbers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._cntLnNumbers = None
                    return
            Holder.__name__ = "getNewLNNumRange_Holder"
            self.pyclass = Holder

    class getNewLNNumRangeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getNewLNNumRangeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getNewLNNumRangeResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getNewLNNumRange_Out",lazy=False)(pname=(ns,"fileOperationsLnUserGetNewLNNumRangeOut"), aname="_fileOperationsLnUserGetNewLNNumRangeOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fileOperationsLnUserGetNewLNNumRangeOut = None
                    return
            Holder.__name__ = "getNewLNNumRangeResponse_Holder"
            self.pyclass = Holder

    class getLNData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNData_Def.schema
            TClist = [ZSI.TC.String(strip=False, pname=(ns,"ogrn"), aname="_ogrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"lnCode"), aname="_lnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(strip=False, pname=(ns,"snils"), aname="_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ogrn = None
                    self._lnCode = None
                    self._snils = None
                    return
            Holder.__name__ = "getLNData_Holder"
            self.pyclass = Holder

    class getLNDataResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        type = (schema, "getLNDataResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLNDataResponse_Def.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","FileOperationsLnUser_getLNData_Out",lazy=False)(pname=(ns,"FileOperationsLnUserGetLNDataOut"), aname="_FileOperationsLnUserGetLNDataOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileOperationsLnUserGetLNDataOut = None
                    return
            Holder.__name__ = "getLNDataResponse_Holder"
            self.pyclass = Holder

    class DATA_Dec(ElementDeclaration):
        literal = "DATA"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","DATA")
            kw["aname"] = "_DATA"
            if ns0.lnNumList_Def not in ns0.DATA_Dec.__bases__:
                bases = list(ns0.DATA_Dec.__bases__)
                bases.insert(0, ns0.lnNumList_Def)
                ns0.DATA_Dec.__bases__ = tuple(bases)

            ns0.lnNumList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DATA_Dec_Holder"

    class INFO_Dec(ElementDeclaration):
        literal = "INFO"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","INFO")
            kw["aname"] = "_INFO"
            if ns0.INFO_Def not in ns0.INFO_Dec.__bases__:
                bases = list(ns0.INFO_Dec.__bases__)
                bases.insert(0, ns0.INFO_Def)
                ns0.INFO_Dec.__bases__ = tuple(bases)

            ns0.INFO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "INFO_Dec_Holder"

    class OUT_ROWSET_Dec(ElementDeclaration):
        literal = "OUT_ROWSET"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OUT_ROWSET")
            kw["aname"] = "_OUT_ROWSET"
            if ns0.OUT_ROWSET_Def not in ns0.OUT_ROWSET_Dec.__bases__:
                bases = list(ns0.OUT_ROWSET_Dec.__bases__)
                bases.insert(0, ns0.OUT_ROWSET_Def)
                ns0.OUT_ROWSET_Dec.__bases__ = tuple(bases)

            ns0.OUT_ROWSET_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "OUT_ROWSET_Dec_Holder"

    class OUT_ROWSET_WRAPPER_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OUT_ROWSET_WRAPPER"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        def __init__(self, **kw):
            ns = ns0.OUT_ROWSET_WRAPPER_Dec.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OUT_ROWSET",lazy=False)(pname=(ns,"OUT_ROWSET"), aname="_OUT_ROWSET", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OUT_ROWSET_WRAPPER")
            kw["aname"] = "_OUT_ROWSET_WRAPPER"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OUT_ROWSET = None
                    return
            Holder.__name__ = "OUT_ROWSET_WRAPPER_Holder"
            self.pyclass = Holder

    class OutRowsetLNListbyDate_Dec(ElementDeclaration):
        literal = "OutRowsetLNListbyDate"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OutRowsetLNListbyDate")
            kw["aname"] = "_OutRowsetLNListbyDate"
            if ns0.OutRowsetLNListbyDate_Def not in ns0.OutRowsetLNListbyDate_Dec.__bases__:
                bases = list(ns0.OutRowsetLNListbyDate_Dec.__bases__)
                bases.insert(0, ns0.OutRowsetLNListbyDate_Def)
                ns0.OutRowsetLNListbyDate_Dec.__bases__ = tuple(bases)

            ns0.OutRowsetLNListbyDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "OutRowsetLNListbyDate_Dec_Holder"

    class OutRowsetLNListbySnils_Dec(ElementDeclaration):
        literal = "OutRowsetLNListbySnils"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","OutRowsetLNListbySnils")
            kw["aname"] = "_OutRowsetLNListbySnils"
            if ns0.OutRowsetLNListbySnils_Def not in ns0.OutRowsetLNListbySnils_Dec.__bases__:
                bases = list(ns0.OutRowsetLNListbySnils_Dec.__bases__)
                bases.insert(0, ns0.OutRowsetLNListbySnils_Def)
                ns0.OutRowsetLNListbySnils_Dec.__bases__ = tuple(bases)

            ns0.OutRowsetLNListbySnils_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "OutRowsetLNListbySnils_Dec_Holder"

    class ROWSET_Dec(ElementDeclaration):
        literal = "ROWSET"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROWSET")
            kw["aname"] = "_ROWSET"
            if ns0.ROWSET_Def not in ns0.ROWSET_Dec.__bases__:
                bases = list(ns0.ROWSET_Dec.__bases__)
                bases.insert(0, ns0.ROWSET_Def)
                ns0.ROWSET_Dec.__bases__ = tuple(bases)

            ns0.ROWSET_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ROWSET_Dec_Holder"

    class ROWSET_WRAPPER_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ROWSET_WRAPPER"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        def __init__(self, **kw):
            ns = ns0.ROWSET_WRAPPER_Dec.schema
            TClist = [GTD("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROWSET",lazy=False)(pname=(ns,"ROWSET"), aname="_ROWSET", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","ROWSET_WRAPPER")
            kw["aname"] = "_ROWSET_WRAPPER"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ROWSET = None
                    return
            Holder.__name__ = "ROWSET_WRAPPER_Holder"
            self.pyclass = Holder

    class SOAPException_Dec(ElementDeclaration):
        literal = "SOAPException"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","SOAPException")
            kw["aname"] = "_SOAPException"
            if ns0.SOAPException_Def not in ns0.SOAPException_Dec.__bases__:
                bases = list(ns0.SOAPException_Dec.__bases__)
                bases.insert(0, ns0.SOAPException_Def)
                ns0.SOAPException_Dec.__bases__ = tuple(bases)

            ns0.SOAPException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SOAPException_Dec_Holder"

    class disableLn_Dec(ElementDeclaration):
        literal = "disableLn"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","disableLn")
            kw["aname"] = "_disableLn"
            if ns0.disableLn_Def not in ns0.disableLn_Dec.__bases__:
                bases = list(ns0.disableLn_Dec.__bases__)
                bases.insert(0, ns0.disableLn_Def)
                ns0.disableLn_Dec.__bases__ = tuple(bases)

            ns0.disableLn_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableLn_Dec_Holder"

    class disableLnResponse_Dec(ElementDeclaration):
        literal = "disableLnResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","disableLnResponse")
            kw["aname"] = "_disableLnResponse"
            if ns0.disableLnResponse_Def not in ns0.disableLnResponse_Dec.__bases__:
                bases = list(ns0.disableLnResponse_Dec.__bases__)
                bases.insert(0, ns0.disableLnResponse_Def)
                ns0.disableLnResponse_Dec.__bases__ = tuple(bases)

            ns0.disableLnResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableLnResponse_Dec_Holder"

    class getExistingLNNumRange_Dec(ElementDeclaration):
        literal = "getExistingLNNumRange"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getExistingLNNumRange")
            kw["aname"] = "_getExistingLNNumRange"
            if ns0.getExistingLNNumRange_Def not in ns0.getExistingLNNumRange_Dec.__bases__:
                bases = list(ns0.getExistingLNNumRange_Dec.__bases__)
                bases.insert(0, ns0.getExistingLNNumRange_Def)
                ns0.getExistingLNNumRange_Dec.__bases__ = tuple(bases)

            ns0.getExistingLNNumRange_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getExistingLNNumRange_Dec_Holder"

    class getExistingLNNumRangeResponse_Dec(ElementDeclaration):
        literal = "getExistingLNNumRangeResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getExistingLNNumRangeResponse")
            kw["aname"] = "_getExistingLNNumRangeResponse"
            if ns0.getExistingLNNumRangeResponse_Def not in ns0.getExistingLNNumRangeResponse_Dec.__bases__:
                bases = list(ns0.getExistingLNNumRangeResponse_Dec.__bases__)
                bases.insert(0, ns0.getExistingLNNumRangeResponse_Def)
                ns0.getExistingLNNumRangeResponse_Dec.__bases__ = tuple(bases)

            ns0.getExistingLNNumRangeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getExistingLNNumRangeResponse_Dec_Holder"

    class getLNData_Dec(ElementDeclaration):
        literal = "getLNData"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNData")
            kw["aname"] = "_getLNData"
            if ns0.getLNData_Def not in ns0.getLNData_Dec.__bases__:
                bases = list(ns0.getLNData_Dec.__bases__)
                bases.insert(0, ns0.getLNData_Def)
                ns0.getLNData_Dec.__bases__ = tuple(bases)

            ns0.getLNData_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNData_Dec_Holder"

    class getLNDataResponse_Dec(ElementDeclaration):
        literal = "getLNDataResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNDataResponse")
            kw["aname"] = "_getLNDataResponse"
            if ns0.getLNDataResponse_Def not in ns0.getLNDataResponse_Dec.__bases__:
                bases = list(ns0.getLNDataResponse_Dec.__bases__)
                bases.insert(0, ns0.getLNDataResponse_Def)
                ns0.getLNDataResponse_Dec.__bases__ = tuple(bases)

            ns0.getLNDataResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNDataResponse_Dec_Holder"

    class getLNListByDate_Dec(ElementDeclaration):
        literal = "getLNListByDate"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNListByDate")
            kw["aname"] = "_getLNListByDate"
            if ns0.getLNListByDate_Def not in ns0.getLNListByDate_Dec.__bases__:
                bases = list(ns0.getLNListByDate_Dec.__bases__)
                bases.insert(0, ns0.getLNListByDate_Def)
                ns0.getLNListByDate_Dec.__bases__ = tuple(bases)

            ns0.getLNListByDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListByDate_Dec_Holder"

    class getLNListByDateResponse_Dec(ElementDeclaration):
        literal = "getLNListByDateResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNListByDateResponse")
            kw["aname"] = "_getLNListByDateResponse"
            if ns0.getLNListByDateResponse_Def not in ns0.getLNListByDateResponse_Dec.__bases__:
                bases = list(ns0.getLNListByDateResponse_Dec.__bases__)
                bases.insert(0, ns0.getLNListByDateResponse_Def)
                ns0.getLNListByDateResponse_Dec.__bases__ = tuple(bases)

            ns0.getLNListByDateResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListByDateResponse_Dec_Holder"

    class getLNListBySnils_Dec(ElementDeclaration):
        literal = "getLNListBySnils"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNListBySnils")
            kw["aname"] = "_getLNListBySnils"
            if ns0.getLNListBySnils_Def not in ns0.getLNListBySnils_Dec.__bases__:
                bases = list(ns0.getLNListBySnils_Dec.__bases__)
                bases.insert(0, ns0.getLNListBySnils_Def)
                ns0.getLNListBySnils_Dec.__bases__ = tuple(bases)

            ns0.getLNListBySnils_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListBySnils_Dec_Holder"

    class getLNListBySnilsResponse_Dec(ElementDeclaration):
        literal = "getLNListBySnilsResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getLNListBySnilsResponse")
            kw["aname"] = "_getLNListBySnilsResponse"
            if ns0.getLNListBySnilsResponse_Def not in ns0.getLNListBySnilsResponse_Dec.__bases__:
                bases = list(ns0.getLNListBySnilsResponse_Dec.__bases__)
                bases.insert(0, ns0.getLNListBySnilsResponse_Def)
                ns0.getLNListBySnilsResponse_Dec.__bases__ = tuple(bases)

            ns0.getLNListBySnilsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getLNListBySnilsResponse_Dec_Holder"

    class getNewLNNum_Dec(ElementDeclaration):
        literal = "getNewLNNum"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getNewLNNum")
            kw["aname"] = "_getNewLNNum"
            if ns0.getNewLNNum_Def not in ns0.getNewLNNum_Dec.__bases__:
                bases = list(ns0.getNewLNNum_Dec.__bases__)
                bases.insert(0, ns0.getNewLNNum_Def)
                ns0.getNewLNNum_Dec.__bases__ = tuple(bases)

            ns0.getNewLNNum_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNum_Dec_Holder"

    class getNewLNNumRange_Dec(ElementDeclaration):
        literal = "getNewLNNumRange"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getNewLNNumRange")
            kw["aname"] = "_getNewLNNumRange"
            if ns0.getNewLNNumRange_Def not in ns0.getNewLNNumRange_Dec.__bases__:
                bases = list(ns0.getNewLNNumRange_Dec.__bases__)
                bases.insert(0, ns0.getNewLNNumRange_Def)
                ns0.getNewLNNumRange_Dec.__bases__ = tuple(bases)

            ns0.getNewLNNumRange_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumRange_Dec_Holder"

    class getNewLNNumRangeResponse_Dec(ElementDeclaration):
        literal = "getNewLNNumRangeResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getNewLNNumRangeResponse")
            kw["aname"] = "_getNewLNNumRangeResponse"
            if ns0.getNewLNNumRangeResponse_Def not in ns0.getNewLNNumRangeResponse_Dec.__bases__:
                bases = list(ns0.getNewLNNumRangeResponse_Dec.__bases__)
                bases.insert(0, ns0.getNewLNNumRangeResponse_Def)
                ns0.getNewLNNumRangeResponse_Dec.__bases__ = tuple(bases)

            ns0.getNewLNNumRangeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumRangeResponse_Dec_Holder"

    class getNewLNNumResponse_Dec(ElementDeclaration):
        literal = "getNewLNNumResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","getNewLNNumResponse")
            kw["aname"] = "_getNewLNNumResponse"
            if ns0.getNewLNNumResponse_Def not in ns0.getNewLNNumResponse_Dec.__bases__:
                bases = list(ns0.getNewLNNumResponse_Dec.__bases__)
                bases.insert(0, ns0.getNewLNNumResponse_Def)
                ns0.getNewLNNumResponse_Dec.__bases__ = tuple(bases)

            ns0.getNewLNNumResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNewLNNumResponse_Dec_Holder"

    class prParseFileNumberslpu_Dec(ElementDeclaration):
        literal = "prParseFileNumberslpu"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","prParseFileNumberslpu")
            kw["aname"] = "_prParseFileNumberslpu"
            if ns0.prParseFileNumberslpu_Def not in ns0.prParseFileNumberslpu_Dec.__bases__:
                bases = list(ns0.prParseFileNumberslpu_Dec.__bases__)
                bases.insert(0, ns0.prParseFileNumberslpu_Def)
                ns0.prParseFileNumberslpu_Dec.__bases__ = tuple(bases)

            ns0.prParseFileNumberslpu_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFileNumberslpu_Dec_Holder"

    class prParseFileNumberslpuResponse_Dec(ElementDeclaration):
        literal = "prParseFileNumberslpuResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","prParseFileNumberslpuResponse")
            kw["aname"] = "_prParseFileNumberslpuResponse"
            if ns0.prParseFileNumberslpuResponse_Def not in ns0.prParseFileNumberslpuResponse_Dec.__bases__:
                bases = list(ns0.prParseFileNumberslpuResponse_Dec.__bases__)
                bases.insert(0, ns0.prParseFileNumberslpuResponse_Def)
                ns0.prParseFileNumberslpuResponse_Dec.__bases__ = tuple(bases)

            ns0.prParseFileNumberslpuResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFileNumberslpuResponse_Dec_Holder"

    class prParseFilelnlpu_Dec(ElementDeclaration):
        literal = "prParseFilelnlpu"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","prParseFilelnlpu")
            kw["aname"] = "_prParseFilelnlpu"
            if ns0.prParseFilelnlpu_Def not in ns0.prParseFilelnlpu_Dec.__bases__:
                bases = list(ns0.prParseFilelnlpu_Dec.__bases__)
                bases.insert(0, ns0.prParseFilelnlpu_Def)
                ns0.prParseFilelnlpu_Dec.__bases__ = tuple(bases)

            ns0.prParseFilelnlpu_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFilelnlpu_Dec_Holder"

    class prParseFilelnlpuResponse_Dec(ElementDeclaration):
        literal = "prParseFilelnlpuResponse"
        schema = "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl","prParseFilelnlpuResponse")
            kw["aname"] = "_prParseFilelnlpuResponse"
            if ns0.prParseFilelnlpuResponse_Def not in ns0.prParseFilelnlpuResponse_Dec.__bases__:
                bases = list(ns0.prParseFilelnlpuResponse_Dec.__bases__)
                bases.insert(0, ns0.prParseFilelnlpuResponse_Def)
                ns0.prParseFilelnlpuResponse_Dec.__bases__ = tuple(bases)

            ns0.prParseFilelnlpuResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "prParseFilelnlpuResponse_Dec_Holder"

# end class ns0 (tns: http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl)

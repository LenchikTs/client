# -*- coding: utf-8 -*-
#############################################################################
##
## Copyright (C) 2019 SAMSON Group. All rights reserved.
##
#############################################################################
##
## Это программа является свободным программным обеспечением.
## Вы можете использовать, распространять и/или модифицировать её согласно
## условиям GNU GPL версии 3 или любой более поздней версии.
##
#############################################################################
##
## OID-ы, имеющие отношение к криптографии.
## они не специфичны ни для криптопровайдера ни для MSCAPI,
## но поскольку мы ориентируемся на MSCAPI, пусть лежит здесь.
##
#############################################################################



# Иденитфикаторы типов ключей:
oidKeyGostR3410_2001      = '1.2.643.2.2.19'    # Алгоритм ГОСТ Р 34.10-2001, используемый при экспорте/импорте ключей
oidKeyGostR3410_2012_256  = '1.2.643.7.1.1.1.1' # Алгоритм ГОСТ Р 34.10-2012 для ключей длины 256 бит, используемый при экспорте/импорте ключей
oidKeyGostR3410_2012_512  = '1.2.643.7.1.1.1.2' # Алгоритм ГОСТ Р 34.10-2012 для ключей длины 512 бит, используемый при экспорте/импорте ключей


# Алгоритмы хеширования:
oidHashGostR3411_94       = '1.2.643.2.2.9'     # Функция хэширования ГОСТ Р 34.11-94
oidHashGostR3411_2012_256 = '1.2.643.7.1.1.2.2' # Функция хэширования ГОСТ Р 34.11-2012, длина выхода 256 бит
oidHashGostR3411_2012_512 = '1.2.643.7.1.1.2.3' # Функция хэширования ГОСТ Р 34.11-2012, длина выхода 512 бит.


# Алгоритмы подписей:
oidSignGostR3410_2001     = '1.2.643.2.2.3'     # Алгоритм цифровой подписи ГОСТ Р 34.10-2001
oidSignGostR3410_2012_256 = '1.2.643.7.1.1.3.2' # Алгоритм цифровой подписи ГОСТ Р 34.10-2012 для ключей длины 256 бит
oidSignGostR3410_2012_512 = '1.2.643.7.1.1.3.3' # Алгоритм цифровой подписи ГОСТ Р 34.10-2012 для ключей длины 512 бит


# получить имя типа ключа по OID
def getKeyOidName(keyOid):
    # "питонический" код обычно использует словари.
    # но здесь от этого не будет никакого выигрыша
    if keyOid == oidKeyGostR3410_2001:
        return u'ГОСТ Р 34.10-2001'
    if keyOid == oidKeyGostR3410_2012_256:
        return u'ГОСТ Р 34.10-2012, ключ 256 бит'
    if keyOid == oidKeyGostR3410_2012_512:
        return u'ГОСТ Р 34.10-2012, ключ 512 бит'
    return u'Неизвестный %s' % keyOid


# получить OID hash-а по OID ключа
def getHashOidByKeyOid(keyOid):
    if keyOid == oidKeyGostR3410_2001:
        return oidHashGostR3411_94
    if keyOid == oidKeyGostR3410_2012_256:
        return oidHashGostR3411_2012_256
    if keyOid == oidKeyGostR3410_2012_512:
        return oidHashGostR3411_2012_512
    raise Exception(u'Неизвестный идентификатор ключа OID=«%s»' % keyOid)


# получить OID алгоритма подписи по OID ключа
def getSignOidByKeyOid(keyOid):
    if keyOid == oidKeyGostR3410_2001:
        return oidSignGostR3410_2001
    if keyOid == oidKeyGostR3410_2012_256:
        return oidSignGostR3410_2012_256
    if keyOid == oidKeyGostR3410_2012_512:
        return oidSignGostR3410_2012_512
    raise Exception(u'Неизвестный идентификатор ключа OID=«%s»' % keyOid)
